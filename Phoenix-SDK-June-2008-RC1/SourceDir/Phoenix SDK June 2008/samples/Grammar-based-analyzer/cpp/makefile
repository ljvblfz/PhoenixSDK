
# Macros RELEASE, BINDIR, LIBPATH, YACC and FLEX can be set on the command line
# to customize the build process.

!IFDEF RELEASE
BUILD=release
!ELSE
BUILD=debug
!ENDIF

# Output path.
BINDIR=$(BUILD)

# Path to resolve assembly references.
LIBPATH="%RDKRoot%\bin\$(BUILD)"

# Yacc and flex executables
YACC=yacc
FLEX=flex

# Set path on which to find ilasm.exe.
DOT_NET_FRX_DIR=$(FRAMEWORKDIR)\$(FRAMEWORKVERSION)

# If ilasm.exe is not in $(DOT_NET_FRX_DIR) but on the PATH, this directive
# makes sure it gets found.
!IF [dir "$(DOT_NET_FRX_DIR)\ilasm.exe" > nul 2>nul] == 0
ILASM=$(DOT_NET_FRX_DIR)\ilasm.exe
!ELSE
ILASM=ilasm.exe
!ENDIF

#
# Build rules.
#

build:	$(BINDIR)\FrontEnd.exe

rebuild:	clean $(BINDIR)\FrontEnd.exe

clean:
	-del /q $(BINDIR)
	-del Parser.cpp Tokens.cpp YaccDeclarations.h
	-if exist "$(MAKEDIR)\temp" rd /s /q "$(MAKEDIR)\temp"


# The scanner depends on file YaccDeclarations.h, which is generated by yacc.

Tokens.cpp: YaccDeclarations.h Tokens.flex
	$(FLEX) -oTokens.cpp Tokens.flex

Grammar.y: Ast.h


#--------------------------------
# Rules for Berkeley Yacc
#--------------------------------

#YaccDeclarations.h: Parser.cpp
#	del YaccDeclarations.h 2>nul & rename Y_TAB.h YaccDeclarations.h
 
#Parser.cpp: Grammar.y
#	byacc -l -d Grammar.y
#	del Parser.cpp 2>nul & rename Y_TAB.c Parser.cpp

#--------------------------------
# Rules for XPG4-Unix Yacc
#--------------------------------

YaccDeclarations.h: Parser.cpp
	del YaccDeclarations.h 2>nul & rename y.tab.h YaccDeclarations.h

Parser.cpp: Grammar.y
	@if not exist "$(MAKEDIR)\temp" md "$(MAKEDIR)\temp"
	@set TMPDIR=$(MAKEDIR)\temp
	$(YACC) -l -d Grammar.y
	del Parser.cpp 2>nul & rename y.tab.c Parser.cpp


#
# Compilation/linking rules.
#

# Include dependencies (conservatively stated).

INCLUDE_FILES=Ast.h YaccDeclarations.h RankedSymExtensionObject.h Parser.h Scanner.h 

Ast.cpp: $(INCLUDE_FILES)

FrontEnd.cpp: $(INCLUDE_FILES)

RankedSymExtensionObject.cpp: $(INCLUDE_FILES)


# Link rules

$(BINDIR)\FrontEnd.exe: $(BINDIR) LINK_FRONTEND

$(BINDIR):
	if not exist $(BINDIR) 	md $(BINDIR)

LINK_FRONTEND: $(BINDIR)\Ast.obj $(BINDIR)\FrontEnd.obj $(BINDIR)\RankedSymExtensionObject.obj $(BINDIR)\Parser.obj $(BINDIR)\Tokens.obj
	link /OUT:"$(BINDIR)\FrontEnd.exe" /NOLOGO /DEBUG /PROFILE $**

# CL flags

!IFDEF RELEASE
OPT_FLAG=/Od
LIB_SUFFIX=
!ELSE
OPT_FLAG=
LIB_SUFFIX=d
!ENDIF

PHX_LIBS=/FU "architecture-x86$(LIB_SUFFIX).dll" /FU "architecture-msil$(LIB_SUFFIX).dll" \
 /FU "phx$(LIB_SUFFIX).dll" /FU "runtime-vccrt-win32-x86$(LIB_SUFFIX).dll"\
 /FU "runtime-vccrt-win-msil$(LIB_SUFFIX).dll" 

# CL flags used both for user files and generated files.

COMMON_CPPFLAGS=/c /clr $(OPT_FLAG) /nologo /Zi $(PHX_LIBS) /AI $(LIBPATH) /Fo$(BINDIR)\$(@B).obj

# Rules for compiling user-defined files.

USR_CPPFLAGS=/W4 $(COMMON_CPPFLAGS)

$(BINDIR)\Ast.obj: Ast.cpp
	cl $(USR_CPPFLAGS) $**

$(BINDIR)\FrontEnd.obj: FrontEnd.cpp
	cl $(USR_CPPFLAGS) $**

$(BINDIR)\RankedSymExtensionObject.obj: RankedSymExtensionObject.cpp
	cl $(USR_CPPFLAGS) $**

# Parser.cpp and Tokens.cpp, which are automatically generated, are not
# compiled with the /W4 flag so as not to show warnings due to code in the lex
# and yacc skeletons. If this sample is modified, it may be useful to add the
# W4 flag and look out for warnings caused by the changes.

$(BINDIR)\Parser.obj: Parser.cpp
	cl $(COMMON_CPPFLAGS) Parser.cpp

$(BINDIR)\Tokens.obj: Tokens.cpp
	cl -D_CRT_SECURE_NO_DEPRECATE $(COMMON_CPPFLAGS) Tokens.cpp

#--------------------------------
# Tests.
#--------------------------------

SAMPLE_DIR=$(RDKROOT)src\samples

test1: Hanoi.exe
	Hanoi.exe

test2: Hanoi-mtrace.exe
	.\Hanoi-mtrace.exe

Hanoi.exe: Hanoi.ilasm
	$(ILASM) /nologo /debug Hanoi.ilasm /output=Hanoi.exe

Hanoi-mtrace.exe: Hanoi.exe "$(SAMPLE_DIR)\mtrace\csharp\bin\debug\mtrace.exe"
	"$(SAMPLE_DIR)\mtrace\csharp\bin\debug\mtrace.exe" Hanoi.exe

Hanoi.ilasm: $(BINDIR)\FrontEnd.exe
	$(BINDIR)\FrontEnd.exe Hanoi.min > Hanoi.ilasm

"$(SAMPLE_DIR)\mtrace\csharp\bin\debug\mtrace.exe": 
	pushd "$(SAMPLE_DIR)\mtrace\csharp" && devenv mtrace.sln /build & popd


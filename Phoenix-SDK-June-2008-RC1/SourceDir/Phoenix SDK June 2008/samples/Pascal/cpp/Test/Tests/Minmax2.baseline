Compiling...
Minmax2.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 41(0x00000029).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 41(0x00000029).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Minmax2.CDecl.Function()->(void)                #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #4
                       START Minmax2(T)                                      #4
Minmax2: (references=1)                                                      #4
                       ENTERFUNCTION                                         #4
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 2.i32, 5.i32, &n.up32->integer (i32), &a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640), &i.up32->integer (i32), &j.up32->integer (i32), &minmax.up32->$$unnamed101 (Aggregate64)            #41
   n.integer (i32).a32 = ASSIGN 20(0x00000014).integer (i32)                 #6
   minmax"$runtime_handle"($$unnamed101 (Aggregate64)+0).HANDLE (up32->void).a32 = CALL &_file_open.CDecl.Function(up32->i8,i32,i32,i32)->(HANDLE (up32->void)), &$SG105.up32->char (i8), 0.i32, 0.i32, 9.i32                                #9
   t147.i32          = CALL &_file_get_int.CDecl.Function(HANDLE (up32->void),i32,i32)->(i32), minmax"$runtime_handle"($$unnamed101 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 9.i32                                                   #9
   [&minmax.up32->$$unnamed101 (Aggregate64)+4].integer (i32).a32 = ASSIGN t147.i32                                                                          #9
   i.integer (i32).a32 = ASSIGN 1.integer (i32)                             #31
   tv148-.integer (i32) = ASSIGN i.integer (i32).a32                        #31
                       GOTO $L4                                             #31
$L4: (references=2)                                                         #31
   t149.i32          = COMPARE(GT) tv148-.integer (i32), n.integer (i32).a32 #31
                       CONDITIONALBRANCH(True) t149.i32, $L5, $L6           #31
$L5: (references=1)                                                         #31
   tv152-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #31
                       GOTO $L7                                             #31
$L6: (references=1)                                                         #31
   tv152-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #31
                       GOTO $L7                                             #31
$L7: (references=2)                                                         #31
                       CONDITIONALBRANCH(True) tv152"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #31
$L9: (references=1)                                                         #31
   i.integer (i32).a32 = ASSIGN tv148-.integer (i32)                        #31
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, i.integer (i32).a32, 0.i32, 32(0x00000020).i32                                                                #32
   t153.i32          = SUBTRACT i.integer (i32).a32, 1.i32                  #32
   t154.i32          = MULTIPLY 1.i32, t153.i32                             #32
   t155.i32          = ADD t154.i32, 0.i32                                  #32
   tv156-.i32        = MULTIPLY 4.i32, t155.i32                             #32
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv156-.i32, 0.i32, 32(0x00000020).i32                                                                         #32
   [&a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640)+tv156-.i32].integer (i32).a32 = ASSIGN minmax"$current_value"($$unnamed101 (Aggregate64)+32).integer (i32).a32                                                                       #32
   t157.i32          = CALL &_file_get_int.CDecl.Function(HANDLE (up32->void),i32,i32)->(i32), minmax"$runtime_handle"($$unnamed101 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 32(0x00000020).i32                                     #32
   [&minmax.up32->$$unnamed101 (Aggregate64)+4].integer (i32).a32 = ASSIGN t157.i32                                                                         #32
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, i.integer (i32).a32, 0.i32, 32(0x00000020).i32                                                                #32
   t158.i32          = SUBTRACT i.integer (i32).a32, 1.i32                  #32
   t159.i32          = MULTIPLY 1.i32, t158.i32                             #32
   t160.i32          = ADD t159.i32, 0.i32                                  #32
   tv161-.i32        = MULTIPLY 4.i32, t160.i32                             #32
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv161-.i32, 0.i32, 32(0x00000020).i32                                                                         #32
                       CALL &_file_set_modifier.CDecl.Function(HANDLE (up32->void),i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, 0.i32, 3.integer (i32)                                    #32
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN [&a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640)+tv161-.i32].integer (i32).a32  #32
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 32(0x00000020).i32                                                    #32
   t163.integer (i32) = ADD i.integer (i32).a32, 1.integer (i32)            #32
   tv148-.integer (i32) = ASSIGN t163.integer (i32)                         #32
                       GOTO $L4                                             #32
$L8: (references=1)                                                         #31
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #34
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 34(0x00000022).i32                                                                #34
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #34
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 34(0x00000022).i32                                                                #34
                       CALL &minmax2.CDecl.Function()->(void)               #35
   i.integer (i32).a32 = ASSIGN 1.integer (i32)                             #36
   tv164-.integer (i32) = ASSIGN i.integer (i32).a32                        #36
                       GOTO $L10                                            #36
$L10: (references=2)                                                        #36
   t165.i32          = COMPARE(GT) tv164-.integer (i32), n.integer (i32).a32 #36
                       CONDITIONALBRANCH(True) t165.i32, $L11, $L12         #36
$L11: (references=1)                                                        #36
   tv166-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #36
                       GOTO $L13                                            #36
$L12: (references=1)                                                        #36
   tv166-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #36
                       GOTO $L13                                            #36
$L13: (references=2)                                                        #36
                       CONDITIONALBRANCH(True) tv166"$$data"(Boolean (Enum32)+0).i32, $L14, $L15                                                            #36
$L15: (references=1)                                                        #36
   i.integer (i32).a32 = ASSIGN tv164-.integer (i32)                        #36
   j.integer (i32).a32 = ASSIGN minmax"$current_value"($$unnamed101 (Aggregate64)+32).integer (i32).a32                                                     #37
   t167.i32          = CALL &_file_get_int.CDecl.Function(HANDLE (up32->void),i32,i32)->(i32), minmax"$runtime_handle"($$unnamed101 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 37(0x00000025).i32                                     #37
   [&minmax.up32->$$unnamed101 (Aggregate64)+4].integer (i32).a32 = ASSIGN t167.i32                                                                         #37
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, i.integer (i32).a32, 0.i32, 37(0x00000025).i32                                                                #37
   t168.i32          = SUBTRACT i.integer (i32).a32, 1.i32                  #37
   t169.i32          = MULTIPLY 1.i32, t168.i32                             #37
   t170.i32          = ADD t169.i32, 0.i32                                  #37
   tv171-.i32        = MULTIPLY 4.i32, t170.i32                             #37
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv171-.i32, 0.i32, 37(0x00000025).i32                                                                         #37
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, i.integer (i32).a32, 0.i32, 37(0x00000025).i32                                                                #37
   t172.i32          = SUBTRACT i.integer (i32).a32, 1.i32                  #37
   t173.i32          = MULTIPLY 1.i32, t172.i32                             #37
   t174.i32          = ADD t173.i32, 0.i32                                  #37
   tv175-.i32        = MULTIPLY 4.i32, t174.i32                             #37
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv175-.i32, 0.i32, 37(0x00000025).i32                                                                         #37
   t176.integer (i32) = ADD [&a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640)+tv175-.i32].integer (i32).a32, j.integer (i32).a32                          #37
   [&a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640)+tv171-.i32].integer (i32).a32 = ASSIGN t176.integer (i32)                                            #37
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, i.integer (i32).a32, 0.i32, 37(0x00000025).i32                                                                #37
   t177.i32          = SUBTRACT i.integer (i32).a32, 1.i32                  #37
   t178.i32          = MULTIPLY 1.i32, t177.i32                             #37
   t179.i32          = ADD t178.i32, 0.i32                                  #37
   tv180-.i32        = MULTIPLY 4.i32, t179.i32                             #37
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv180-.i32, 0.i32, 37(0x00000025).i32                                                                         #37
                       CALL &_file_set_modifier.CDecl.Function(HANDLE (up32->void),i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, 0.i32, 3.integer (i32)                                    #37
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN [&a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640)+tv180-.i32].integer (i32).a32  #37
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 37(0x00000025).i32                                                    #37
   t181.integer (i32) = ADD i.integer (i32).a32, 1.integer (i32)            #37
   tv164-.integer (i32) = ASSIGN t181.integer (i32)                         #37
                       GOTO $L10                                            #37
$L14: (references=1)                                                        #36
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #39
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 39(0x00000027).i32                                                                #39
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #39
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 39(0x00000027).i32                                                                #39
                       CALL &minmax2.CDecl.Function()->(void)               #41
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #41
                       RETURN $L16(T)                                       #41
$L16: (references=1)                                                        #41
                       EXITFUNCTION                                         #41
$L2: (references=0)                                                         #41
                       END                                                  #41

IR after Type Checker (control chktype)

Function Unit #3
$L1: (references=0)                                                         #10
                       START minmax2(T)                                     #10
minmax2: (references=1)                                                     #10
                       ENTERFUNCTION                                        #10
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 3.i32, 5.i32, &i.up32->$$unnamed102 (i32), &u.up32->integer (i32), &v.up32->integer (i32), &min.up32->integer (i32), &max.up32->integer (i32)                                                 #28
   t143.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 1.i32                                            #12
   tv147-.i32        = ASSIGN 0.i32                                         #12
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv147-.i32, 0.i32, 12(0x0000000c).i32                                                                         #12
   min.integer (i32).a32 = ASSIGN [t143.up32->void+tv147-.i32]($$unnamed100 (UnmgdArr[integer (i32)]640)+0).integer (i32).a1024                             #12
   max.integer (i32).a32 = ASSIGN min.integer (i32).a32                     #12
   i.$$unnamed102 (i32).a32 = ASSIGN 2.integer (i32)                        #12
                       GOTO $L4                                             #13
$L4: (references=2)                                                         #13
   t148.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                            #13
   t149.i32          = COMPARE(GT) [t148.up32->void].integer (i32).a32, i.$$unnamed102 (i32).a32                                                            #13
                       CONDITIONALBRANCH(True) t149.i32, $L5, $L6           #13
$L5: (references=1)                                                         #13
   tv152-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #13
                       GOTO $L7                                             #13
$L6: (references=1)                                                         #13
   tv152-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #13
                       GOTO $L7                                             #13
$L7: (references=2)                                                         #13
                       CONDITIONALBRANCH(True) tv152"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #13
$L8: (references=1)                                                         #13
   t153.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 1.i32                                            #14
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, i.$$unnamed102 (i32).a32, 0.i32, 14(0x0000000e).i32                                                           #14
   t155.i32          = SUBTRACT i.$$unnamed102 (i32).a32, 1.i32             #14
   t156.i32          = ADD t155.i32, 0.i32                                  #14
   tv157-.i32        = MULTIPLY 4.i32, t156.i32                             #14
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv157-.i32, 0.i32, 14(0x0000000e).i32                                                                         #14
   u.integer (i32).a32 = ASSIGN [t153.up32->void+tv157-.i32]($$unnamed100 (UnmgdArr[integer (i32)]640)+0).integer (i32).a1024                               #14
   t158.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 1.i32                                            #14
   tv159-.integer (i32) = ADD i.$$unnamed102 (i32).a32, 1.integer (i32)     #14
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, tv159-.integer (i32), 0.i32, 14(0x0000000e).i32                                                               #14
   t160.i32          = SUBTRACT tv159-.integer (i32), 1.i32                 #14
   t161.i32          = MULTIPLY 1.i32, t160.i32                             #14
   t162.i32          = ADD t161.i32, 0.i32                                  #14
   tv163-.i32        = MULTIPLY 4.i32, t162.i32                             #14
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv163-.i32, 0.i32, 14(0x0000000e).i32                                                                         #14
   v.integer (i32).a32 = ASSIGN [t158.up32->void+tv163-.i32]($$unnamed100 (UnmgdArr[integer (i32)]640)+0).integer (i32).a1024                               #14
   t164.i32          = COMPARE(GT) u.integer (i32).a32, v.integer (i32).a32 #15
                       CONDITIONALBRANCH(True) t164.i32, $L10, $L11         #15
$L10: (references=1)                                                        #15
   tv165-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #15
                       GOTO $L12                                            #15
$L11: (references=1)                                                        #15
   tv165-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #15
                       GOTO $L12                                            #15
$L12: (references=2)                                                        #15
                       CONDITIONALBRANCH(True) tv165"$$data"(Boolean (Enum32)+0).i32, $L13, $L14                                                            #15
$L13: (references=1)                                                        #15
   t166.i32          = COMPARE(GT) u.integer (i32).a32, max.integer (i32).a32 #16
                       CONDITIONALBRANCH(True) t166.i32, $L16, $L17         #16
$L16: (references=1)                                                        #16
   tv167-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #16
                       GOTO $L18                                            #16
$L17: (references=1)                                                        #16
   tv167-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #16
                       GOTO $L18                                            #16
$L18: (references=2)                                                        #16
                       CONDITIONALBRANCH(True) tv167"$$data"(Boolean (Enum32)+0).i32, $L19, $L20                                                            #16
$L19: (references=1)                                                        #16
   max.integer (i32).a32 = ASSIGN u.integer (i32).a32                       #16
                       GOTO $L20                                            #16
$L20: (references=2)                                                        #16
   t168.i32          = COMPARE(LT) v.integer (i32).a32, min.integer (i32).a32 #17
                       CONDITIONALBRANCH(True) t168.i32, $L21, $L22         #17
$L21: (references=1)                                                        #17
   tv169-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #17
                       GOTO $L23                                            #17
$L22: (references=1)                                                        #17
   tv169-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #17
                       GOTO $L23                                            #17
$L23: (references=2)                                                        #17
                       CONDITIONALBRANCH(True) tv169"$$data"(Boolean (Enum32)+0).i32, $L24, $L25                                                            #17
$L24: (references=1)                                                        #17
   min.integer (i32).a32 = ASSIGN v.integer (i32).a32                       #18
                       GOTO $L25                                            #18
$L25: (references=2)                                                        #17
                       GOTO $L15                                            #18
$L14: (references=1)                                                        #15
   t170.i32          = COMPARE(GT) v.integer (i32).a32, max.integer (i32).a32 #19
                       CONDITIONALBRANCH(True) t170.i32, $L26, $L27         #19
$L26: (references=1)                                                        #19
   tv171-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #19
                       GOTO $L28                                            #19
$L27: (references=1)                                                        #19
   tv171-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #19
                       GOTO $L28                                            #19
$L28: (references=2)                                                        #19
                       CONDITIONALBRANCH(True) tv171"$$data"(Boolean (Enum32)+0).i32, $L29, $L30                                                            #19
$L29: (references=1)                                                        #19
   max.integer (i32).a32 = ASSIGN v.integer (i32).a32                       #19
                       GOTO $L30                                            #19
$L30: (references=2)                                                        #19
   t172.i32          = COMPARE(LT) u.integer (i32).a32, min.integer (i32).a32 #20
                       CONDITIONALBRANCH(True) t172.i32, $L31, $L32         #20
$L31: (references=1)                                                        #20
   tv173-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #20
                       GOTO $L33                                            #20
$L32: (references=1)                                                        #20
   tv173-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #20
                       GOTO $L33                                            #20
$L33: (references=2)                                                        #20
                       CONDITIONALBRANCH(True) tv173"$$data"(Boolean (Enum32)+0).i32, $L34, $L35                                                            #20
$L34: (references=1)                                                        #20
   min.integer (i32).a32 = ASSIGN u.integer (i32).a32                       #21
                       GOTO $L35                                            #21
$L35: (references=2)                                                        #20
                       GOTO $L15                                            #21
$L15: (references=2)                                                        #15
   t174.integer (i32) = ADD i.$$unnamed102 (i32).a32, 2.integer (i32)       #22
   i.$$unnamed102 (i32).a32 = ASSIGN t174.integer (i32)                     #22
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, i.$$unnamed102 (i32).a32, 0.i32, 23(0x00000017).i32                                                           #22
                       GOTO $L4                                             #22
$L9: (references=1)                                                         #13
   t175.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                            #24
   t176.i32          = COMPARE(EQ) i.$$unnamed102 (i32).a32, [t175.up32->void].integer (i32).a32                                                            #24
                       CONDITIONALBRANCH(True) t176.i32, $L36, $L37         #24
$L36: (references=1)                                                        #24
   tv177-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #24
                       GOTO $L38                                            #24
$L37: (references=1)                                                        #24
   tv177-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #24
                       GOTO $L38                                            #24
$L38: (references=2)                                                        #24
                       CONDITIONALBRANCH(True) tv177"$$data"(Boolean (Enum32)+0).i32, $L39, $L40                                                            #24
$L39: (references=1)                                                        #24
   t178.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 1.i32                                            #25
   tv179-.up32->void = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                            #25
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, [tv179-.up32->void].integer (i32).a32, 0.i32, 25(0x00000019).i32                                              #25
   t180.i32          = SUBTRACT [tv179-.up32->void].integer (i32).a32, 1.i32 #25
   t181.i32          = MULTIPLY 1.i32, t180.i32                             #25
   t182.i32          = ADD t181.i32, 0.i32                                  #25
   tv183-.i32        = MULTIPLY 4.i32, t182.i32                             #25
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv183-.i32, 0.i32, 25(0x00000019).i32                                                                         #25
   t184.i32          = COMPARE(GT) [t178.up32->void+tv183-.i32]($$unnamed100 (UnmgdArr[integer (i32)]640)+0).integer (i32).a1024, max.integer (i32).a32     #25
                       CONDITIONALBRANCH(True) t184.i32, $L41, $L42         #25
$L41: (references=1)                                                        #25
   tv185-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #25
                       GOTO $L43                                            #25
$L42: (references=1)                                                        #25
   tv185-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #25
                       GOTO $L43                                            #25
$L43: (references=2)                                                        #25
                       CONDITIONALBRANCH(True) tv185"$$data"(Boolean (Enum32)+0).i32, $L44, $L45                                                            #25
$L44: (references=1)                                                        #25
   t186.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 1.i32                                            #25
   tv187-.up32->void = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                            #25
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, [tv187-.up32->void].integer (i32).a32, 0.i32, 25(0x00000019).i32                                              #25
   t188.i32          = SUBTRACT [tv187-.up32->void].integer (i32).a32, 1.i32 #25
   t189.i32          = MULTIPLY 1.i32, t188.i32                             #25
   t190.i32          = ADD t189.i32, 0.i32                                  #25
   tv191-.i32        = MULTIPLY 4.i32, t190.i32                             #25
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv191-.i32, 0.i32, 25(0x00000019).i32                                                                         #25
   max.integer (i32).a32 = ASSIGN [t186.up32->void+tv191-.i32]($$unnamed100 (UnmgdArr[integer (i32)]640)+0).integer (i32).a1024                             #25
                       GOTO $L46                                            #25
$L45: (references=1)                                                        #25
   t192.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 1.i32                                            #26
   tv193-.up32->void = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                            #26
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, [tv193-.up32->void].integer (i32).a32, 0.i32, 26(0x0000001a).i32                                              #26
   t194.i32          = SUBTRACT [tv193-.up32->void].integer (i32).a32, 1.i32 #26
   t195.i32          = MULTIPLY 1.i32, t194.i32                             #26
   t196.i32          = ADD t195.i32, 0.i32                                  #26
   tv197-.i32        = MULTIPLY 4.i32, t196.i32                             #26
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv197-.i32, 0.i32, 26(0x0000001a).i32                                                                         #26
   t198.i32          = COMPARE(LT) [t192.up32->void+tv197-.i32]($$unnamed100 (UnmgdArr[integer (i32)]640)+0).integer (i32).a1024, min.integer (i32).a32     #26
                       CONDITIONALBRANCH(True) t198.i32, $L47, $L48         #26
$L47: (references=1)                                                        #26
   tv199-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #26
                       GOTO $L49                                            #26
$L48: (references=1)                                                        #26
   tv199-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #26
                       GOTO $L49                                            #26
$L49: (references=2)                                                        #26
                       CONDITIONALBRANCH(True) tv199"$$data"(Boolean (Enum32)+0).i32, $L50, $L51                                                            #26
$L50: (references=1)                                                        #26
   t200.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 1.i32                                            #26
   tv201-.up32->void = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                            #26
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, [tv201-.up32->void].integer (i32).a32, 0.i32, 26(0x0000001a).i32                                              #26
   t202.i32          = SUBTRACT [tv201-.up32->void].integer (i32).a32, 1.i32 #26
   t203.i32          = MULTIPLY 1.i32, t202.i32                             #26
   t204.i32          = ADD t203.i32, 0.i32                                  #26
   tv205-.i32        = MULTIPLY 4.i32, t204.i32                             #26
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv205-.i32, 0.i32, 26(0x0000001a).i32                                                                         #26
   min.integer (i32).a32 = ASSIGN [t200.up32->void+tv205-.i32]($$unnamed100 (UnmgdArr[integer (i32)]640)+0).integer (i32).a1024                             #26
                       GOTO $L51                                            #26
$L51: (references=2)                                                        #26
                       GOTO $L46                                            #26
$L46: (references=2)                                                        #25
                       GOTO $L40                                            #26
$L40: (references=2)                                                        #24
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN min.integer (i32).a32                                                              #27
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 27(0x0000001b).i32                                                    #27
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                      #27
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 27(0x0000001b).i32                                                         #27
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN max.integer (i32).a32                                                              #27
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 27(0x0000001b).i32                                                    #27
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #27
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 27(0x0000001b).i32                                                                #27
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #27
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 27(0x0000001b).i32                                                                #27
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #28
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 28(0x0000001c).i32                                                                #28
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #28
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 28(0x0000001c).i32                                                                #28
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 3.i32                                                                   #28
                       RETURN $L52(T)                                       #28
$L52: (references=1)                                                        #28
                       EXITFUNCTION                                         #28
$L2: (references=0)                                                         #28
                       END                                                  #28
Writing Minmax2.obj...

Minmax2.p - 0 error(s), 0 warning(s).

Linking...

Minmax2.exe - 0 error(s), 0 warning(s).

 35 68 94  7 88 -5 -3 12 35  9 -6  3  0 -2 74 88 52 43  5  4
-6 94

 35 68 94  7 88 -5 -3 12 35  9 -6  3  0 -2 74 88 52 43  5  4
-6 94


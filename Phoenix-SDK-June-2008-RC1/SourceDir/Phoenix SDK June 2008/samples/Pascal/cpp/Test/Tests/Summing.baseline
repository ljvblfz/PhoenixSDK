Compiling...
Summing.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 26(0x0000001a).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 26(0x0000001a).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Summing.CDecl.Function()->(void)                #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #8
                       START Summing(T)                                      #8
Summing: (references=1)                                                      #8
                       ENTERFUNCTION                                         #8
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 11(0x0000000b).i32, &s1.up32->real (f64), &s2p.up32->real (f64), &s2n.up32->real (f64), &s3.up32->real (f64), &s4p.up32->real (f64), &s4n.up32->real (f64), &lrp.up32->real (f64), &lrn.up32->real (f64), &rlp.up32->real (f64), &rln.up32->real (f64), &i.up32->integer (i32)                                                                         #25
   s1.real (f64).a64 = ASSIGN 0.real (f64)                                  #12
   s2p.real (f64).a64 = ASSIGN 0.real (f64)                                 #12
   s2n.real (f64).a64 = ASSIGN 0.real (f64)                                 #12
   s3.real (f64).a64 = ASSIGN 0.real (f64)                                  #12
   s4p.real (f64).a64 = ASSIGN 0.real (f64)                                 #12
   s4n.real (f64).a64 = ASSIGN 0.real (f64)                                 #12
   i.integer (i32).a32 = ASSIGN 1.integer (i32)                             #13
   tv148-.integer (i32) = ASSIGN i.integer (i32).a32                        #13
                       GOTO $L4                                             #13
$L4: (references=2)                                                         #13
   t149.i32          = COMPARE(LT) 5000(0x00001388).integer (i32), tv148-.integer (i32)                                                                     #13
                       CONDITIONALBRANCH(True) t149.i32, $L5, $L6           #13
$L5: (references=1)                                                         #13
   tv152-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #13
                       GOTO $L7                                             #13
$L6: (references=1)                                                         #13
   tv152-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #13
                       GOTO $L7                                             #13
$L7: (references=2)                                                         #13
                       CONDITIONALBRANCH(True) tv152"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #13
$L9: (references=1)                                                         #13
   i.integer (i32).a32 = ASSIGN tv148-.integer (i32)                        #13
   t153.integer (i32) = MULTIPLY 2.integer (i32), i.integer (i32).a32       #15
   t154.integer (i32) = SUBTRACT t153.integer (i32), 1.integer (i32)        #15
   t156.real (f64)   = CONVERT t154.integer (i32)                           #15
   lrp.real (f64).a64 = DIVIDE 1.real (f64), t156.real (f64)                #15
   t158.integer (i32) = MULTIPLY 2.integer (i32), i.integer (i32).a32       #16
   t159.real (f64)   = CONVERT 1.integer (i32)                              #16
   t160.real (f64)   = CONVERT t158.integer (i32)                           #16
   t161.real (f64)   = DIVIDE t159.real (f64), t160.real (f64)              #16
   lrn.real (f64).a64 = ASSIGN t161.real (f64)                              #16
   t162.integer (i32) = MULTIPLY 2.integer (i32), i.integer (i32).a32       #17
   t163.integer (i32) = SUBTRACT 10001(0x00002711).integer (i32), t162.integer (i32)                                                                        #17
   t164.real (f64)   = CONVERT 1.integer (i32)                              #17
   t165.real (f64)   = CONVERT t163.integer (i32)                           #17
   t166.real (f64)   = DIVIDE t164.real (f64), t165.real (f64)              #17
   rlp.real (f64).a64 = ASSIGN t166.real (f64)                              #17
   t167.integer (i32) = MULTIPLY 2.integer (i32), i.integer (i32).a32       #18
   t168.integer (i32) = SUBTRACT 10002(0x00002712).integer (i32), t167.integer (i32)                                                                        #18
   t169.real (f64)   = CONVERT 1.integer (i32)                              #18
   t170.real (f64)   = CONVERT t168.integer (i32)                           #18
   t171.real (f64)   = DIVIDE t169.real (f64), t170.real (f64)              #18
   rln.real (f64).a64 = ASSIGN t171.real (f64)                              #18
   t172.real (f64)   = ADD s1.real (f64).a64, lrp.real (f64).a64            #19
   t173.real (f64)   = SUBTRACT t172.real (f64), lrn.real (f64).a64         #19
   s1.real (f64).a64 = ASSIGN t173.real (f64)                               #19
   t174.real (f64)   = ADD s2p.real (f64).a64, lrp.real (f64).a64           #20
   s2p.real (f64).a64 = ASSIGN t174.real (f64)                              #20
   t175.real (f64)   = ADD s2n.real (f64).a64, lrn.real (f64).a64           #20
   s2n.real (f64).a64 = ASSIGN t175.real (f64)                              #20
   t176.real (f64)   = ADD s3.real (f64).a64, rlp.real (f64).a64            #21
   t177.real (f64)   = SUBTRACT t176.real (f64), rln.real (f64).a64         #21
   s3.real (f64).a64 = ASSIGN t177.real (f64)                               #21
   t178.real (f64)   = ADD s4p.real (f64).a64, rlp.real (f64).a64           #22
   s4p.real (f64).a64 = ASSIGN t178.real (f64)                              #22
   t179.real (f64)   = ADD s4n.real (f64).a64, rln.real (f64).a64           #23
   s4n.real (f64).a64 = ASSIGN t179.real (f64)                              #23
   t180.integer (i32) = ADD i.integer (i32).a32, 1.integer (i32)            #23
   tv148-.integer (i32) = ASSIGN t180.integer (i32)                         #23
                       GOTO $L4                                             #23
$L8: (references=1)                                                         #13
   t181.real (f64)   = SUBTRACT s2p.real (f64).a64, s2n.real (f64).a64      #24
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN s1.real (f64).a64                                                                     #24
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 24(0x00000018).i32                                                    #24
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 9.char (i8) #24
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 24(0x00000018).i32                                                         #24
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN t181.real (f64)                                                                       #24
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 24(0x00000018).i32                                                    #24
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #24
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 24(0x00000018).i32                                                                #24
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #24
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 24(0x00000018).i32                                                                #24
   t183.real (f64)   = SUBTRACT s4p.real (f64).a64, s4n.real (f64).a64      #25
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN s3.real (f64).a64                                                                     #25
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 25(0x00000019).i32                                                    #25
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 9.char (i8) #25
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 25(0x00000019).i32                                                         #25
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN t183.real (f64)                                                                       #25
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 25(0x00000019).i32                                                    #25
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #25
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 25(0x00000019).i32                                                                #25
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #25
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 25(0x00000019).i32                                                                #25
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #25
                       RETURN $L10(T)                                       #26
$L10: (references=1)                                                        #26
                       EXITFUNCTION                                         #26
$L2: (references=0)                                                         #26
                       END                                                  #26
Writing Summing.obj...

Summing.p - 0 error(s), 0 warning(s).

Linking...

Summing.exe - 0 error(s), 0 warning(s).

0.693097	0.693097
0.693097	0.693097

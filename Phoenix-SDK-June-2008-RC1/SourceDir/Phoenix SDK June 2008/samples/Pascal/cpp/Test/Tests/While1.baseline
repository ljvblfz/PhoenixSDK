Compiling...
While1.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 18(0x00000012).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 18(0x00000012).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &While1.CDecl.Function()->(void)                 #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #3
                       START While1(T)                                       #3
While1: (references=1)                                                       #3
                       ENTERFUNCTION                                         #3
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 1.i32, &X.up32->integer (i32)                                                                          #17
   X.integer (i32).a32 = ASSIGN 0.integer (i32)                              #7
                       GOTO $L4                                              #7
$L4: (references=2)                                                          #7
   t138.i32          = COMPARE(GT) 10(0x0000000a).integer (i32), X.integer (i32).a32                                                                         #7
                       CONDITIONALBRANCH(True) t138.i32, $L5, $L6            #7
$L5: (references=1)                                                          #7
   tv141-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32                #7
                       GOTO $L7                                              #7
$L6: (references=1)                                                          #7
   tv141-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32               #7
                       GOTO $L7                                              #7
$L7: (references=2)                                                          #7
                       CONDITIONALBRANCH(True) tv141"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                               #7
$L8: (references=1)                                                          #7
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = ASSIGN X.integer (i32).a32                                                                        #9
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).integer (i32).a32, 0.i32, 9.i32                                                                         #9
   output($stdfile (Aggregate2080)+32).i8.a8 = ASSIGN 13(0x0d).i8            #9
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).i8.a8, 0.i32, 9.i32     #9
   output($stdfile (Aggregate2080)+32).i8.a8 = ASSIGN 10(0x0a).i8            #9
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).i8.a8, 0.i32, 9.i32     #9
   X.integer (i32).a32 = ADD 1.integer (i32), X.integer (i32).a32           #10
                       GOTO $L4                                             #10
$L9: (references=1)                                                          #7
   X.integer (i32).a32 = ASSIGN 0.integer (i32)                             #14
                       GOTO $L10                                            #14
$L10: (references=2)                                                        #14
   t144.i32          = COMPARE(LT) X.integer (i32).a32, 10(0x0000000a).integer (i32)                                                                        #14
                       CONDITIONALBRANCH(True) t144.i32, $L11, $L12         #14
$L11: (references=1)                                                        #14
   tv145-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #14
                       GOTO $L13                                            #14
$L12: (references=1)                                                        #14
   tv145-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #14
                       GOTO $L13                                            #14
$L13: (references=2)                                                        #14
                       CONDITIONALBRANCH(True) tv145"$$data"(Boolean (Enum32)+0).i32, $L14, $L15                                                            #14
$L14: (references=1)                                                        #14
   t146.i32          = COMPARE(LT) X.integer (i32).a32, 100(0x00000064).integer (i32)                                                                       #15
                       CONDITIONALBRANCH(True) t146.i32, $L16, $L17         #15
$L16: (references=1)                                                        #15
   tv147-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #15
                       GOTO $L18                                            #15
$L17: (references=1)                                                        #15
   tv147-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #15
                       GOTO $L18                                            #15
$L18: (references=2)                                                        #15
                       CONDITIONALBRANCH(True) tv147"$$data"(Boolean (Enum32)+0).i32, $L19, $L20                                                            #15
$L19: (references=1)                                                        #15
   t148.integer (i32) = ADD X.integer (i32).a32, 100(0x00000064).integer (i32) #16
   X.integer (i32).a32 = ASSIGN t148.integer (i32)                          #16
                       GOTO $L20                                            #16
$L20: (references=2)                                                        #15
                       GOTO $L10                                            #16
$L15: (references=1)                                                        #14
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN X.integer (i32).a32                                                                #17
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 17(0x00000011).i32                                                    #17
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #17
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 17(0x00000011).i32                                                                #17
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #17
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 17(0x00000011).i32                                                                #17
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #17
                       RETURN $L21(T)                                       #18
$L21: (references=1)                                                        #18
                       EXITFUNCTION                                         #18
$L2: (references=0)                                                         #18
                       END                                                  #18
Writing While1.obj...

While1.p - 0 error(s), 0 warning(s).

Linking...

While1.exe - 0 error(s), 0 warning(s).

0
1
2
3
4
5
6
7
8
9
100

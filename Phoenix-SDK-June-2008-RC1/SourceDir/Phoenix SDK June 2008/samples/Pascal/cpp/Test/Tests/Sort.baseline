Compiling...
Sort.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 44(0x0000002c).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 44(0x0000002c).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Sort.CDecl.Function()->(void)                   #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #5
                       START Sort(T)                                         #5
Sort: (references=1)                                                         #5
                       ENTERFUNCTION                                         #5
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 2.i32, 7.i32, &MaxElts.up32->integer (i32), &i.up32->integer (i32), &j.up32->integer (i32), &tmp.up32->integer (i32), &size.up32->integer (i32), &arr.up32->IntArrType (UnmgdArr[integer (i32)]1600), &bubblesort.up32->$$unnamed100 (Aggregate64)                            #43
   MaxElts.integer (i32).a32 = ASSIGN 50(0x00000032).integer (i32)           #8
   bubblesort"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32 = CALL &_file_open.CDecl.Function(up32->i8,i32,i32,i32)->(HANDLE (up32->void)), &$SG105.up32->char (i8), 0.i32, 0.i32, 21(0x00000015).i32              #21
   t149.i32          = CALL &_file_get_int.CDecl.Function(HANDLE (up32->void),i32,i32)->(i32), bubblesort"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 21(0x00000015).i32                                 #21
   [&bubblesort.up32->$$unnamed100 (Aggregate64)+4].integer (i32).a32 = ASSIGN t149.i32                                                                     #21
   size.integer (i32).a32 = ASSIGN 1.integer (i32)                          #25
                       GOTO $L4                                             #26
$L4: (references=2)                                                         #26
   t150.i32          = CALL &_file_eof.CDecl.Function(HANDLE (up32->void))->(i32), bubblesort"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32                                                                        #26
                       CONDITIONALBRANCH(True) t150.i32, $L5, $L6           #26
$L5: (references=1)                                                         #26
   tv153-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #26
                       GOTO $L7                                             #26
$L6: (references=1)                                                         #26
   tv153-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #26
                       GOTO $L7                                             #26
$L7: (references=2)                                                         #26
   tv153-.Boolean (Enum32) = ASSIGN tv153-.Boolean (Enum32)                 #26
   t154.i32          = NOT tv153"$$data"(Boolean (Enum32)+0).i32            #26
                       CONDITIONALBRANCH(True) t154.i32, $L8, $L9           #26
$L8: (references=1)                                                         #26
   tv155-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #26
                       GOTO $L10                                            #26
$L9: (references=1)                                                         #26
   tv155-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #26
                       GOTO $L10                                            #26
$L10: (references=2)                                                        #26
                       CONDITIONALBRANCH(True) tv155"$$data"(Boolean (Enum32)+0).i32, $L11, $L12                                                            #26
$L11: (references=1)                                                        #26
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 50(0x00000032).i32, size.integer (i32).a32, 0.i32, 27(0x0000001b).i32                                                             #27
   t156.i32          = SUBTRACT size.integer (i32).a32, 1.i32               #27
   t157.i32          = MULTIPLY 1.i32, t156.i32                             #27
   t158.i32          = ADD t157.i32, 0.i32                                  #27
   tv159-.i32        = MULTIPLY 4.i32, t158.i32                             #27
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 196(0x000000c4).i32, tv159-.i32, 0.i32, 27(0x0000001b).i32                                                                        #27
   [&arr.up32->IntArrType (UnmgdArr[integer (i32)]1600)+tv159-.i32].integer (i32).a32 = ASSIGN bubblesort"$current_value"($$unnamed100 (Aggregate64)+32).integer (i32).a32                                                                  #27
   t160.i32          = CALL &_file_get_int.CDecl.Function(HANDLE (up32->void),i32,i32)->(i32), bubblesort"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 27(0x0000001b).i32                                 #27
   [&bubblesort.up32->$$unnamed100 (Aggregate64)+4].integer (i32).a32 = ASSIGN t160.i32                                                                     #27
                       CALL &_file_eat_white.CDecl.Function(HANDLE (up32->void),i32,i32)->(void), bubblesort"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 27(0x0000001b).i32                              #27
   t161.i32          = CALL &_file_eof.CDecl.Function(HANDLE (up32->void))->(i32), bubblesort"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32                                                                        #28
                       CONDITIONALBRANCH(True) t161.i32, $L13, $L14         #28
$L13: (references=1)                                                        #28
   tv162-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #28
                       GOTO $L15                                            #28
$L14: (references=1)                                                        #28
   tv162-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #28
                       GOTO $L15                                            #28
$L15: (references=2)                                                        #28
   tv162-.Boolean (Enum32) = ASSIGN tv162-.Boolean (Enum32)                 #28
   t163.i32          = NOT tv162"$$data"(Boolean (Enum32)+0).i32            #28
                       CONDITIONALBRANCH(True) t163.i32, $L16, $L17         #28
$L16: (references=1)                                                        #28
   tv164-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #28
                       GOTO $L18                                            #28
$L17: (references=1)                                                        #28
   tv164-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #28
                       GOTO $L18                                            #28
$L18: (references=2)                                                        #28
                       CONDITIONALBRANCH(True) tv164"$$data"(Boolean (Enum32)+0).i32, $L19, $L20                                                            #28
$L19: (references=1)                                                        #28
   t165.integer (i32) = ADD size.integer (i32).a32, 1.integer (i32)         #29
   size.integer (i32).a32 = ASSIGN t165.integer (i32)                       #29
                       GOTO $L20                                            #29
$L20: (references=2)                                                        #28
                       GOTO $L4                                             #29
$L12: (references=1)                                                        #26
   t166.integer (i32) = SUBTRACT size.integer (i32).a32, 1.integer (i32)    #33
   i.integer (i32).a32 = ASSIGN t166.integer (i32)                          #33
   tv167-.integer (i32) = ASSIGN i.integer (i32).a32                        #33
                       GOTO $L21                                            #33
$L21: (references=2)                                                        #33
   t168.i32          = COMPARE(LT) tv167-.integer (i32), 1.integer (i32)    #33
                       CONDITIONALBRANCH(True) t168.i32, $L22, $L23         #33
$L22: (references=1)                                                        #33
   tv169-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #33
                       GOTO $L24                                            #33
$L23: (references=1)                                                        #33
   tv169-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #33
                       GOTO $L24                                            #33
$L24: (references=2)                                                        #33
                       CONDITIONALBRANCH(True) tv169"$$data"(Boolean (Enum32)+0).i32, $L25, $L26                                                            #33
$L26: (references=1)                                                        #33
   i.integer (i32).a32 = ASSIGN tv167-.integer (i32)                        #33
   j.integer (i32).a32 = ASSIGN 1.integer (i32)                             #34
   tv170-.integer (i32) = ASSIGN j.integer (i32).a32                        #34
                       GOTO $L27                                            #34
$L27: (references=2)                                                        #34
   t171.i32          = COMPARE(GT) tv170-.integer (i32), i.integer (i32).a32 #34
                       CONDITIONALBRANCH(True) t171.i32, $L28, $L29         #34
$L28: (references=1)                                                        #34
   tv172-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #34
                       GOTO $L30                                            #34
$L29: (references=1)                                                        #34
   tv172-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #34
                       GOTO $L30                                            #34
$L30: (references=2)                                                        #34
                       CONDITIONALBRANCH(True) tv172"$$data"(Boolean (Enum32)+0).i32, $L31, $L32                                                            #34
$L32: (references=1)                                                        #34
   j.integer (i32).a32 = ASSIGN tv170-.integer (i32)                        #34
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 50(0x00000032).i32, j.integer (i32).a32, 0.i32, 35(0x00000023).i32                                                                #35
   t173.i32          = SUBTRACT j.integer (i32).a32, 1.i32                  #35
   t174.i32          = MULTIPLY 1.i32, t173.i32                             #35
   t175.i32          = ADD t174.i32, 0.i32                                  #35
   tv176-.i32        = MULTIPLY 4.i32, t175.i32                             #35
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 196(0x000000c4).i32, tv176-.i32, 0.i32, 35(0x00000023).i32                                                                        #35
   tv177-.integer (i32) = ADD j.integer (i32).a32, 1.integer (i32)          #35
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 50(0x00000032).i32, tv177-.integer (i32), 0.i32, 35(0x00000023).i32                                                               #35
   t178.i32          = SUBTRACT tv177-.integer (i32), 1.i32                 #35
   t179.i32          = MULTIPLY 1.i32, t178.i32                             #35
   t180.i32          = ADD t179.i32, 0.i32                                  #35
   tv181-.i32        = MULTIPLY 4.i32, t180.i32                             #35
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 196(0x000000c4).i32, tv181-.i32, 0.i32, 35(0x00000023).i32                                                                        #35
   t182.i32          = COMPARE(GT) [&arr.up32->IntArrType (UnmgdArr[integer (i32)]1600)+tv176-.i32].integer (i32).a32, [&arr.up32->IntArrType (UnmgdArr[integer (i32)]1600)+tv181-.i32].integer (i32).a32                                   #35
                       CONDITIONALBRANCH(True) t182.i32, $L33, $L34         #35
$L33: (references=1)                                                        #35
   tv183-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #35
                       GOTO $L35                                            #35
$L34: (references=1)                                                        #35
   tv183-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #35
                       GOTO $L35                                            #35
$L35: (references=2)                                                        #35
                       CONDITIONALBRANCH(True) tv183"$$data"(Boolean (Enum32)+0).i32, $L36, $L37                                                            #35
$L36: (references=1)                                                        #35
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 50(0x00000032).i32, j.integer (i32).a32, 0.i32, 36(0x00000024).i32                                                                #36
   t184.i32          = SUBTRACT j.integer (i32).a32, 1.i32                  #36
   t185.i32          = MULTIPLY 1.i32, t184.i32                             #36
   t186.i32          = ADD t185.i32, 0.i32                                  #36
   tv187-.i32        = MULTIPLY 4.i32, t186.i32                             #36
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 196(0x000000c4).i32, tv187-.i32, 0.i32, 36(0x00000024).i32                                                                        #36
   tmp.integer (i32).a32 = ASSIGN [&arr.up32->IntArrType (UnmgdArr[integer (i32)]1600)+tv187-.i32].integer (i32).a32                                        #36
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 50(0x00000032).i32, j.integer (i32).a32, 0.i32, 37(0x00000025).i32                                                                #37
   t188.i32          = SUBTRACT j.integer (i32).a32, 1.i32                  #37
   t189.i32          = MULTIPLY 1.i32, t188.i32                             #37
   t190.i32          = ADD t189.i32, 0.i32                                  #37
   tv191-.i32        = MULTIPLY 4.i32, t190.i32                             #37
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 196(0x000000c4).i32, tv191-.i32, 0.i32, 37(0x00000025).i32                                                                        #37
   tv192-.integer (i32) = ADD j.integer (i32).a32, 1.integer (i32)          #37
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 50(0x00000032).i32, tv192-.integer (i32), 0.i32, 37(0x00000025).i32                                                               #37
   t193.i32          = SUBTRACT tv192-.integer (i32), 1.i32                 #37
   t194.i32          = MULTIPLY 1.i32, t193.i32                             #37
   t195.i32          = ADD t194.i32, 0.i32                                  #37
   tv196-.i32        = MULTIPLY 4.i32, t195.i32                             #37
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 196(0x000000c4).i32, tv196-.i32, 0.i32, 37(0x00000025).i32                                                                        #37
   [&arr.up32->IntArrType (UnmgdArr[integer (i32)]1600)+tv191-.i32].integer (i32).a32 = ASSIGN [&arr.up32->IntArrType (UnmgdArr[integer (i32)]1600)+tv196-.i32].integer (i32).a32                                                           #37
   tv197-.integer (i32) = ADD j.integer (i32).a32, 1.integer (i32)          #38
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 50(0x00000032).i32, tv197-.integer (i32), 0.i32, 38(0x00000026).i32                                                               #38
   t198.i32          = SUBTRACT tv197-.integer (i32), 1.i32                 #38
   t199.i32          = MULTIPLY 1.i32, t198.i32                             #38
   t200.i32          = ADD t199.i32, 0.i32                                  #38
   tv201-.i32        = MULTIPLY 4.i32, t200.i32                             #38
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 196(0x000000c4).i32, tv201-.i32, 0.i32, 38(0x00000026).i32                                                                        #38
   [&arr.up32->IntArrType (UnmgdArr[integer (i32)]1600)+tv201-.i32].integer (i32).a32 = ASSIGN tmp.integer (i32).a32                                        #38
                       GOTO $L37                                            #39
$L37: (references=2)                                                        #35
   t202.integer (i32) = ADD j.integer (i32).a32, 1.integer (i32)            #39
   tv170-.integer (i32) = ASSIGN t202.integer (i32)                         #39
                       GOTO $L27                                            #39
$L31: (references=1)                                                        #34
   t203.integer (i32) = SUBTRACT i.integer (i32).a32, 1.integer (i32)       #39
   tv167-.integer (i32) = ASSIGN t203.integer (i32)                         #39
                       GOTO $L21                                            #39
$L25: (references=1)                                                        #33
   i.integer (i32).a32 = ASSIGN 1.integer (i32)                             #42
   tv204-.integer (i32) = ASSIGN i.integer (i32).a32                        #42
                       GOTO $L38                                            #42
$L38: (references=2)                                                        #42
   t205.i32          = COMPARE(GT) tv204-.integer (i32), size.integer (i32).a32 #42
                       CONDITIONALBRANCH(True) t205.i32, $L39, $L40         #42
$L39: (references=1)                                                        #42
   tv206-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #42
                       GOTO $L41                                            #42
$L40: (references=1)                                                        #42
   tv206-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #42
                       GOTO $L41                                            #42
$L41: (references=2)                                                        #42
                       CONDITIONALBRANCH(True) tv206"$$data"(Boolean (Enum32)+0).i32, $L42, $L43                                                            #42
$L43: (references=1)                                                        #42
   i.integer (i32).a32 = ASSIGN tv204-.integer (i32)                        #42
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 50(0x00000032).i32, i.integer (i32).a32, 0.i32, 43(0x0000002b).i32                                                                #43
   t207.i32          = SUBTRACT i.integer (i32).a32, 1.i32                  #43
   t208.i32          = MULTIPLY 1.i32, t207.i32                             #43
   t209.i32          = ADD t208.i32, 0.i32                                  #43
   tv210-.i32        = MULTIPLY 4.i32, t209.i32                             #43
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 196(0x000000c4).i32, tv210-.i32, 0.i32, 43(0x0000002b).i32                                                                        #43
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN [&arr.up32->IntArrType (UnmgdArr[integer (i32)]1600)+tv210-.i32].integer (i32).a32 #43
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 43(0x0000002b).i32                                                    #43
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #43
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 43(0x0000002b).i32                                                                #43
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #43
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 43(0x0000002b).i32                                                                #43
   t212.integer (i32) = ADD i.integer (i32).a32, 1.integer (i32)            #43
   tv204-.integer (i32) = ASSIGN t212.integer (i32)                         #43
                       GOTO $L38                                            #43
$L42: (references=1)                                                        #42
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #43
                       RETURN $L44(T)                                       #44
$L44: (references=1)                                                        #44
                       EXITFUNCTION                                         #44
$L2: (references=0)                                                         #44
                       END                                                  #44
Writing Sort.obj...

Sort.p - 0 error(s), 0 warning(s).

Linking...

Sort.exe - 0 error(s), 0 warning(s).

-9
-8
0
1
4
12
13
44
66
67
92

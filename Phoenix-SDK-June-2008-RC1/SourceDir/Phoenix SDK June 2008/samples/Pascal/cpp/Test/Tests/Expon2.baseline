Compiling...
Expon2.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 27(0x0000001b).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 27(0x0000001b).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Expon2.CDecl.Function()->(void)                 #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #4
                       START Expon2(T)                                       #4
Expon2: (references=1)                                                       #4
                       ENTERFUNCTION                                         #4
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 2.i32, &pi.up32->real (f64), &spi.up32->real (f64)                                                     #26
   pi.real (f64).a64 = ASSIGN 3.14159.real (f64)                            #21
   output($stdfile (Aggregate2080)+32).real (f64).a64 = ASSIGN 2.real (f64) #22
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).real (f64).a64, 0.i32, 22(0x00000016).i32                                                           #22
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 9.char (i8)    #22
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 22(0x00000016).i32                                                                #22
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = ASSIGN 7.integer (i32)                                                                           #22
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).integer (i32).a32, 0.i32, 22(0x00000016).i32                                                           #22
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 9.char (i8)    #22
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 22(0x00000016).i32                                                                #22
   output($stdfile (Aggregate2080)+32).real (f64).a64 = CALL &power.CDecl.Function(real (f64),integer (i32))->(real (f64)), 2.real (f64), 7.integer (i32)   #22
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 22(0x00000016).i32                                                    #22
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #22
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 22(0x00000016).i32                                                                #22
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #22
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 22(0x00000016).i32                                                                #22
   t141.real (f64)   = CALL &power.CDecl.Function(real (f64),integer (i32))->(real (f64)), pi.real (f64).a64, 2.integer (i32)                               #23
   spi.real (f64).a64 = ASSIGN t141.real (f64)                              #23
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN pi.real (f64).a64                                                                     #24
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 24(0x00000018).i32                                                    #24
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 9.char (i8) #24
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 24(0x00000018).i32                                                         #24
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN 2.integer (i32)                                                                    #24
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 24(0x00000018).i32                                                    #24
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 9.char (i8) #24
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 24(0x00000018).i32                                                         #24
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN spi.real (f64).a64                                                                    #24
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 24(0x00000018).i32                                                    #24
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #24
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 24(0x00000018).i32                                                                #24
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #24
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 24(0x00000018).i32                                                                #24
   t142.real (f64)   = CALL &power.CDecl.Function(real (f64),integer (i32))->(real (f64)), spi.real (f64).a64, 2.integer (i32)                              #25
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN spi.real (f64).a64                                                                    #25
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 25(0x00000019).i32                                                    #25
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 9.char (i8) #25
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 25(0x00000019).i32                                                         #25
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN 2.integer (i32)                                                                    #25
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 25(0x00000019).i32                                                    #25
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 9.char (i8) #25
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 25(0x00000019).i32                                                         #25
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN t142.real (f64)                                                                       #25
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 25(0x00000019).i32                                                    #25
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #25
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 25(0x00000019).i32                                                                #25
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #25
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 25(0x00000019).i32                                                                #25
   t143.real (f64)   = CALL &power.CDecl.Function(real (f64),integer (i32))->(real (f64)), pi.real (f64).a64, 4.integer (i32)                               #26
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN pi.real (f64).a64                                                                     #26
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 26(0x0000001a).i32                                                    #26
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 9.char (i8) #26
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 26(0x0000001a).i32                                                         #26
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN 4.integer (i32)                                                                    #26
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 26(0x0000001a).i32                                                    #26
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 9.char (i8) #26
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 26(0x0000001a).i32                                                         #26
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN t143.real (f64)                                                                       #26
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 26(0x0000001a).i32                                                    #26
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #26
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 26(0x0000001a).i32                                                                #26
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #26
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 26(0x0000001a).i32                                                                #26
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #26
                       RETURN $L4(T)                                        #27
$L4: (references=1)                                                         #27
                       EXITFUNCTION                                         #27
$L2: (references=0)                                                         #27
                       END                                                  #27

IR after Type Checker (control chktype)

Function Unit #3
$L1: (references=0)                                                          #8
                       START power(T)                                        #8
power: (references=1)                                                        #8
   x.real (f64).a64, y.integer (i32).a32 = ENTERFUNCTION                     #8
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 3.i32, 4.i32, &x.up32->real (f64), &y.up32->integer (i32), &power.up32->real (f64), &z.up32->real (f64)       #19
   z.real (f64).a64  = ASSIGN 1.real (f64)                                  #10
                       GOTO $L4                                             #11
$L4: (references=2)                                                         #11
   t141.i32          = COMPARE(LT) 0.integer (i32), y.integer (i32).a32     #11
                       CONDITIONALBRANCH(True) t141.i32, $L5, $L6           #11
$L5: (references=1)                                                         #11
   tv144-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #11
                       GOTO $L7                                             #11
$L6: (references=1)                                                         #11
   tv144-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #11
                       GOTO $L7                                             #11
$L7: (references=2)                                                         #11
                       CONDITIONALBRANCH(True) tv144"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #11
$L8: (references=1)                                                         #11
                       GOTO $L10                                            #13
$L10: (references=2)                                                        #13
   t145.i32          = CALL &_odd.CDecl.Function(i32)->(i32), y.integer (i32).a32                                                                           #13
                       CONDITIONALBRANCH(True) t145.i32, $L11, $L12         #13
$L11: (references=1)                                                        #13
   tv146-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #13
                       GOTO $L13                                            #13
$L12: (references=1)                                                        #13
   tv146-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #13
                       GOTO $L13                                            #13
$L13: (references=2)                                                        #13
   tv146-.Boolean (Enum32) = ASSIGN tv146-.Boolean (Enum32)                 #13
   t154.i32          = COMPARE(EQ) 0.i32, tv146"$$data"(Boolean (Enum32)+0).i32 #19
   t147.i32          = QUESTION t154.i32, 1.i32, 0.i32                      #13
                       CONDITIONALBRANCH(True) t147.i32, $L14, $L15         #13
$L14: (references=1)                                                        #13
   tv148-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #13
                       GOTO $L16                                            #13
$L15: (references=1)                                                        #13
   tv148-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #13
                       GOTO $L16                                            #13
$L16: (references=2)                                                        #13
                       CONDITIONALBRANCH(True) tv148"$$data"(Boolean (Enum32)+0).i32, $L17, $L18                                                            #13
$L17: (references=1)                                                        #13
   y.integer (i32).a32 = DIVIDE y.integer (i32).a32, 2.integer (i32)        #14
   t150.f64          = CALL &_sqrf.CDecl.Function(f64)->(f64), x.real (f64).a64 #14
   x.real (f64).a64  = ASSIGN t150.f64                                      #14
                       GOTO $L10                                            #14
$L18: (references=1)                                                        #13
   t151.integer (i32) = SUBTRACT y.integer (i32).a32, 1.integer (i32)       #16
   y.integer (i32).a32 = ASSIGN t151.integer (i32)                          #16
   t152.real (f64)   = MULTIPLY x.real (f64).a64, z.real (f64).a64          #17
   z.real (f64).a64  = ASSIGN t152.real (f64)                               #17
                       GOTO $L4                                             #17
$L9: (references=1)                                                         #11
   power.real (f64).a64 = ASSIGN z.real (f64).a64                           #19
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 3.i32                                                                   #19
                       RETURN power.real (f64).a64, $L19(T)                 #19
$L19: (references=1)                                                        #19
                       EXITFUNCTION                                         #19
$L2: (references=0)                                                         #19
                       END                                                  #19
Writing Expon2.obj...

Expon2.p - 0 error(s), 0 warning(s).

Linking...

Expon2.exe - 0 error(s), 0 warning(s).

2.000000	7	128.000000
3.141590	2	9.869588
9.869588	2	97.408762
3.141590	4	97.408762

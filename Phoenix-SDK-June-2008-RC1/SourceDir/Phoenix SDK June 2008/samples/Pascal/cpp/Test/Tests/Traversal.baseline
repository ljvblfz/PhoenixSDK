Compiling...
Traversal.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 61(0x0000003d).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 61(0x0000003d).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Traversal.CDecl.Function()->(void)              #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #4
                       START Traversal(T)                                    #4
Traversal: (references=1)                                                    #4
                       ENTERFUNCTION                                         #4
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 2.i32, 3.i32, &root.up32->ptr (up32->node (Aggregate72)), &ch.up32->char (i8), &traversal.up32->text (Aggregate40)                                                                            #60
   traversal"$runtime_handle"(text (Aggregate40)+0).HANDLE (up32->void).a32 = CALL &_file_open.CDecl.Function(up32->i8,i32,i32,i32)->(HANDLE (up32->void)), &$SG105.up32->char (i8), 0.i32, 0.i32, 10(0x0000000a).i32                       #10
   t145.i8           = CALL &_file_get_char.CDecl.Function(HANDLE (up32->void),i32,i32)->(i8), traversal"$runtime_handle"(text (Aggregate40)+0).HANDLE (up32->void).a32, 0.i32, 10(0x0000000a).i32                                          #10
   [&traversal.up32->text (Aggregate40)+4].char (i8).a8 = ASSIGN t145.i8    #10
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                      #56
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 56(0x00000038).i32                                                         #56
                       CALL &enter.CDecl.Function(up32->ptr (up32->node (Aggregate72)))->(void), &root.up32->ptr (up32->node (Aggregate72))                 #56
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #56
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 56(0x00000038).i32                                                         #56
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #56
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 56(0x00000038).i32                                                         #56
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                      #57
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 57(0x00000039).i32                                                         #57
                       CALL &preorder.CDecl.Function(ptr (up32->node (Aggregate72)))->(void), root.ptr (up32->node (Aggregate72)).a32                       #57
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #57
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 57(0x00000039).i32                                                         #57
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #57
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 57(0x00000039).i32                                                         #57
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                      #58
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 58(0x0000003a).i32                                                         #58
                       CALL &inorder.CDecl.Function(ptr (up32->node (Aggregate72)))->(void), root.ptr (up32->node (Aggregate72)).a32                        #58
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #58
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 58(0x0000003a).i32                                                         #58
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #58
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 58(0x0000003a).i32                                                         #58
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                      #59
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 59(0x0000003b).i32                                                         #59
                       CALL &postorder.CDecl.Function(ptr (up32->node (Aggregate72)))->(void), root.ptr (up32->node (Aggregate72)).a32                      #59
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #59
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 59(0x0000003b).i32                                                         #59
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #59
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 59(0x0000003b).i32                                                         #59
                       CALL &exit.CDecl.Function(ptr (up32->node (Aggregate72)))->(void), root.ptr (up32->node (Aggregate72)).a32                           #60
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #60
                       RETURN $L4(T)                                        #61
$L4: (references=1)                                                         #61
                       EXITFUNCTION                                         #61
$L2: (references=0)                                                         #61
                       END                                                  #61

IR after Type Checker (control chktype)

Function Unit #7
$L1: (references=0)                                                         #47
                       START exit(T)                                        #47
exit: (references=1)                                                        #47
   p.ptr (up32->node (Aggregate72)).a32 = ENTERFUNCTION                     #47
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 7.i32, 1.i32, &p.up32->ptr (up32->node (Aggregate72))                                                         #51
   t138.i32          = COMPARE(NE) 0(0x00000000).null (null32->unk), p.ptr (up32->node (Aggregate72)).a32                                                   #48
                       CONDITIONALBRANCH(True) t138.i32, $L4, $L5           #48
$L4: (references=1)                                                         #48
   tv141-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #48
                       GOTO $L6                                             #48
$L5: (references=1)                                                         #48
   tv141-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #48
                       GOTO $L6                                             #48
$L6: (references=2)                                                         #48
                       CONDITIONALBRANCH(True) tv141"$$data"(Boolean (Enum32)+0).i32, $L7, $L8                                                              #48
$L7: (references=1)                                                         #48
                       CALL &exit.CDecl.Function(ptr (up32->node (Aggregate72)))->(void), [p.ptr (up32->node (Aggregate72)).a32+1].ptr (up32->node (Aggregate72)).a32                                                                       #49
                       CALL &exit.CDecl.Function(ptr (up32->node (Aggregate72)))->(void), [p.ptr (up32->node (Aggregate72)).a32+5].ptr (up32->node (Aggregate72)).a32                                                                       #50
   t142.up32->void   = CONVERT p.ptr (up32->node (Aggregate72)).a32         #51
                       CALL &_dispose.CDecl.Function(up32->void,i32,i32)->(void), t142.up32->void, 0.i32, 51(0x00000033).i32                                #51
                       GOTO $L8                                             #51
$L8: (references=2)                                                         #48
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 7.i32                                                                   #51
                       RETURN $L9(T)                                        #53
$L9: (references=1)                                                         #53
                       EXITFUNCTION                                         #53
$L2: (references=0)                                                         #53
                       END                                                  #53

IR after Type Checker (control chktype)

Function Unit #6
$L1: (references=0)                                                         #36
                       START enter(T)                                       #36
enter: (references=1)                                                       #36
   p.up32->ptr (up32->node (Aggregate72)).a32 = ENTERFUNCTION               #36
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 6.i32, 1.i32, &p.up32->up32->ptr (up32->node (Aggregate72))                                                   #44
   tv138-.up32->void = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 2.i32                                            #37
   t139.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 1.i32                                            #37
   [t139.up32->void].char (i8).a8 = ASSIGN [tv138-.up32->void]"$current_value"(text (Aggregate40)+32).char (i8).a8                                          #37
   [tv138-.up32->void+4].i8.a8 = CALL &_file_get_char.CDecl.Function(HANDLE (up32->void),i32,i32)->(i8), [tv138-.up32->void]"$runtime_handle"(text (Aggregate40)+0).HANDLE (up32->void).a32, 0.i32, 37(0x00000025).i32                      #37
   t141.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 1.i32                                            #37
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN [t141.up32->void].char (i8).a8                                                          #37
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 37(0x00000025).i32                                                         #37
   t143.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 1.i32                                            #38
   t144.i32          = COMPARE(NE) [t143.up32->void].char (i8).a8, 46(0x2e).char (i8)                                                                       #38
                       CONDITIONALBRANCH(True) t144.i32, $L4, $L5           #38
$L4: (references=1)                                                         #38
   tv147-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #38
                       GOTO $L6                                             #38
$L5: (references=1)                                                         #38
   tv147-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #38
                       GOTO $L6                                             #38
$L6: (references=2)                                                         #38
                       CONDITIONALBRANCH(True) tv147"$$data"(Boolean (Enum32)+0).i32, $L7, $L8                                                              #38
$L7: (references=1)                                                         #38
   t148.up32->void   = CALL &__new.CDecl.Function(i32,i32,i32)->(up32->void), 9.i32, 0.i32, 39(0x00000027).i32                                              #39
   t149.ptr (up32->node (Aggregate72)) = CONVERT t148.up32->void            #39
   [p.up32->ptr (up32->node (Aggregate72)).a32].ptr (up32->node (Aggregate72)).a32 = ASSIGN t149.ptr (up32->node (Aggregate72))                             #39
   t150.up32->node (Aggregate72) = ASSIGN [p.up32->ptr (up32->node (Aggregate72)).a32].ptr (up32->node (Aggregate72)).a32                                   #40
   t151.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 1.i32                                            #40
   [t150.up32->node (Aggregate72)].char (i8).a8 = ASSIGN [t151.up32->void].char (i8).a8                                                                     #40
   t152.up32->node (Aggregate72) = ASSIGN [p.up32->ptr (up32->node (Aggregate72)).a32].ptr (up32->node (Aggregate72)).a32                                   #41
                       CALL &enter.CDecl.Function(up32->ptr (up32->node (Aggregate72)))->(void), &[t152.up32->node (Aggregate72)+1].up32->ptr (up32->node (Aggregate72))                                                                    #41
   t153.up32->node (Aggregate72) = ASSIGN [p.up32->ptr (up32->node (Aggregate72)).a32].ptr (up32->node (Aggregate72)).a32                                   #42
                       CALL &enter.CDecl.Function(up32->ptr (up32->node (Aggregate72)))->(void), &[t153.up32->node (Aggregate72)+5].up32->ptr (up32->node (Aggregate72))                                                                    #42
                       GOTO $L9                                             #43
$L8: (references=1)                                                         #38
   [p.up32->ptr (up32->node (Aggregate72)).a32].ptr (up32->node (Aggregate72)).a32 = ASSIGN 0(0x00000000).null (null32->unk)                                #44
                       GOTO $L9                                             #44
$L9: (references=2)                                                         #38
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 6.i32                                                                   #44
                       RETURN $L10(T)                                       #45
$L10: (references=1)                                                        #45
                       EXITFUNCTION                                         #45
$L2: (references=0)                                                         #45
                       END                                                  #45

IR after Type Checker (control chktype)

Function Unit #5
$L1: (references=0)                                                         #28
                       START postorder(T)                                   #28
postorder: (references=1)                                                   #28
   p.ptr (up32->node (Aggregate72)).a32 = ENTERFUNCTION                     #28
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 5.i32, 1.i32, &p.up32->ptr (up32->node (Aggregate72))                                                         #32
   t138.i32          = COMPARE(NE) 0(0x00000000).null (null32->unk), p.ptr (up32->node (Aggregate72)).a32                                                   #29
                       CONDITIONALBRANCH(True) t138.i32, $L4, $L5           #29
$L4: (references=1)                                                         #29
   tv141-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #29
                       GOTO $L6                                             #29
$L5: (references=1)                                                         #29
   tv141-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #29
                       GOTO $L6                                             #29
$L6: (references=2)                                                         #29
                       CONDITIONALBRANCH(True) tv141"$$data"(Boolean (Enum32)+0).i32, $L7, $L8                                                              #29
$L7: (references=1)                                                         #29
                       CALL &postorder.CDecl.Function(ptr (up32->node (Aggregate72)))->(void), [p.ptr (up32->node (Aggregate72)).a32+1].ptr (up32->node (Aggregate72)).a32                                                                  #30
                       CALL &postorder.CDecl.Function(ptr (up32->node (Aggregate72)))->(void), [p.ptr (up32->node (Aggregate72)).a32+5].ptr (up32->node (Aggregate72)).a32                                                                  #31
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN [p.ptr (up32->node (Aggregate72)).a32].char (i8).a8                                            #32
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 32(0x00000020).i32                                                                #32
                       GOTO $L8                                             #32
$L8: (references=2)                                                         #29
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 5.i32                                                                   #32
                       RETURN $L9(T)                                        #34
$L9: (references=1)                                                         #34
                       EXITFUNCTION                                         #34
$L2: (references=0)                                                         #34
                       END                                                  #34

IR after Type Checker (control chktype)

Function Unit #4
$L1: (references=0)                                                         #20
                       START inorder(T)                                     #20
inorder: (references=1)                                                     #20
   p.ptr (up32->node (Aggregate72)).a32 = ENTERFUNCTION                     #20
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 4.i32, 1.i32, &p.up32->ptr (up32->node (Aggregate72))                                                         #24
   t138.i32          = COMPARE(NE) 0(0x00000000).null (null32->unk), p.ptr (up32->node (Aggregate72)).a32                                                   #21
                       CONDITIONALBRANCH(True) t138.i32, $L4, $L5           #21
$L4: (references=1)                                                         #21
   tv141-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #21
                       GOTO $L6                                             #21
$L5: (references=1)                                                         #21
   tv141-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #21
                       GOTO $L6                                             #21
$L6: (references=2)                                                         #21
                       CONDITIONALBRANCH(True) tv141"$$data"(Boolean (Enum32)+0).i32, $L7, $L8                                                              #21
$L7: (references=1)                                                         #21
                       CALL &inorder.CDecl.Function(ptr (up32->node (Aggregate72)))->(void), [p.ptr (up32->node (Aggregate72)).a32+1].ptr (up32->node (Aggregate72)).a32                                                                    #22
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN [p.ptr (up32->node (Aggregate72)).a32].char (i8).a8                                            #23
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 23(0x00000017).i32                                                                #23
                       CALL &inorder.CDecl.Function(ptr (up32->node (Aggregate72)))->(void), [p.ptr (up32->node (Aggregate72)).a32+5].ptr (up32->node (Aggregate72)).a32                                                                    #24
                       GOTO $L8                                             #24
$L8: (references=2)                                                         #21
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 4.i32                                                                   #24
                       RETURN $L9(T)                                        #26
$L9: (references=1)                                                         #26
                       EXITFUNCTION                                         #26
$L2: (references=0)                                                         #26
                       END                                                  #26

IR after Type Checker (control chktype)

Function Unit #3
$L1: (references=0)                                                         #12
                       START preorder(T)                                    #12
preorder: (references=1)                                                    #12
   p.ptr (up32->node (Aggregate72)).a32 = ENTERFUNCTION                     #12
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 3.i32, 1.i32, &p.up32->ptr (up32->node (Aggregate72))                                                         #16
   t138.i32          = COMPARE(NE) 0(0x00000000).null (null32->unk), p.ptr (up32->node (Aggregate72)).a32                                                   #13
                       CONDITIONALBRANCH(True) t138.i32, $L4, $L5           #13
$L4: (references=1)                                                         #13
   tv141-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #13
                       GOTO $L6                                             #13
$L5: (references=1)                                                         #13
   tv141-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #13
                       GOTO $L6                                             #13
$L6: (references=2)                                                         #13
                       CONDITIONALBRANCH(True) tv141"$$data"(Boolean (Enum32)+0).i32, $L7, $L8                                                              #13
$L7: (references=1)                                                         #13
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN [p.ptr (up32->node (Aggregate72)).a32].char (i8).a8                                            #14
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 14(0x0000000e).i32                                                                #14
                       CALL &preorder.CDecl.Function(ptr (up32->node (Aggregate72)))->(void), [p.ptr (up32->node (Aggregate72)).a32+1].ptr (up32->node (Aggregate72)).a32                                                                   #15
                       CALL &preorder.CDecl.Function(ptr (up32->node (Aggregate72)))->(void), [p.ptr (up32->node (Aggregate72)).a32+5].ptr (up32->node (Aggregate72)).a32                                                                   #16
                       GOTO $L8                                             #16
$L8: (references=2)                                                         #13
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 3.i32                                                                   #16
                       RETURN $L9(T)                                        #18
$L9: (references=1)                                                         #18
                       EXITFUNCTION                                         #18
$L2: (references=0)                                                         #18
                       END                                                  #18
Writing Traversal.obj...

Traversal.p - 0 error(s), 0 warning(s).

Linking...

Traversal.exe - 0 error(s), 0 warning(s).

 abc..de..fg...hi..jkl..m..n..
 abcdefghijklmn
 cbedgfaihlkmjn
 cegfdbilmknjha

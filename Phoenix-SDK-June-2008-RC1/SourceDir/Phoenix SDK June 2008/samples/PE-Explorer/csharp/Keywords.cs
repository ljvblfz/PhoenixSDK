using System;
using System.Collections.Generic;
using System.Text;

namespace PEExplorer
{
   /// <summary>
   /// Helper class for identifying IL keywords.
   /// </summary>
   static class Keywords
   {
      #region IL Keywords
      
      // These are the ILAsm keywords, excluding '.ctor' and '.cctor',
      // which are both keywords and valid names.
      
      private static readonly string[] ilKeywords = {
         "void",
         "bool",
         "char",
         "wchar",
         "int",
         "int8",
         "int16",
         "int32",
         "int64",
         "uint",
         "uint8",
         "uint16",
         "uint32",
         "uint64",
         "float",
         "float32",
         "float64",
         "refany",
         "typedref",
         "object",
         "string",
         "native",
         "unsigned",
         "value",
         "valuetype",
         "namespace",
         "class",
         "const",
         "vararg",
         "unmanaged",
         "not_in_gc_heap",
         "beforefieldinit",
         "instance",
         "filter",
         "catch",
         "static",
         "public",
         "private",
         "synchronized",
         "interface",
         "extends",
         "implements",
         "handler",
         "finally",
         "fault",
         "to",
         "abstract",
         "auto",
         "sequential",
         "explicit",
         "wrapper",
         "ansi",
         "unicode",
         "autochar",
         "import",
         "enum",
         "virtual",
         "notremotable",
         "special",
         "il",
         "cil",
         "optil",
         "managed",
         "preservesig",
         "runtime",
         "method",
         "field",
         "bytearray",
         "final",
         "sealed",
         "specialname",
         "family",
         "assembly",
         "famandassem",
         "famorassem",
         "privatescope",
         "nested",
         "hidebysig",
         "newslot",
         "rtspecialname",
         "pinvokeimpl",
         "unmanagedexp",
         "reqsecobj",
         //".ctor",
         //".cctor",
         "initonly",
         "literal",
         "notserialized",
         "forwardref",
         "internalcall",
         "noinlining",
         "nomangle",
         "lasterr",
         "winapi",
         "cdecl",
         "stdcall",
         "thiscall",
         "fastcall",
         "as",
         "pinned",
         "modreq",
         "modopt",
         "serializable",
         "at",
         "tls",
         "true",
         "false",
         ".class",
         ".namespace",
         ".method",
         ".field",
         ".emitbyte",
         ".try",
         ".maxstack",
         ".stackreserve",
         ".locals",
         ".entrypoint",
         ".zeroinit",
         ".pdirect",
         ".data",
         ".event",
         ".addon",
         ".removeon",
         ".fire",
         ".other",
         "protected",
         ".property",
         ".set",
         ".get",
         "default",
         ".import",
         ".permission",
         ".permissionset",
         "request",
         "demand",
         "assert",
         "deny",
         "permitonly",
         "linkcheck",
         "inheritcheck",
         "reqmin",
         "reqopt",
         "reqrefuse",
         "prejitgrant",
         "prejitdeny",
         "noncasdemand",
         "noncaslinkdemand",
         "noncasinheritance",
         ".line",
         ".language",
         "#line",
         ".custom",
         "init",
         ".size",
         ".pack",
         ".file",
         "nometadata",
         ".hash",
         ".assembly",
         "implicitcom",
         "noappdomain",
         "noprocess",
         "nomachine",
         ".publickey",
         ".publickeytoken",
         "algorithm",
         ".ver",
         ".locale",
         "extern",
         ".export",
         ".manifestres",
         ".mresource",
         ".localized",
         ".module",
         "marshal",
         "custom",
         "sysstring",
         "fixed",
         "variant",
         "currency",
         "syschar",
         "decimal",
         "date",
         "bstr",
         "tbstr",
         "lpstr",
         "lpwstr",
         "lptstr",
         "objectref",
         "iunknown",
         "idispatch",
         "struct",
         "safearray",
         "byvalstr",
         "lpvoid",
         "any",
         "array",
         "lpstruct",
         ".vtfixup",
         "fromunmanaged",
         "callmostderived",
         ".vtentry",
         "in",
         "out",
         "opt",
         "lcid",
         "retval",
         ".param",
         ".override",
         "with",
         "null",
         "error",
         "hresult",
         "carray",
         "userdefined",
         "record",
         "filetime",
         "blob",
         "stream",
         "storage",
         "streamed_object",
         "stored_object",
         "blob_object",
         "cf",
         "clsid",
         "vector",
         "nullref",
         ".subsystem",
         ".corflags",
         "alignment",
         ".imagebase",
         ".vtable",
         "readonly",
         "implicitres",
      };
      #endregion

      #region C# Keywords
      
      private static readonly string[] csKeywords = {
         "abstract",
         "event",
         "new",
         "struct",
         "as",
         "explicit",
         "null",
         "switch",
         "base",
         "extern",
         "object",
         "this",
         "bool",
         "false",
         "operator",
         "throw",
         "break",
         "finally",
         "out",
         "true",
         "byte",
         "fixed",
         "override",
         "try",
         "case",
         "float",
         "params",
         "typeof",
         "catch",
         "for",
         "private",
         "uint",
         "char",
         "foreach",
         "protected",
         "ulong",
         "checked",
         "goto",
         "public",
         "unchecked",
         "class",
         "if",
         "readonly",
         "unsafe",
         "const",
         "implicit",
         "ref",
         "ushort",
         "continue",
         "in",
         "return",
         "using",
         "decimal",
         "int",
         "sbyte",
         "virtual",
         "default",
         "interface",
         "sealed",
         "volatile",
         "delegate",
         "internal",
         "short",
         "void",
         "do",
         "is",
         "sizeof",
         "while",
         "double",
         "lock",
         "stackalloc",
         "else",
         "long",
         "static",
         "enum",
         "namespace",
         "string",
         "get",
         "partial",
         "set",
         "value",
         "where",
         "yield",
      };

      #endregion

      #region C++ Keywords

      private static readonly string[] cppKeywords = {
         "__abstract",
         "abstract",
         "__alignofOperator",
         "array",
         "__asm",
         "__assume",
         "__based",
         "bool",
         "__box",
         "break",
         "case",
         "catch",
         "__cdecl",
         "char",
         "class",
         "const",
         "const_cast",
         "continue",
         "__declspec",
         "default",
         "__delegate",
         "delegate",
         "delete",
         "deprecated",
         "dllexport",
         "dllimport",
         "do",
         "double",
         "dynamic_cast",
         "else",
         "enum",
         "enumclass",
         "enumstruct",
         "event",
         "__event",
         "__except",
         "explicit",
         "extern",
         "false",
         "__fastcall",
         "__finally",
         "finally",
         "float",
         "for",
         "foreach",
         "__forceinline",
         "friend",
         "friend_as",
         "__gc",
         "gcnew",
         "generic",
         "goto",
         "__hook",
         "__identifier",
         "if",
         "__if_exists",
         "__if_not_exists",
         "in",
         "initonly",
         "__inline",
         "inline",
         "int",
         "__int8",
         "__int16",
         "__int32",
         "__int64",
         "__interface",
         "interfaceclass",
         "interfacestruct",
         "interior_ptr",
         "__leave",
         "literal",
         "long",
         "__m64",
         "__m128",
         "__m128d",
         "__m128i",
         "__multiple_inheritance",
         "mutable",
         "naked",
         "namespace",
         "new",
         "new",
         "__nogc",
         "noinline",
         "__noop",
         "noreturn",
         "nothrow",
         "novtable",
         "nullptr",
         "operator",
         "__pin",
         "private",
         "__property",
         "property",
         "property",
         "protected",
         "public",
         "__raise",
         "refstruct",
         "refclass",
         "register",
         "reinterpret_cast",
         "return",
         "safecast",
         "__sealed",
         "sealed",
         "selectany",
         "short",
         "signed",
         "__single_inheritance",
         "sizeof",
         "static",
         "static_cast",
         "__stdcall",
         "struct",
         "__super",
         "switch",
         "template",
         "this",
         "thread",
         "throw",
         "true",
         "try",
         "__try/__except,__try/__finally",
         "__try_cast",
         "typedef",
         "typeid",
         "typename",
         "__unaligned",
         "__unhook",
         "union",
         "unsigned",
         "using",
         "uuid",
         "__uuidof",
         "valuestruct",
         "valueclass",
         "__value",
         "virtual",
         "__virtual_inheritance",
         "void",
         "volatile",
         "__w64",
         "__wchar_t,wchar_t",
         "while",
         "#include",
         "#define",
         "#if",
         "#ifdef",
         "#undef",
      };

      #endregion

      #region J# Keywords

      private static readonly string[] jsKeywords = {
         "final",
         "public",
         "boolean",
         "try-finally",
         "return",
         "break",
         "float",
         "short",
         "byte",
         "for",
         "static",
         "try-catch",
         "if",
         "strictfp",
         "char",
         "implements",
         "super",
         "class",
         "import",
         "switch",
         "const",
         "instanceof",
         "synchronized",
         "continue",
         "int",
         "this",
         "default",
         "interface",
         "throw",
         "delegate",
         "long",
         "throws",
         "do",
         "multicast",
         "transient",
         "double",
         "native",
         "true",
         "enum",
         "new",
         "ubyte",
         "extends",
         "null",
         "void",
         "false",
         "package",
         "volatile",
         "protected",
         "private",
         "while",
      };

      #endregion

      #region Visual Basic Keywords

      private static readonly string[] vbKeywords = {
         "Alias",
         "AddHandler",
         "Ansi",
         "As",
         "Assembly",
         "Auto",
         "Binary",
         "ByRef",
         "ByVal",
         "Case",
         "Catch",
         "Class",
         "Custom",
         "Default",
         "DirectCast",
         "Each",
         "Else",
         "ElseIf",
         "End",
         "Error",
         "False",
         "Finally",
         "For",
         "Friend",
         "Global",
         "Handles",
         "Implements",
         "In",
         "Is",
         "Lib",
         "Loop",
         "Me",
         "Module",
         "MustInherit",
         "MustOverride",
         "MyBase",
         "MyClass",
         "Narrowing",
         "New",
         "Next",
         "Nothing",
         "NotInheritable",
         "NotOverridable",
         "Of",
         "Off",
         "On",
         "Option",
         "Optional",
         "Overloads",
         "Overridable",
         "Overrides",
         "ParamArray",
         "Partial",
         "Preserve",
         "Private",
         "Protected",
         "Public",
         "RaiseEvent",
         "ReadOnly",
         "Resume",
         "Shadows",
         "Shared",
         "Static",
         "Step",
         "Structure",
         "Text",
         "Then",
         "To",
         "True",
         "TryCast",
         "Unicode",
         "Until",
         "When",
         "While",
         "Widening",
         "WithEvents",
         "WriteOnly",
      };

      #endregion

      // Mapping of IL keywords.
      private static Dictionary<string, bool> allKeywords = null;
      
      /// <summary>
      /// Determines whether the provided string is an IL keyword.
      /// </summary>
      public static bool IsKeyword(string name)
      {
         // Build keyword map on first use.
         if (Keywords.allKeywords == null)
         {
            Keywords.BuildKeywordMap();            
         }

         return Keywords.allKeywords.ContainsKey(name);
      }

      /// <summary>
      /// Builds the common language keyword map.
      /// </summary>
      private static void BuildKeywordMap()
      {
         Keywords.allKeywords = new Dictionary<string, bool>();

         // Add unique keywords from across several different languages
         // to the master keyword dictionary.

         string[][] languageKeywordArray = { Keywords.ilKeywords,
            Keywords.csKeywords, Keywords.jsKeywords, Keywords.cppKeywords,
            Keywords.vbKeywords };
         
         foreach (string[] languageKeywords in languageKeywordArray)
         {
            foreach (string languageKeyword in languageKeywords)
            {
               if (!Keywords.allKeywords.ContainsKey(languageKeyword))
               {
                  Keywords.allKeywords.Add(languageKeyword, true);
               }
            }
         }
      }
      
      /// <summary>
      /// Determines whether the given string is a "dual" keyword.
      /// "Dual" keywords are keywords which can also be used as identifiers.
      /// </summary>
      public static bool IsDualKeyword(string name)
      {
         return name.Equals(".ctor") ||
                name.Equals(".cctor");
      }

      /// <summary>
      /// Determines whether the given string should be placed in 
      /// quotation marks.
      /// </summary>
      public static bool IsQuotable(string name)
      {         
         // Check for name mangling.
         if (name.StartsWith("?"))
         {
            return true;
         }

         // Check or IL keyword.
         return Keywords.IsKeyword(name);
      }
   }
}

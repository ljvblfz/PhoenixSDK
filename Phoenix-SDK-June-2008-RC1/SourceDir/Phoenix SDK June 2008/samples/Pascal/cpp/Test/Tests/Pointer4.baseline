Compiling...
Pointer4.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 16(0x00000010).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 16(0x00000010).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Pointer4.CDecl.Function()->(void)               #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #3
                       START Pointer4(T)                                     #3
Pointer4: (references=1)                                                     #3
                       ENTERFUNCTION                                         #3
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 6.i32, &x.up32->$$unnamed100 (up32->t (Aggregate128)), &y.up32->$$unnamed100 (up32->t (Aggregate128)), &z.up32->$$unnamed100 (up32->t (Aggregate128)), &i.up32->$$unnamed101 (up32->integer (i32)), &j.up32->$$unnamed101 (up32->integer (i32)), &k.up32->$$unnamed101 (up32->integer (i32))                                                           #16
   t146.up32->void   = CALL &__new.CDecl.Function(i32,i32,i32)->(up32->void), 16(0x00000010).i32, 0.i32, 10(0x0000000a).i32                                 #10
   x.$$unnamed100 (up32->t (Aggregate128)).a32 = CONVERT t146.up32->void    #10
   t148.up32->void   = CALL &__new.CDecl.Function(i32,i32,i32)->(up32->void), 16(0x00000010).i32, 0.i32, 10(0x0000000a).i32                                 #10
   t149.$$unnamed100 (up32->t (Aggregate128)) = CONVERT t148.up32->void     #10
   y.$$unnamed100 (up32->t (Aggregate128)).a32 = ASSIGN t149.$$unnamed100 (up32->t (Aggregate128))                                                          #10
   t150.up32->void   = CALL &__new.CDecl.Function(i32,i32,i32)->(up32->void), 16(0x00000010).i32, 0.i32, 10(0x0000000a).i32                                 #10
   t151.$$unnamed100 (up32->t (Aggregate128)) = CONVERT t150.up32->void     #10
   z.$$unnamed100 (up32->t (Aggregate128)).a32 = ASSIGN t151.$$unnamed100 (up32->t (Aggregate128))                                                          #10
   t152.up32->void   = CALL &__new.CDecl.Function(i32,i32,i32)->(up32->void), 4.i32, 0.i32, 11(0x0000000b).i32                                              #11
   t153.$$unnamed101 (up32->integer (i32)) = CONVERT t152.up32->void        #11
   i.$$unnamed101 (up32->integer (i32)).a32 = ASSIGN t153.$$unnamed101 (up32->integer (i32))                                                                #11
   t154.up32->void   = CALL &__new.CDecl.Function(i32,i32,i32)->(up32->void), 4.i32, 0.i32, 11(0x0000000b).i32                                              #11
   t155.$$unnamed101 (up32->integer (i32)) = CONVERT t154.up32->void        #11
   j.$$unnamed101 (up32->integer (i32)).a32 = ASSIGN t155.$$unnamed101 (up32->integer (i32))                                                                #11
   t156.up32->void   = CALL &__new.CDecl.Function(i32,i32,i32)->(up32->void), 4.i32, 0.i32, 11(0x0000000b).i32                                              #11
   t157.$$unnamed101 (up32->integer (i32)) = CONVERT t156.up32->void        #11
   k.$$unnamed101 (up32->integer (i32)).a32 = ASSIGN t157.$$unnamed101 (up32->integer (i32))                                                                #11
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #16
                       RETURN $L4(T)                                        #16
$L4: (references=1)                                                         #16
                       EXITFUNCTION                                         #16
$L2: (references=0)                                                         #16
                       END                                                  #16
Writing Pointer4.obj...

Pointer4.p - 0 error(s), 0 warning(s).

Linking...

Pointer4.exe - 0 error(s), 0 warning(s).


(0) : memory leaks detected!
	60 user bytes
	0 runtime bytes
 Exiting...

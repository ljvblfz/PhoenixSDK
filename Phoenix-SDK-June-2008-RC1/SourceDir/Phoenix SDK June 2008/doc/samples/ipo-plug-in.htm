<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Untitled Page</title>
    <style type="text/css">

div.Section1
	{page:Section1;}
 p.MsoNormal
	{margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	        margin-left: 0in;
            margin-right: 0in;
            margin-top: 0in;
        }
a:link
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
    
OL LI
{
    background: none;
    list-style-type: decimal;
    list-style-position: outside;
    margin: 0px;
    padding: 0px;
}

LI
{
   list-style:disc none outside;
    margin: 2px 18px 0;
    padding: 0px 2px 5px 0;
    white-space:normal;
}
        .style1
        {
            font-family: AArial;
        }
        .style2
        {
            text-align: justify;
            font-family: AArial;
        }
        .style3
        {
            text-align: justify;
            color: #1f497d;
            font-family: "Courier New";
            font-size: 10pt;
        }
        .style4
        {
            font-family: Arial;
            font-style: italic;
            font-size: 10pt;
        }
        .style5
        {
            font-family: Arial;
            font-size: 10pt;
        }
        .style6
        {
            font-family: Arial;
        }
        .style7
        {
            font-family: Arial;
            font-style: italic;
        }
        .style8
        {
            font-family: Arial;
            font-style: italic;
            font-weight: bold;
            font-size: 10pt;
        }
    </style>
</head>
<body>

    <div class="Section1">
        <p align="center" class="MsoNormal" style="text-align:center">
            <b style="mso-bidi-font-weight:
normal"><span style="font-size:14.0pt;font-family:Arial">IPO-Plugin Sample<o:p></o:p></span></b></p>
        <p class="MsoNormal">
            <b style="mso-bidi-font-weight:normal">
            <span style="font-size:10.0pt;font-family:Arial"><o:p>&nbsp;</o:p></span></b></p>
        <p class="MsoNormal">
            <b style="mso-bidi-font-weight:normal">
            <span style="font-size:10.0pt;font-family:Arial"><o:p>&nbsp;</o:p></span></b></p>
        <p class="MsoNormal">
            <b style="mso-bidi-font-weight:normal">
            <span style="font-size:10.0pt;font-family:Arial">Sample Name</span></b><span 
                style="font-size:10.0pt;font-family:Arial">: ipo-plug-in</span></p>
        <p class="MsoNormal">
            <span style="font-size:10.0pt;font-family:Arial"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal">
            <b style="mso-bidi-font-weight:normal">
            <span style="font-size:10.0pt;font-family:Arial">Sample Category:</span></b><span 
                style="font-size:10.0pt;font-family:Arial"> Multi-pass compilation sample</span></p>
        <p class="MsoNormal">
            <b style="mso-bidi-font-weight:normal">
            <span style="font-size:10.0pt;font-family:Arial"><o:p>&nbsp;</o:p></span></b></p>
        <p class="MsoNormal">
            <b style="mso-bidi-font-weight:normal">
            <span style="font-size:10.0pt;font-family:Arial">Description</span></b><span 
                style="font-size:10.0pt;font-family:Arial">&nbsp;: The ipo-plug-in sample 
            illustrates how to create and execute a new compilation pass using the Phoenix 
            framework.&nbsp; This pass could be used for interprocedural analysis</span></p>
        <p class="MsoNormal">
            <span style="font-size:10.0pt;font-family:Arial"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal">
            <b style="mso-bidi-font-weight:normal">
            <span style="font-size:10.0pt;font-family:Arial">Source Language</span></b><span 
                style="font-size:10.0pt;font-family:Arial">: C++/CLI<o:p></o:p></span></p>
        <p class="MsoNormal">
            <span style="font-size:10.0pt;font-family:Arial"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal">
            <b style="mso-bidi-font-weight:normal">
            <span style="font-size:10.0pt;font-family:Arial">Sample Location</span></b><span 
                style="font-size:10.0pt;font-family:Arial">:
            <a href="../../Samples/ipo-plug-in/cpp">Samples\ipo-plug-in\cpp\</a><o:p></o:p></span></p>
        <p class="MsoNormal">
            <span style="font-size:10.0pt;font-family:Arial"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal">
            <b style="mso-bidi-font-weight:normal">
            <span style="font-size:10.0pt;font-family:Arial">Usage:</span></b><span 
                style="font-size:10.0pt;font-family:Arial">:From the Phoenix command line:<o:p></o:p></span></p>
        <p class="MsoNormal">
            <span style="font-size:10.0pt;font-family:Arial"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal">
            <span style="font-size:10.0pt;font-family:&quot;Courier New&quot;">cl -O2 -GL 
            &lt;input file&gt; /link /ltcg -d2:&quot;-plugin:ipo-plug-in.dll -dumpphaselist&quot;</span></p>
        <p class="MsoNormal" style="margin-left:.5in">
            <span style="font-size:10.0pt;
font-family:&quot;Courier New&quot;"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal">
            <b style="mso-bidi-font-weight:normal">
            <span style="font-size:10.0pt;font-family:Arial">Detailed Description</span></b><span 
                style="font-size:10.0pt;font-family:Arial">:</span></p>
        <p style="TEXT-ALIGN: justify">
            <font class="style1"><span class="style5">Multi-Pass support is a major feature 
            of Phoenix. Unlike a </span><span class="style4">Phase</span><span 
                class="style5"> which is applied to a functionUnit, a </span>
            <span class="style4">Pass</span><span class="style5"> is executed on a 
            ModuleUnit or PEModuleUnit level.&nbsp; The following diagram illustrates the 
            difference between </span><span class="style4">Pass</span><span class="style5"> 
            and </span><span class="style4">Phase</span>.</font></p>
        <p class="style2">
            <img alt="Phoenix C2 Pass Architecture" 
                src="http://connect.microsoft.com/siteimages/9359dec0-ff2b-4d16-bb7b-2e261bc536d5.jpg" /><br />
            <span class="style6"><font size="2">As you can see, Phoenix C2 can be&nbsp;composed 
            of several passes. In each pass, C2 processes every function once in a 
            predefined order. The order of passes can be different. Currently C2 is 
            configured with two passes: one Pass 0 and one code-generation Pass.&nbsp; You 
            can see the detailed pass &amp; phase configuration with option –d2dumpphaselist:
            </font></span>
        </p>
        <p class="style3">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; “cl&nbsp; 
            hello.cpp –O2 –d2dumpphaselist”</p>
        <p style="TEXT-ALIGN: justify">
            <font class="style1"><span class="style6"><font size="2">The compilation order 
            of Pass 0 is top-down order along the call graph while the final code-generation 
            pass follows the bottom-up order.&nbsp; Since C2 is </font></span>
            <span class="style7"><font size="2">multi-threaded</font></span><span 
                class="style6"><font size="2"> at functionUnit level, more than one 
            functionUnits can be processed simultaneously in a C2 Pass assuming they are 
            independent for the process. &nbsp;For example, in a top-down order, all callees of 
            function </font></span><span class="style7"><font size="2">foo</font></span><span 
                class="style6"><font size="2"> can be processed at the same time after the 
            compilation of </font></span><span class="style7"><font size="2">foo</font></span><span 
                class="style6"><font size="2"> assuming its callees are not calling each 
            other directly or indirectly.</font></span></font></p>
        <p class="style1" style="TEXT-ALIGN: justify">
            <span class="style5">Similar to adding/updating a phase as we have done before 
            via </span><span class="style5" style="COLOR: #1f497d">PlugIn::BuildPhases</span><span 
                class="style5"> API, we can add/replace a pass with </span>
            <span class="style5" style="COLOR: #1f497d">PlugIn::BuildPasses</span><span 
                class="style5"> &nbsp;in this new SDK. &nbsp;While </span><span class="style5" 
                style="COLOR: #1f497d">PlugIn::BuildPhases</span><span class="style5"> only 
            applies to the final bottom-up Code Gen Pass, </span><span class="style5" 
                style="COLOR: #1f497d">PlugIn::BuildPasses</span><span class="style5">&nbsp; 
            can configure every pass including the final code generation pass. You can also 
            add a new phase in an existent pass as well as a completely new pass at the same 
            time as shown in the picture below. </span>
            <br />
            <img alt="Phoenix Pass Illustration" 
                src="http://connect.microsoft.com/siteimages/d42d049d-bb5e-40ce-b4f4-b1df490a74e5.jpg" /><br />
            <span class="style5">A typical inter-procedural analysis is composed of two or 
            more passes. It’s usually led by a pass (top-down or bottom-up order) that 
            analyzes IR at function level, summarize and save information on the 
            corresponding call node/edge.&nbsp; Later it’s followed by a pass that follows 
            call-edges on the call graph and propagates, merges or solves the information 
            previously saved on call node/edge. To store and retrieve information on 
            call-graph </span><span class="style8">thread-safely</span><span class="style5">, 
            it is encouraged that plug-in users use </span><span class="style5" 
                style="COLOR: #1f497d">Phx::Graphs:: SummaryRecord</span><span 
                class="style5"> primitives. &nbsp;&nbsp;You can extend and create different kinds of 
            summaryRecords for your purpose and annotate them on a call-node, call-edge or 
            call-site.</span><br class="style5" />
            <br class="style5" />
            <span class="style5">Since currently Phoenix C2 does not </span>
            <span class="style4">cache</span><span class="style5"> IR in memory between
            </span><span class="style4">Passes</span><span class="style5">, a </span>
            <span class="style4">pass</span><span class="style5"> that needs to analyze IR 
            must re-read IR from input file. &nbsp;If the existent two-pass configuration does 
            not meet your need, creating a new pass with IR reading phase is also 
            straightforward.&nbsp; There are two ways to do that:&nbsp;</span><br />
        </p>
        <ol class="style1">
            <li class="style5">Create a C2 Pass and leverage C2’s multi-threaded call graph 
                compilation. To do this, you have to fill in six PhaseLists of a C2 Pass.
            </li>
            <li><span class="style5">Create a generic Phoenix pass and do the compilation 
                yourself:&nbsp; you have to control the compilation order, create a function unit for 
                each function and apply PhaseList of the new </span><span class="style4">Pass</span><span 
                    class="style5"> to each function.</span></li>
        </ol>
    </div>

</body>
</html>

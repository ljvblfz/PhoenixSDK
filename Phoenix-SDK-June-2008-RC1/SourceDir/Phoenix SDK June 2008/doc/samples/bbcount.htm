<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List href="bbcount_files/filelist.xml">
<title>BBCount Sample</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Lingli Zhang</o:Author>
  <o:LastAuthor>johnlef</o:LastAuthor>
  <o:Revision>5</o:Revision>
  <o:TotalTime>174</o:TotalTime>
  <o:Created>2005-11-16T04:21:00Z</o:Created>
  <o:LastSaved>2005-12-03T00:29:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>747</o:Words>
  <o:Characters>4261</o:Characters>
  <o:Company>Microsoft Corporation</o:Company>
  <o:Lines>35</o:Lines>
  <o:Paragraphs>9</o:Paragraphs>
  <o:CharactersWithSpaces>4999</o:CharactersWithSpaces>
  <o:Version>11.6568</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>FullPage</w:Zoom>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:\5B8B\4F53;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:1 135135232 16 0 262144 0;}
@font-face
	{font-family:"\@SimSun";
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:auto;
	mso-font-signature:0 0 0 0 0 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
@page Section1
	{size:8.5in 11.0in;
	margin:0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="3074"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span style='font-size:14.0pt;font-family:Arial'>BBCount Sample<o:p></o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:10.0pt;font-family:Arial'>Sample Name</span></b><span
style='font-size:10.0pt;font-family:Arial'>: BBCount<o:p></o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:10.0pt;font-family:Arial'>Sample Category</span></b><span
style='font-size:10.0pt;font-family:Arial'>: Instrumentation/Code
Transformation<o:p></o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:10.0pt;font-family:Arial'>Description</span></b><span
style='font-size:10.0pt;font-family:Arial'>: BBCount takes as input a list of
MSIL assemblies/modules, and produces as output a list of new MSIL
assemblies/modules in which a basic block counting routine has been inserted
before the entry point of every basic block in the input assemblies/modules.
Also, an XMLmap file is dumped to provide a mapping from the unique basic block
ID that is used by the basic block counting routine back to more rich contexts,
such as assembly name, function name, offset of the basic block, etc.<o:p></o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:10.0pt;font-family:Arial'>Source Language</span></b><span
style='font-size:10.0pt;font-family:Arial'>: C#, C++/CLI<o:p></o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:10.0pt;font-family:Arial'>Sample Location</span></b><span
style='font-size:10.0pt;font-family:Arial'> <a
href="../../Samples/bbcount/csharp">Samples\bbcount\csharp</a>, <a
href="../../Samples/bbcount/cpp">Samples\bbcount\cpp</a><o:p></o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:10.0pt;font-family:Arial'>Usage</span></b><span
style='font-size:10.0pt;font-family:Arial'>: From the command line<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>BBCount
</span><span style='font-size:10.0pt;font-family:Arial'><span
style='mso-spacerun:yes'> </span>[/outdir<span style='mso-spacerun:yes'> 
</span>target-dir]<span style='mso-spacerun:yes'><span style='mso-spacerun:yes'>  </span>[/pdb]<span style='mso-spacerun:yes'>  </span>[/map<span
style='mso-spacerun:yes'>  </span>map-name]<span style='mso-spacerun:yes'>  
</span>[/cnt<span style='mso-spacerun:yes'>  </span>count-name]<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-size:10.0pt;
font-family:Arial'><span style='mso-spacerun:yes'>     </span>[/v]<span
style='mso-spacerun:yes'>   </span>[/d]<span style='mso-spacerun:yes'>  
</span></span><span style='font-size:10.0pt;font-family:"Courier New"'>&lt;src-assembly-list&gt;
<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>/outdir <span
style='mso-tab-count:1'>  </span>the directory to put the instrumented
assemblies<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'><span
style='mso-spacerun:yes'>                </span><span style='mso-tab-count:
1'>        </span>Default: </span><span style='font-size:10.0pt;font-family:
Arial;mso-fareast-font-family:SimSun;mso-fareast-language:ZH-CN'>instrumented<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>/pdb <span
style='mso-tab-count:1'>    </span>output an updated pdb to the output directory<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>/map <span
style='mso-tab-count:1'>    </span>the name of mapfile to be generated<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'><span
style='mso-spacerun:yes'>                </span><span style='mso-tab-count:
1'>        </span>Default: bbcount.map</span><span style='font-size:10.0pt;
font-family:Arial;mso-fareast-font-family:SimSun;mso-fareast-language:ZH-CN'><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>/cnt <span
style='mso-tab-count:1'>      </span>the file that we keep total number of
basic blocks<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'><span
style='mso-spacerun:yes'>                </span><span style='mso-tab-count:
1'>        </span></span><span lang=DA style='font-size:10.0pt;font-family:
Arial;mso-ansi-language:DA'>Default: bbcount.cnt</span><span lang=DA
style='font-size:10.0pt;font-family:Arial;mso-fareast-font-family:SimSun;
mso-ansi-language:DA;mso-fareast-language:ZH-CN'><o:p></o:p></span></p>

<p class=MsoNormal><span lang=DA style='font-size:10.0pt;font-family:Arial;
mso-ansi-language:DA'>/v<span style='mso-tab-count:1'>         </span>verbose
flag<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>/d<span
style='mso-tab-count:1'>         </span>dump per-block disassembly flag<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-size:10.0pt;
font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>When
running the instrmented binary be certain ProfilerRt.dll and RtWrapper.dll are
in the same directory as the instrumented binary to enable binding with the
instrumentation.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b
style='mso-bidi-font-weight:normal'><span style='font-size:10.0pt;font-family:
Arial'>Detailed Description</span></b><span style='font-size:10.0pt;font-family:
Arial'>: There are three components in this sample: bbcount.cs, RtWrapper, and
ProfilerRt. bbcount.cs is the main instrumentation component, and RtWrapper and
ProfileRt together provide the basic block counting routine. <o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;font-family:Arial'>-- Part I. bbcount.cs<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:12.0pt;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'><span
style='mso-spacerun:yes'>    </span>Bbcount.cs is a simple example of a C#
program which performs a simple type of instrumentation, i.e., basic block
counting.&nbsp;This sample intends to demonstrate how to write a C# application
that instruments MSIL assemblies. Some general interfaces that simplify the
task of instrumenting MSIL modules are provided. BBCount is just one example
that shows how to use these interfaces to perform one type of instrumentation. <o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:12.0pt;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:10.0pt;font-family:Arial'>The
BBCount class is the entry point of the program, from where the Phoenix
environment is initialized and input assemblies are processed one by one by
calling Instrumentor.Process(). The CmdLineParser class is a helper class that
does command line parsing and also works as a holder of some global variables.
The Logger class is a helper class that factors out code for dumping out the
xml mapping information. This Instrumentor class implements the whole process
of instrumenting an MSIL assembly or module. First, the input assembly/module
is read in by the Phx.PE.ReaderPhase. Then each function in the input assembly/module
is processed by InstrumentPhase, EncodePhase, and etc. Finally, the result
assembly/module is written out by the EmitPhase. Except for the
InstrumentPhase, other phases are either a phase provided by the Phoenix
framework, or a thin wrapper of functionalities directly available in Phoenix.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:12.0pt;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:10.0pt;font-family:Arial'>The
InstrumentPhase class is the core class in this sample. The main action can be
found in the Execute() method, where a loop iterates all basic blocks in the
input function and inserts a call instruction to a basic block counting routine
called BBCount, which is in a separate DLL called RtWrapper.dll. During the
iteration, the mapping information between the unique ID of a basic block that
is used by the counting rountine and the assembly/function name of the basic
block and its offset within the function are dumped out via the Logger class.
The InstrumentPhase class also provides several useful instrumentation
facilities which can be used for other instrumentation tasks. For example, the
FuncPrototype class provides interfaces to import a method reference to a MSIL
module, and the InsertCallInstr() method wraps necessary steps to insert a call
instruction before any instruction.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;font-family:Arial'>-- Part2. RtWrapper<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:12.0pt;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:10.0pt;font-family:Arial'>RtWrapper
is a managed wrapper class of all the APIs that are exported by the profiling
runtime. The profiling runtime is implemented as a native DLL so that we can
initialize profiling data structures in the beginning and dump out the
profiling data at the end of execution, using DLLMain. However, Phoenix currently
does not support insertion of unmanaged call to managed code. Thus, we use this
simple wrapper class as a bridge between the managed code and unmanaged
runtime. <o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;font-family:Arial'>---- Part3. ProfilerRt<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;font-family:Arial'><span style='mso-spacerun:yes'>   
</span>ProfilerRt is the real profiling runtime that the instrumented managed
code called. It is implemented a native DLL so that we can initialize profiling
data structures in the beginning and dump out the profiling data at the end of
execution, using DLLMain. Right now, there is only one exported function, i.e.,
BBCount(uint), which increments the count of the basic block that has the given
ID every time it is called.<o:p></o:p></span></p>

</div>

</body>

</html>

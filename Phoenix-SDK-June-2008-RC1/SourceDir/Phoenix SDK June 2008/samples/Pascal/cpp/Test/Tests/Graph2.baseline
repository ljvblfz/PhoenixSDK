Compiling...
Graph2.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 21(0x00000015).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 21(0x00000015).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Graph2.CDecl.Function()->(void)                 #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #4
                       START Graph2(T)                                       #4
Graph2: (references=1)                                                       #4
                       ENTERFUNCTION                                         #4
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 13(0x0000000d).i32, &d.up32->real (f64), &s.up32->integer (i32), &h1.up32->integer (i32), &h2.up32->integer (i32), &c.up32->real (f64), &lim.up32->integer (i32), &i.up32->integer (i32), &j.up32->integer (i32), &k.up32->integer (i32), &n.up32->integer (i32), &x.up32->real (f64), &y.up32->real (f64), &a.up32->$$unnamed100 (UnmgdArr[char (i8)]544) #19
   d.real (f64).a64  = ASSIGN 0.0625.real (f64)                              #6
   s.integer (i32).a32 = ASSIGN 32(0x00000020).integer (i32)                 #7
   h1.integer (i32).a32 = ASSIGN 34(0x00000022).integer (i32)                #8
   h2.integer (i32).a32 = ASSIGN 68(0x00000044).integer (i32)                #9
   c.real (f64).a64  = ASSIGN 6.28318.real (f64)                            #10
   lim.integer (i32).a32 = ASSIGN 32(0x00000020).integer (i32)              #10
   j.integer (i32).a32 = ASSIGN 1.integer (i32)                             #13
   tv152-.integer (i32) = ASSIGN j.integer (i32).a32                        #13
                       GOTO $L4                                             #13
$L4: (references=2)                                                         #13
   t153.i32          = COMPARE(LT) h2.integer (i32).a32, tv152-.integer (i32) #13
                       CONDITIONALBRANCH(True) t153.i32, $L5, $L6           #13
$L5: (references=1)                                                         #13
   tv156-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #13
                       GOTO $L7                                             #13
$L6: (references=1)                                                         #13
   tv156-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #13
                       GOTO $L7                                             #13
$L7: (references=2)                                                         #13
                       CONDITIONALBRANCH(True) tv156"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #13
$L9: (references=1)                                                         #13
   j.integer (i32).a32 = ASSIGN tv152-.integer (i32)                        #13
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 68(0x00000044).i32, j.integer (i32).a32, 0.i32, 13(0x0000000d).i32                                                                #13
   t158.i32          = SUBTRACT j.integer (i32).a32, 1.i32                  #13
   t159.i32          = ADD t158.i32, 0.i32                                  #13
   tv160-.i32        = MULTIPLY 1.i32, t159.i32                             #13
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 67(0x00000043).i32, tv160-.i32, 0.i32, 13(0x0000000d).i32                                                                         #13
   [&a.up32->$$unnamed100 (UnmgdArr[char (i8)]544)+tv160-.i32].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                     #13
   t161.integer (i32) = ADD j.integer (i32).a32, 1.integer (i32)            #13
   tv152-.integer (i32) = ASSIGN t161.integer (i32)                         #13
                       GOTO $L4                                             #13
$L8: (references=1)                                                         #13
   i.integer (i32).a32 = ASSIGN 0.integer (i32)                             #14
   tv162-.integer (i32) = ASSIGN i.integer (i32).a32                        #14
                       GOTO $L10                                            #14
$L10: (references=2)                                                        #14
   t163.i32          = COMPARE(GT) tv162-.integer (i32), lim.integer (i32).a32 #14
                       CONDITIONALBRANCH(True) t163.i32, $L11, $L12         #14
$L11: (references=1)                                                        #14
   tv164-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #14
                       GOTO $L13                                            #14
$L12: (references=1)                                                        #14
   tv164-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #14
                       GOTO $L13                                            #14
$L13: (references=2)                                                        #14
                       CONDITIONALBRANCH(True) tv164"$$data"(Boolean (Enum32)+0).i32, $L14, $L15                                                            #14
$L15: (references=1)                                                        #14
   i.integer (i32).a32 = ASSIGN tv162-.integer (i32)                        #14
   t165.real (f64)   = CONVERT i.integer (i32).a32                          #15
   t166.real (f64)   = MULTIPLY d.real (f64).a64, t165.real (f64)           #15
   x.real (f64).a64  = ASSIGN t166.real (f64)                               #15
   tv167.real (f64)  = NEGATE x.real (f64).a64                              #15
   tv168.real (f64)  = MULTIPLY c.real (f64).a64, x.real (f64).a64          #15
   t169.real (f64)   = NEGATE x.real (f64).a64                              #15
   t170.f64          = CALL &_exp.CDecl.Function(f64)->(f64), t169.real (f64) #15
   t171.real (f64)   = MULTIPLY c.real (f64).a64, x.real (f64).a64          #15
   t172.f64          = CALL &_sin.CDecl.Function(f64)->(f64), t171.real (f64) #15
   tv173.real (f64)  = NEGATE x.real (f64).a64                              #15
   tv174.real (f64)  = MULTIPLY c.real (f64).a64, x.real (f64).a64          #15
   t175.real (f64)   = MULTIPLY t170.f64, t172.f64                          #15
   y.real (f64).a64  = ASSIGN t175.real (f64)                               #15
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 68(0x00000044).i32, h1.integer (i32).a32, 0.i32, 16(0x00000010).i32                                                               #16
   t176.i32          = SUBTRACT h1.integer (i32).a32, 1.i32                 #16
   t177.i32          = MULTIPLY 1.i32, t176.i32                             #16
   t178.i32          = ADD t177.i32, 0.i32                                  #16
   tv179-.i32        = MULTIPLY 1.i32, t178.i32                             #16
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 67(0x00000043).i32, tv179-.i32, 0.i32, 16(0x00000010).i32                                                                         #16
   [&a.up32->$$unnamed100 (UnmgdArr[char (i8)]544)+tv179-.i32].char (i8).a8 = ASSIGN 58(0x3a).char (i8)                                                     #16
   t180.real (f64)   = CONVERT s.integer (i32).a32                          #16
   tv181.real (f64)  = MULTIPLY t180.real (f64), y.real (f64).a64           #16
   t182.real (f64)   = CONVERT s.integer (i32).a32                          #16
   t183.real (f64)   = MULTIPLY t182.real (f64), y.real (f64).a64           #16
   t184.i32          = CALL &_round.CDecl.Function(f64)->(i32), t183.real (f64) #16
   t185.real (f64)   = CONVERT s.integer (i32).a32                          #16
   tv186.real (f64)  = MULTIPLY t185.real (f64), y.real (f64).a64           #16
   t187.integer (i32) = ADD t184.i32, h1.integer (i32).a32                  #16
   n.integer (i32).a32 = ASSIGN t187.integer (i32)                          #16
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 68(0x00000044).i32, n.integer (i32).a32, 0.i32, 16(0x00000010).i32                                                                #16
   t188.i32          = SUBTRACT n.integer (i32).a32, 1.i32                  #16
   t189.i32          = MULTIPLY 1.i32, t188.i32                             #16
   t190.i32          = ADD t189.i32, 0.i32                                  #16
   tv191-.i32        = MULTIPLY 1.i32, t190.i32                             #16
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 67(0x00000043).i32, tv191-.i32, 0.i32, 16(0x00000010).i32                                                                         #16
   [&a.up32->$$unnamed100 (UnmgdArr[char (i8)]544)+tv191-.i32].char (i8).a8 = ASSIGN 42(0x2a).char (i8)                                                     #16
   t192.i32          = COMPARE(LT) n.integer (i32).a32, h1.integer (i32).a32 #17
                       CONDITIONALBRANCH(True) t192.i32, $L16, $L17         #17
$L16: (references=1)                                                        #17
   tv193-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #17
                       GOTO $L18                                            #17
$L17: (references=1)                                                        #17
   tv193-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #17
                       GOTO $L18                                            #17
$L18: (references=2)                                                        #17
                       CONDITIONALBRANCH(True) tv193"$$data"(Boolean (Enum32)+0).i32, $L19, $L20                                                            #17
$L19: (references=1)                                                        #17
   k.integer (i32).a32 = ASSIGN h1.integer (i32).a32                        #17
                       GOTO $L21                                            #17
$L20: (references=1)                                                        #17
   k.integer (i32).a32 = ASSIGN n.integer (i32).a32                         #17
                       GOTO $L21                                            #17
$L21: (references=2)                                                        #17
   j.integer (i32).a32 = ASSIGN 1.integer (i32)                             #18
   tv194-.integer (i32) = ASSIGN j.integer (i32).a32                        #18
                       GOTO $L22                                            #18
$L22: (references=2)                                                        #18
   t195.i32          = COMPARE(GT) tv194-.integer (i32), k.integer (i32).a32 #18
                       CONDITIONALBRANCH(True) t195.i32, $L23, $L24         #18
$L23: (references=1)                                                        #18
   tv196-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #18
                       GOTO $L25                                            #18
$L24: (references=1)                                                        #18
   tv196-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #18
                       GOTO $L25                                            #18
$L25: (references=2)                                                        #18
                       CONDITIONALBRANCH(True) tv196"$$data"(Boolean (Enum32)+0).i32, $L26, $L27                                                            #18
$L27: (references=1)                                                        #18
   j.integer (i32).a32 = ASSIGN tv194-.integer (i32)                        #18
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 68(0x00000044).i32, j.integer (i32).a32, 0.i32, 18(0x00000012).i32                                                                #18
   t197.i32          = SUBTRACT j.integer (i32).a32, 1.i32                  #18
   t198.i32          = MULTIPLY 1.i32, t197.i32                             #18
   t199.i32          = ADD t198.i32, 0.i32                                  #18
   tv200-.i32        = MULTIPLY 1.i32, t199.i32                             #18
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 67(0x00000043).i32, tv200-.i32, 0.i32, 18(0x00000012).i32                                                                         #18
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN [&a.up32->$$unnamed100 (UnmgdArr[char (i8)]544)+tv200-.i32].char (i8).a8                #18
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 18(0x00000012).i32                                                         #18
   t202.integer (i32) = ADD j.integer (i32).a32, 1.integer (i32)            #18
   tv194-.integer (i32) = ASSIGN t202.integer (i32)                         #18
                       GOTO $L22                                            #18
$L26: (references=1)                                                        #18
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #19
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 19(0x00000013).i32                                                         #19
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #19
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 19(0x00000013).i32                                                         #19
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 68(0x00000044).i32, n.integer (i32).a32, 0.i32, 19(0x00000013).i32                                                                #19
   t203.i32          = SUBTRACT n.integer (i32).a32, 1.i32                  #19
   t204.i32          = MULTIPLY 1.i32, t203.i32                             #19
   t205.i32          = ADD t204.i32, 0.i32                                  #19
   tv206-.i32        = MULTIPLY 1.i32, t205.i32                             #19
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 67(0x00000043).i32, tv206-.i32, 0.i32, 19(0x00000013).i32                                                                         #19
   [&a.up32->$$unnamed100 (UnmgdArr[char (i8)]544)+tv206-.i32].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                     #19
   t207.integer (i32) = ADD i.integer (i32).a32, 1.integer (i32)            #19
   tv162-.integer (i32) = ASSIGN t207.integer (i32)                         #19
                       GOTO $L10                                            #19
$L14: (references=1)                                                        #14
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #19
                       RETURN $L28(T)                                       #21
$L28: (references=1)                                                        #21
                       EXITFUNCTION                                         #21
$L2: (references=0)                                                         #21
                       END                                                  #21
Writing Graph2.obj...

Graph2.p - 0 error(s), 0 warning(s).

Linking...

Graph2.exe - 0 error(s), 0 warning(s).

                                 *
                                 :           *
                                 :                   *
                                 :                        *
                                 :                        *
                                 :                     *
                                 :               *
                                 :       *
                                 *
                          *      :
                     *           :
                  *              :
                  *              :
                    *            :
                        *        :
                            *    :
                                 *
                                 :   *
                                 :      *
                                 :        *
                                 :        *
                                 :       *
                                 :     *
                                 :  *
                                 *
                              *  :
                             *   :
                            *    :
                           *     :
                            *    :
                              *  :
                               * :
                                 *

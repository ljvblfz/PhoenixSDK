Compiling...
Function1.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 11(0x0000000b).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 11(0x0000000b).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Function1.CDecl.Function()->(void)              #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #3
                       START Function1(T)                                    #3
Function1: (references=1)                                                    #3
                       ENTERFUNCTION                                         #3
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 0.i32                  #10
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = CALL &f.CDecl.Function()->(integer (i32))                                                        #10
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 10(0x0000000a).i32                                                    #10
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #10
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 10(0x0000000a).i32                                                                #10
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #10
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 10(0x0000000a).i32                                                                #10
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #10
                       RETURN $L4(T)                                        #11
$L4: (references=1)                                                         #11
                       EXITFUNCTION                                         #11
$L2: (references=0)                                                         #11
                       END                                                  #11

IR after Type Checker (control chktype)

Function Unit #3
$L1: (references=0)                                                          #4
                       START f(T)                                            #4
f: (references=1)                                                            #4
                       ENTERFUNCTION                                         #4
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 3.i32, 1.i32, &f.up32->integer (i32)                                                                           #9
   t138.integer (i32) = CALL &f2.CDecl.Function()->(integer (i32))           #9
   t139.integer (i32) = CALL &f2.CDecl.Function()->(integer (i32))           #9
   f.integer (i32).a32 = ADD t138.integer (i32), t139.integer (i32)          #9
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 3.i32                                                                    #9
                       RETURN f.integer (i32).a32, $L4(T)                    #9
$L4: (references=1)                                                          #9
                       EXITFUNCTION                                          #9
$L2: (references=0)                                                          #9
                       END                                                   #9

IR after Type Checker (control chktype)

Function Unit #4
$L1: (references=0)                                                          #5
                       START f2(T)                                           #5
f2: (references=1)                                                           #5
                       ENTERFUNCTION                                         #5
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 4.i32, 1.i32, &f2.up32->integer (i32)                                                                          #6
   f2.integer (i32).a32 = ASSIGN 4.integer (i32)                             #6
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 4.i32                                                                    #6
                       RETURN f2.integer (i32).a32, $L4(T)                   #7
$L4: (references=1)                                                          #7
                       EXITFUNCTION                                          #7
$L2: (references=0)                                                          #7
                       END                                                   #7
Writing Function1.obj...

Function1.p - 0 error(s), 0 warning(s).

Linking...

Function1.exe - 0 error(s), 0 warning(s).

8

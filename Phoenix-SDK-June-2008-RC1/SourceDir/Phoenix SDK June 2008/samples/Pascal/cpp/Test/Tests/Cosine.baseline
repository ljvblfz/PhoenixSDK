Compiling...
Cosine.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 21(0x00000015).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 21(0x00000015).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Cosine.CDecl.Function()->(void)                 #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #5
                       START Cosine(T)                                       #5
Cosine: (references=1)                                                       #5
                       ENTERFUNCTION                                         #5
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 2.i32, 9.i32, &eps.up32->real (f64), &n.up32->integer (i32), &x.up32->real (f64), &sx.up32->real (f64), &s.up32->real (f64), &t.up32->real (f64), &i.up32->integer (i32), &k.up32->integer (i32), &cosine.up32->$$unnamed100 (Aggregate96)                                    #19
   eps.real (f64).a64 = ASSIGN 1E-14.real (f64)                              #7
   n.integer (i32).a32 = ASSIGN 5.integer (i32)                              #7
   cosine"$runtime_handle"($$unnamed100 (Aggregate96)+0).HANDLE (up32->void).a32 = CALL &_file_open.CDecl.Function(up32->i8,i32,i32,i32)->(HANDLE (up32->void)), &$SG105.up32->char (i8), 0.i32, 0.i32, 10(0x0000000a).i32                  #10
   t149.f64          = CALL &_file_get_double.CDecl.Function(HANDLE (up32->void),i32,i32)->(f64), cosine"$runtime_handle"($$unnamed100 (Aggregate96)+0).HANDLE (up32->void).a32, 0.i32, 10(0x0000000a).i32                                  #10
   [&cosine.up32->$$unnamed100 (Aggregate96)+4].real (f64).a64 = ASSIGN t149.f64                                                                            #10
   i.integer (i32).a32 = ASSIGN 1.integer (i32)                             #12
   tv150-.integer (i32) = ASSIGN i.integer (i32).a32                        #12
                       GOTO $L4                                             #12
$L4: (references=2)                                                         #12
   t151.i32          = COMPARE(GT) tv150-.integer (i32), n.integer (i32).a32 #12
                       CONDITIONALBRANCH(True) t151.i32, $L5, $L6           #12
$L5: (references=1)                                                         #12
   tv154-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #12
                       GOTO $L7                                             #12
$L6: (references=1)                                                         #12
   tv154-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #12
                       GOTO $L7                                             #12
$L7: (references=2)                                                         #12
                       CONDITIONALBRANCH(True) tv154"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #12
$L9: (references=1)                                                         #12
   i.integer (i32).a32 = ASSIGN tv150-.integer (i32)                        #12
   x.real (f64).a64  = ASSIGN cosine"$current_value"($$unnamed100 (Aggregate96)+32).real (f64).a64                                                          #13
   t155.f64          = CALL &_file_get_double.CDecl.Function(HANDLE (up32->void),i32,i32)->(f64), cosine"$runtime_handle"($$unnamed100 (Aggregate96)+0).HANDLE (up32->void).a32, 0.i32, 13(0x0000000d).i32                                  #13
   [&cosine.up32->$$unnamed100 (Aggregate96)+4].real (f64).a64 = ASSIGN t155.f64                                                                            #13
   t.real (f64).a64  = ASSIGN 1.real (f64)                                  #13
   k.integer (i32).a32 = ASSIGN 0.integer (i32)                             #13
   s.real (f64).a64  = ASSIGN 1.real (f64)                                  #13
   t156.f64          = CALL &_sqrf.CDecl.Function(f64)->(f64), x.real (f64).a64 #13
   sx.real (f64).a64 = ASSIGN t156.f64                                      #13
                       GOTO $L10                                            #14
$L10: (references=2)                                                        #14
   t157.f64          = CALL &_fabs.CDecl.Function(f64)->(f64), t.real (f64).a64 #14
   t158.f64          = CALL &_fabs.CDecl.Function(f64)->(f64), s.real (f64).a64 #14
   t159.real (f64)   = MULTIPLY eps.real (f64).a64, t158.f64                #14
   t160.i32          = COMPARE(FGT) t157.f64, t159.real (f64)               #14
                       CONDITIONALBRANCH(True) t160.i32, $L11, $L12         #14
$L11: (references=1)                                                        #14
   tv161-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #14
                       GOTO $L13                                            #14
$L12: (references=1)                                                        #14
   tv161-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #14
                       GOTO $L13                                            #14
$L13: (references=2)                                                        #14
                       CONDITIONALBRANCH(True) tv161"$$data"(Boolean (Enum32)+0).i32, $L14, $L15                                                            #14
$L14: (references=1)                                                        #14
   t162.integer (i32) = ADD k.integer (i32).a32, 2.integer (i32)            #16
   k.integer (i32).a32 = ASSIGN t162.integer (i32)                          #16
   t163.real (f64)   = NEGATE t.real (f64).a64                              #16
   t164.real (f64)   = MULTIPLY t163.real (f64), sx.real (f64).a64          #16
   t165.integer (i32) = SUBTRACT k.integer (i32).a32, 1.integer (i32)       #16
   t166.integer (i32) = MULTIPLY k.integer (i32).a32, t165.integer (i32)    #16
   t167.real (f64)   = CONVERT t166.integer (i32)                           #16
   t168.real (f64)   = DIVIDE t164.real (f64), t167.real (f64)              #16
   t.real (f64).a64  = ASSIGN t168.real (f64)                               #16
   t169.real (f64)   = ADD s.real (f64).a64, t.real (f64).a64               #18
   s.real (f64).a64  = ASSIGN t169.real (f64)                               #18
                       GOTO $L10                                            #18
$L15: (references=1)                                                        #14
   t170.integer (i32) = DIVIDE k.integer (i32).a32, 2.integer (i32)         #19
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN x.real (f64).a64                                                                      #19
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 19(0x00000013).i32                                                    #19
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 9.char (i8) #19
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 19(0x00000013).i32                                                         #19
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN s.real (f64).a64                                                                      #19
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 19(0x00000013).i32                                                    #19
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 9.char (i8) #19
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 19(0x00000013).i32                                                         #19
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN t170.integer (i32)                                                                 #19
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 19(0x00000013).i32                                                    #19
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #19
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 19(0x00000013).i32                                                                #19
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #19
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 19(0x00000013).i32                                                                #19
   t172.integer (i32) = ADD i.integer (i32).a32, 1.integer (i32)            #19
   tv150-.integer (i32) = ASSIGN t172.integer (i32)                         #19
                       GOTO $L4                                             #19
$L8: (references=1)                                                         #12
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #19
                       RETURN $L16(T)                                       #21
$L16: (references=1)                                                        #21
                       EXITFUNCTION                                         #21
$L2: (references=0)                                                         #21
                       END                                                  #21
Writing Cosine.obj...

Cosine.p - 0 error(s), 0 warning(s).

Linking...

Cosine.exe - 0 error(s), 0 warning(s).

0.153462	0.988248	5
0.333333	0.944957	6
0.500000	0.877583	7
1.000000	0.540302	9
3.141593	-1.000000	14

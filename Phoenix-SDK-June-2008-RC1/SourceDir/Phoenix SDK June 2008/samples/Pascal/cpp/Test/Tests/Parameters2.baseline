Compiling...
Parameters2.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 20(0x00000014).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 20(0x00000014).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Parameters2.CDecl.Function()->(void)            #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #3
                       START Parameters2(T)                                  #3
Parameters2: (references=1)                                                  #3
                       ENTERFUNCTION                                         #3
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 0.i32                  #19
   t137.real (f64)   = CALL &trig.CDecl.Function(up32->CDecl.Function(real (f64))->(real (f64)),real (f64))->(real (f64)), &_sin.up32->CDecl.Function(f64)->(f64), 1.570796.real (f64)                                                      #18
                       CALL &something.CDecl.Function(up32->CDecl.Function(real (f64))->(void),real (f64))->(void), &print.up32->CDecl.Function(real (f64))->(void), t137.real (f64)                                                        #18
   t138.real (f64)   = CALL &trig.CDecl.Function(up32->CDecl.Function(real (f64))->(real (f64)),real (f64))->(real (f64)), &_cos.up32->CDecl.Function(f64)->(f64), 1.570796.real (f64)                                                      #19
                       CALL &something.CDecl.Function(up32->CDecl.Function(real (f64))->(void),real (f64))->(void), &print.up32->CDecl.Function(real (f64))->(void), t138.real (f64)                                                        #19
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #19
                       RETURN $L4(T)                                        #20
$L4: (references=1)                                                         #20
                       EXITFUNCTION                                         #20
$L2: (references=0)                                                         #20
                       END                                                  #20

IR after Type Checker (control chktype)

Function Unit #5
$L1: (references=0)                                                         #13
                       START trig(T)                                        #13
trig: (references=1)                                                        #13
   f.up32->CDecl.Function(real (f64))->(real (f64)).a32, x.real (f64).a64 = ENTERFUNCTION                                                                   #13
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 5.i32, 3.i32, &f.up32->up32->CDecl.Function(real (f64))->(real (f64)), &x.up32->real (f64), &trig.up32->real (f64)                                                                            #14
   trig.real (f64).a64 = CALL f.up32->CDecl.Function(real (f64))->(real (f64)).a32, x.real (f64).a64                                                        #14
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 5.i32                                                                   #14
                       RETURN trig.real (f64).a64, $L4(T)                   #15
$L4: (references=1)                                                         #15
                       EXITFUNCTION                                         #15
$L2: (references=0)                                                         #15
                       END                                                  #15

IR after Type Checker (control chktype)

Function Unit #4
$L1: (references=0)                                                          #9
                       START something(T)                                    #9
something: (references=1)                                                    #9
   p.up32->CDecl.Function(real (f64))->(void).a32, r.real (f64).a64 = ENTERFUNCTION                                                                          #9
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 4.i32, 2.i32, &p.up32->up32->CDecl.Function(real (f64))->(void), &r.up32->real (f64)                          #10
                       CALL p.up32->CDecl.Function(real (f64))->(void).a32, r.real (f64).a64                                                                #10
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 4.i32                                                                   #10
                       RETURN $L4(T)                                        #11
$L4: (references=1)                                                         #11
                       EXITFUNCTION                                         #11
$L2: (references=0)                                                         #11
                       END                                                  #11

IR after Type Checker (control chktype)

Function Unit #3
$L1: (references=0)                                                          #5
                       START print(T)                                        #5
print: (references=1)                                                        #5
   r.real (f64).a64  = ENTERFUNCTION                                         #5
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 3.i32, 1.i32, &r.up32->real (f64) #6
   output($stdfile (Aggregate2080)+32).real (f64).a64 = ASSIGN r.real (f64).a64 #6
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).real (f64).a64, 0.i32, 6.i32                                                                         #6
   output($stdfile (Aggregate2080)+32).i8.a8 = ASSIGN 13(0x0d).i8            #6
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).i8.a8, 0.i32, 6.i32     #6
   output($stdfile (Aggregate2080)+32).i8.a8 = ASSIGN 10(0x0a).i8            #6
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).i8.a8, 0.i32, 6.i32     #6
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 3.i32                                                                    #6
                       RETURN $L4(T)                                         #7
$L4: (references=1)                                                          #7
                       EXITFUNCTION                                          #7
$L2: (references=0)                                                          #7
                       END                                                   #7
Writing Parameters2.obj...

Parameters2.p - 0 error(s), 0 warning(s).

Linking...

Parameters2.exe - 0 error(s), 0 warning(s).

1.000000
0.000000

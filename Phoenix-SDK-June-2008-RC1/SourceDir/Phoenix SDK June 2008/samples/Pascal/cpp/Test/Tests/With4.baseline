Compiling...
With4.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 19(0x00000013).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 19(0x00000013).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &With4.CDecl.Function()->(void)                  #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #3
                       START With4(T)                                        #3
With4: (references=1)                                                        #3
                       ENTERFUNCTION                                         #3
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 2.i32, 1.i32, &px.up32->$$unnamed100 (up32->complex (Aggregate128))                                           #18
   t140.up32->void   = CALL &__new.CDecl.Function(i32,i32,i32)->(up32->void), 16(0x00000010).i32, 0.i32, 9.i32                                               #9
   px.$$unnamed100 (up32->complex (Aggregate128)).a32 = CONVERT t140.up32->void #9
   [px.$$unnamed100 (up32->complex (Aggregate128)).a32].real (f64).a64 = ASSIGN 6.real (f64)                                                                #12
   [px.$$unnamed100 (up32->complex (Aggregate128)).a32+8].real (f64).a64 = ASSIGN 7.real (f64)                                                              #12
   [&output.up32->$stdfile (Aggregate2080)+4].up32->char (i8).a32 = ASSIGN &$SG105.up32->char (i8)                                                          #16
                       CALL &_file_put_string.CDecl.Function(HANDLE (up32->void),up32->i8,i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].up32->char (i8).a32, -1(0xffffffff).i32, 0.i32, 16(0x00000010).i32                  #16
                       CALL &_file_set_modifier.CDecl.Function(HANDLE (up32->void),i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, 0.i32, 3.integer (i32)                                    #16
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN [px.$$unnamed100 (up32->complex (Aggregate128)).a32].real (f64).a64                   #16
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 16(0x00000010).i32                                                    #16
                       CALL &_file_set_modifier.CDecl.Function(HANDLE (up32->void),i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, 0.i32, 3.integer (i32)                                    #16
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN [px.$$unnamed100 (up32->complex (Aggregate128)).a32+8].real (f64).a64                 #16
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 16(0x00000010).i32                                                    #16
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #16
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 16(0x00000010).i32                                                                #16
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #16
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 16(0x00000010).i32                                                                #16
   t144.up32->void   = CONVERT px.$$unnamed100 (up32->complex (Aggregate128)).a32                                                                           #18
                       CALL &_dispose.CDecl.Function(up32->void,i32,i32)->(void), t144.up32->void, 0.i32, 18(0x00000012).i32                                #18
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #18
                       RETURN $L4(T)                                        #19
$L4: (references=1)                                                         #19
                       EXITFUNCTION                                         #19
$L2: (references=0)                                                         #19
                       END                                                  #19
Writing With4.obj...

With4.p - 0 error(s), 0 warning(s).

Linking...

With4.exe - 0 error(s), 0 warning(s).

px =   6.000000  7.000000

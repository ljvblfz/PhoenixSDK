Compiling...
Pointer1.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 40(0x00000028).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 40(0x00000028).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Pointer1.CDecl.Function()->(void)               #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #3
                       START Pointer1(T)                                     #3
Pointer1: (references=1)                                                     #3
                       ENTERFUNCTION                                         #3
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 4.i32, &p.up32->link (up32->person (Aggregate64)), &pt.up32->link (up32->person (Aggregate64)), &ssn.up32->$$unnamed100 (UnmgdArr[integer (i32)]160), &i.up32->integer (i32)           #38
   tv149-.i32        = ASSIGN 0.i32                                         #15
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 16(0x00000010).i32, tv149-.i32, 0.i32, 15(0x0000000f).i32                                                                         #15
   [&ssn.up32->$$unnamed100 (UnmgdArr[integer (i32)]160)+tv149-.i32].integer (i32).a32 = ASSIGN 123456789(0x075bcd15).integer (i32)                         #15
   tv153-.i32        = ASSIGN 4.i32                                         #16
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 16(0x00000010).i32, tv153-.i32, 0.i32, 16(0x00000010).i32                                                                         #16
   [&ssn.up32->$$unnamed100 (UnmgdArr[integer (i32)]160)+tv153-.i32].integer (i32).a32 = ASSIGN 987654321(0x3ade68b1).integer (i32)                         #16
   tv157-.i32        = ASSIGN 8.i32                                         #17
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 16(0x00000010).i32, tv157-.i32, 0.i32, 17(0x00000011).i32                                                                         #17
   [&ssn.up32->$$unnamed100 (UnmgdArr[integer (i32)]160)+tv157-.i32].integer (i32).a32 = ASSIGN 567891234(0x21d95522).integer (i32)                         #17
   tv161-.i32        = ASSIGN 12(0x0000000c).i32                            #18
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 16(0x00000010).i32, tv161-.i32, 0.i32, 18(0x00000012).i32                                                                         #18
   [&ssn.up32->$$unnamed100 (UnmgdArr[integer (i32)]160)+tv161-.i32].integer (i32).a32 = ASSIGN 543219876(0x2060e0a4).integer (i32)                         #18
   tv165-.i32        = ASSIGN 16(0x00000010).i32                            #19
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 16(0x00000010).i32, tv165-.i32, 0.i32, 19(0x00000013).i32                                                                         #19
   [&ssn.up32->$$unnamed100 (UnmgdArr[integer (i32)]160)+tv165-.i32].integer (i32).a32 = ASSIGN 135791357(0x081802fd).integer (i32)                         #19
   p.link (up32->person (Aggregate64)).a32 = ASSIGN 0(0x00000000).null (null32->unk)                                                                        #21
   i.integer (i32).a32 = ASSIGN 5.integer (i32)                             #22
   tv166-.integer (i32) = ASSIGN i.integer (i32).a32                        #22
                       GOTO $L4                                             #22
$L4: (references=2)                                                         #22
   t167.i32          = COMPARE(GE) 0.integer (i32), tv166-.integer (i32)    #22
                       CONDITIONALBRANCH(True) t167.i32, $L5, $L6           #22
$L5: (references=1)                                                         #22
   tv170-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #22
                       GOTO $L7                                             #22
$L6: (references=1)                                                         #22
   tv170-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #22
                       GOTO $L7                                             #22
$L7: (references=2)                                                         #22
                       CONDITIONALBRANCH(True) tv170"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #22
$L9: (references=1)                                                         #22
   i.integer (i32).a32 = ASSIGN tv166-.integer (i32)                        #22
   t171.up32->void   = CALL &__new.CDecl.Function(i32,i32,i32)->(up32->void), 8.i32, 0.i32, 24(0x00000018).i32                                              #24
   pt.link (up32->person (Aggregate64)).a32 = CONVERT t171.up32->void       #24
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 5.i32, i.integer (i32).a32, 0.i32, 24(0x00000018).i32 #24
   t173.i32          = SUBTRACT i.integer (i32).a32, 1.i32                  #24
   t174.i32          = MULTIPLY 1.i32, t173.i32                             #24
   t175.i32          = ADD t174.i32, 0.i32                                  #24
   tv176-.i32        = MULTIPLY 4.i32, t175.i32                             #24
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 16(0x00000010).i32, tv176-.i32, 0.i32, 24(0x00000018).i32                                                                         #24
   [pt.link (up32->person (Aggregate64)).a32+4].integer (i32).a32 = ASSIGN [&ssn.up32->$$unnamed100 (UnmgdArr[integer (i32)]160)+tv176-.i32].integer (i32).a32 #24
   [pt.link (up32->person (Aggregate64)).a32].link (up32->person (Aggregate64)).a32 = ASSIGN p.link (up32->person (Aggregate64)).a32                        #25
   p.link (up32->person (Aggregate64)).a32 = ASSIGN pt.link (up32->person (Aggregate64)).a32                                                                #25
   t177.integer (i32) = SUBTRACT i.integer (i32).a32, 1.integer (i32)       #26
   tv166-.integer (i32) = ASSIGN t177.integer (i32)                         #26
                       GOTO $L4                                             #26
$L8: (references=1)                                                         #22
   pt.link (up32->person (Aggregate64)).a32 = ASSIGN p.link (up32->person (Aggregate64)).a32                                                                #28
                       GOTO $L10                                            #29
$L10: (references=2)                                                        #29
   t178.i32          = COMPARE(NE) pt.link (up32->person (Aggregate64)).a32, 0(0x00000000).null (null32->unk)                                               #29
                       CONDITIONALBRANCH(True) t178.i32, $L11, $L12         #29
$L11: (references=1)                                                        #29
   tv179-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #29
                       GOTO $L13                                            #29
$L12: (references=1)                                                        #29
   tv179-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #29
                       GOTO $L13                                            #29
$L13: (references=2)                                                        #29
                       CONDITIONALBRANCH(True) tv179"$$data"(Boolean (Enum32)+0).i32, $L14, $L15                                                            #29
$L14: (references=1)                                                        #29
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN [pt.link (up32->person (Aggregate64)).a32+4].integer (i32).a32                     #31
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 31(0x0000001f).i32                                                    #31
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #31
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 31(0x0000001f).i32                                                                #31
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #31
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 31(0x0000001f).i32                                                                #31
   pt.link (up32->person (Aggregate64)).a32 = ASSIGN [pt.link (up32->person (Aggregate64)).a32].link (up32->person (Aggregate64)).a32                       #31
                       GOTO $L10                                            #31
$L15: (references=1)                                                        #29
   pt.link (up32->person (Aggregate64)).a32 = ASSIGN p.link (up32->person (Aggregate64)).a32                                                                #35
                       GOTO $L16                                            #36
$L16: (references=2)                                                        #36
   t181.i32          = COMPARE(NE) pt.link (up32->person (Aggregate64)).a32, 0(0x00000000).null (null32->unk)                                               #36
                       CONDITIONALBRANCH(True) t181.i32, $L17, $L18         #36
$L17: (references=1)                                                        #36
   tv182-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #36
                       GOTO $L19                                            #36
$L18: (references=1)                                                        #36
   tv182-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #36
                       GOTO $L19                                            #36
$L19: (references=2)                                                        #36
                       CONDITIONALBRANCH(True) tv182"$$data"(Boolean (Enum32)+0).i32, $L20, $L21                                                            #36
$L20: (references=1)                                                        #36
   p.link (up32->person (Aggregate64)).a32 = ASSIGN pt.link (up32->person (Aggregate64)).a32                                                                #38
   pt.link (up32->person (Aggregate64)).a32 = ASSIGN [pt.link (up32->person (Aggregate64)).a32].link (up32->person (Aggregate64)).a32                       #38
   t183.up32->void   = CONVERT p.link (up32->person (Aggregate64)).a32      #38
                       CALL &_dispose.CDecl.Function(up32->void,i32,i32)->(void), t183.up32->void, 0.i32, 38(0x00000026).i32                                #38
                       GOTO $L16                                            #38
$L21: (references=1)                                                        #36
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #38
                       RETURN $L22(T)                                       #40
$L22: (references=1)                                                        #40
                       EXITFUNCTION                                         #40
$L2: (references=0)                                                         #40
                       END                                                  #40
Writing Pointer1.obj...

Pointer1.p - 0 error(s), 0 warning(s).

Linking...

Pointer1.exe - 0 error(s), 0 warning(s).

123456789
987654321
567891234
543219876
135791357

Compiling...
If1.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 35(0x00000023).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 35(0x00000023).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &If1.CDecl.Function()->(void)                    #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #3
                       START If1(T)                                          #3
If1: (references=1)                                                          #3
                       ENTERFUNCTION                                         #3
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 2.i32, 4.i32, &W.up32->integer (i32), &X.up32->integer (i32), &Y.up32->integer (i32), &iffile.up32->$$unnamed100 (Aggregate64)                                                                #33
   iffile"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32 = CALL &_file_open.CDecl.Function(up32->i8,i32,i32,i32)->(HANDLE (up32->void)), &$SG105.up32->char (i8), 0.i32, 0.i32, 5.i32                                #5
   t144.i32          = CALL &_file_get_int.CDecl.Function(HANDLE (up32->void),i32,i32)->(i32), iffile"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 5.i32                                                   #5
   [&iffile.up32->$$unnamed100 (Aggregate64)+4].integer (i32).a32 = ASSIGN t144.i32                                                                          #5
   W.integer (i32).a32 = ASSIGN 0.integer (i32)                              #6
   Y.integer (i32).a32 = ASSIGN 2.integer (i32)                              #6
                       CALL &_file_reset.CDecl.Function(HANDLE (up32->void),i32,i32)->(void), iffile"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 7.i32                                                    #7
   t145.i32          = CALL &_file_get_int.CDecl.Function(HANDLE (up32->void),i32,i32)->(i32), iffile"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 7.i32                                                   #7
   [&iffile.up32->$$unnamed100 (Aggregate64)+4].integer (i32).a32 = ASSIGN t145.i32                                                                          #7
                       GOTO $L4                                              #8
$L4: (references=2)                                                          #8
   t146.i32          = CALL &_file_eof.CDecl.Function(HANDLE (up32->void))->(i32), iffile"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32                                                                             #8
                       CONDITIONALBRANCH(True) t146.i32, $L5, $L6            #8
$L5: (references=1)                                                          #8
   tv149-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32                #8
                       GOTO $L7                                              #8
$L6: (references=1)                                                          #8
   tv149-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32               #8
                       GOTO $L7                                              #8
$L7: (references=2)                                                          #8
   tv149-.Boolean (Enum32) = ASSIGN tv149-.Boolean (Enum32)                  #8
   t150.i32          = NOT tv149"$$data"(Boolean (Enum32)+0).i32             #8
                       CONDITIONALBRANCH(True) t150.i32, $L8, $L9            #8
$L8: (references=1)                                                          #8
   tv151-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32                #8
                       GOTO $L10                                             #8
$L9: (references=1)                                                          #8
   tv151-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32               #8
                       GOTO $L10                                             #8
$L10: (references=2)                                                         #8
                       CONDITIONALBRANCH(True) tv151"$$data"(Boolean (Enum32)+0).i32, $L11, $L12                                                             #8
$L11: (references=1)                                                         #8
   X.integer (i32).a32 = ASSIGN iffile"$current_value"($$unnamed100 (Aggregate64)+32).integer (i32).a32                                                     #10
   t152.i32          = CALL &_file_get_int.CDecl.Function(HANDLE (up32->void),i32,i32)->(i32), iffile"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 10(0x0000000a).i32                                     #10
   [&iffile.up32->$$unnamed100 (Aggregate64)+4].integer (i32).a32 = ASSIGN t152.i32                                                                         #10
   t153.i32          = COMPARE(NE) W.integer (i32).a32, 0.integer (i32)     #12
                       CONDITIONALBRANCH(True) t153.i32, $L13, $L14         #12
$L13: (references=1)                                                        #12
   tv154-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #12
                       GOTO $L15                                            #12
$L14: (references=1)                                                        #12
   tv154-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #12
                       GOTO $L15                                            #12
$L15: (references=2)                                                        #12
   t155.i32          = COMPARE(EQ) Y.integer (i32).a32, 2.integer (i32)     #12
                       CONDITIONALBRANCH(True) t155.i32, $L16, $L17         #12
$L16: (references=1)                                                        #12
   tv156-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #12
                       GOTO $L18                                            #12
$L17: (references=1)                                                        #12
   tv156-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #12
                       GOTO $L18                                            #12
$L18: (references=2)                                                        #12
   t157.i32          = COMPARE(EQ) W.integer (i32).a32, 0.integer (i32)     #12
                       CONDITIONALBRANCH(True) t157.i32, $L19, $L20         #12
$L19: (references=1)                                                        #12
   tv158-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #12
                       GOTO $L21                                            #12
$L20: (references=1)                                                        #12
   tv158-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #12
                       GOTO $L21                                            #12
$L21: (references=2)                                                        #12
   t159.i32          = BITOR tv156"$$data"(Boolean (Enum32)+0).i32, tv158"$$data"(Boolean (Enum32)+0).i32                                                   #12
                       CONDITIONALBRANCH(True) t159.i32, $L22, $L23         #12
$L22: (references=1)                                                        #12
   tv160-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #12
                       GOTO $L24                                            #12
$L23: (references=1)                                                        #12
   tv160-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #12
                       GOTO $L24                                            #12
$L24: (references=2)                                                        #12
   t161.i32          = BITAND tv154"$$data"(Boolean (Enum32)+0).i32, tv160"$$data"(Boolean (Enum32)+0).i32                                                  #12
                       CONDITIONALBRANCH(True) t161.i32, $L25, $L26         #12
$L25: (references=1)                                                        #12
   tv162-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #12
                       GOTO $L27                                            #12
$L26: (references=1)                                                        #12
   tv162-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #12
                       GOTO $L27                                            #12
$L27: (references=2)                                                        #12
                       CONDITIONALBRANCH(True) tv162"$$data"(Boolean (Enum32)+0).i32, $L28, $L29                                                            #12
$L28: (references=1)                                                        #12
   [&output.up32->$stdfile (Aggregate2080)+4].Boolean (Enum32).a32 = ASSIGN true.Boolean (Enum32).a32                                                       #12
                       CALL &_file_put_bool.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4]"$$data"(Boolean (Enum32)+0).i32.a32, 0.i32, 12(0x0000000c).i32                                 #12
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #12
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 12(0x0000000c).i32                                                                #12
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #12
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 12(0x0000000c).i32                                                                #12
                       GOTO $L30                                            #12
$L29: (references=1)                                                        #12
   [&output.up32->$stdfile (Aggregate2080)+4].Boolean (Enum32).a32 = ASSIGN false.Boolean (Enum32).a32                                                      #13
                       CALL &_file_put_bool.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4]"$$data"(Boolean (Enum32)+0).i32.a32, 0.i32, 13(0x0000000d).i32                                 #13
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #13
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 13(0x0000000d).i32                                                                #13
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #13
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 13(0x0000000d).i32                                                                #13
                       GOTO $L30                                            #13
$L30: (references=2)                                                        #12
   t164.i32          = COMPARE(NE) W.integer (i32).a32, 0.integer (i32)     #15
                       CONDITIONALBRANCH(True) t164.i32, $L31, $L32         #15
$L31: (references=1)                                                        #15
   tv165-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #15
                       GOTO $L33                                            #15
$L32: (references=1)                                                        #15
   tv165-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #15
                       GOTO $L33                                            #15
$L33: (references=2)                                                        #15
   t166.i32          = COMPARE(EQ) Y.integer (i32).a32, 2.integer (i32)     #15
                       CONDITIONALBRANCH(True) t166.i32, $L34, $L35         #15
$L34: (references=1)                                                        #15
   tv167-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #15
                       GOTO $L36                                            #15
$L35: (references=1)                                                        #15
   tv167-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #15
                       GOTO $L36                                            #15
$L36: (references=2)                                                        #15
   t168.i32          = BITAND tv165"$$data"(Boolean (Enum32)+0).i32, tv167"$$data"(Boolean (Enum32)+0).i32                                                  #15
                       CONDITIONALBRANCH(True) t168.i32, $L37, $L38         #15
$L37: (references=1)                                                        #15
   tv169-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #15
                       GOTO $L39                                            #15
$L38: (references=1)                                                        #15
   tv169-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #15
                       GOTO $L39                                            #15
$L39: (references=2)                                                        #15
   t170.i32          = COMPARE(EQ) W.integer (i32).a32, 0.integer (i32)     #15
                       CONDITIONALBRANCH(True) t170.i32, $L40, $L41         #15
$L40: (references=1)                                                        #15
   tv171-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #15
                       GOTO $L42                                            #15
$L41: (references=1)                                                        #15
   tv171-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #15
                       GOTO $L42                                            #15
$L42: (references=2)                                                        #15
   t172.i32          = BITOR tv169"$$data"(Boolean (Enum32)+0).i32, tv171"$$data"(Boolean (Enum32)+0).i32                                                   #15
                       CONDITIONALBRANCH(True) t172.i32, $L43, $L44         #15
$L43: (references=1)                                                        #15
   tv173-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #15
                       GOTO $L45                                            #15
$L44: (references=1)                                                        #15
   tv173-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #15
                       GOTO $L45                                            #15
$L45: (references=2)                                                        #15
                       CONDITIONALBRANCH(True) tv173"$$data"(Boolean (Enum32)+0).i32, $L46, $L47                                                            #15
$L46: (references=1)                                                        #15
   [&output.up32->$stdfile (Aggregate2080)+4].Boolean (Enum32).a32 = ASSIGN true.Boolean (Enum32).a32                                                       #15
                       CALL &_file_put_bool.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4]"$$data"(Boolean (Enum32)+0).i32.a32, 0.i32, 15(0x0000000f).i32                                 #15
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #15
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 15(0x0000000f).i32                                                                #15
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #15
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 15(0x0000000f).i32                                                                #15
                       GOTO $L48                                            #15
$L47: (references=1)                                                        #15
   [&output.up32->$stdfile (Aggregate2080)+4].Boolean (Enum32).a32 = ASSIGN false.Boolean (Enum32).a32                                                      #16
                       CALL &_file_put_bool.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4]"$$data"(Boolean (Enum32)+0).i32.a32, 0.i32, 16(0x00000010).i32                                 #16
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #16
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 16(0x00000010).i32                                                                #16
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #16
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 16(0x00000010).i32                                                                #16
                       GOTO $L48                                            #16
$L48: (references=2)                                                        #15
   t174.i32          = COMPARE(LT) X.integer (i32).a32, 2.integer (i32)     #19
                       CONDITIONALBRANCH(True) t174.i32, $L49, $L50         #19
$L49: (references=1)                                                        #19
   tv175-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #19
                       GOTO $L51                                            #19
$L50: (references=1)                                                        #19
   tv175-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #19
                       GOTO $L51                                            #19
$L51: (references=2)                                                        #19
                       CONDITIONALBRANCH(True) tv175"$$data"(Boolean (Enum32)+0).i32, $L52, $L53                                                            #19
$L52: (references=1)                                                        #19
   t176.integer (i32) = ADD W.integer (i32).a32, X.integer (i32).a32        #21
   t177.integer (i32) = ADD t176.integer (i32), Y.integer (i32).a32         #21
   W.integer (i32).a32 = ASSIGN t177.integer (i32)                          #21
   t178.integer (i32) = ADD W.integer (i32).a32, X.integer (i32).a32        #21
   t179.integer (i32) = ADD t178.integer (i32), Y.integer (i32).a32         #21
   W.integer (i32).a32 = ASSIGN t179.integer (i32)                          #21
   t180.integer (i32) = ADD W.integer (i32).a32, X.integer (i32).a32        #22
   t181.integer (i32) = ADD t180.integer (i32), Y.integer (i32).a32         #22
   W.integer (i32).a32 = ASSIGN t181.integer (i32)                          #22
   t182.integer (i32) = ADD W.integer (i32).a32, X.integer (i32).a32        #22
   t183.integer (i32) = ADD t182.integer (i32), Y.integer (i32).a32         #22
   W.integer (i32).a32 = ASSIGN t183.integer (i32)                          #22
   t184.integer (i32) = ADD W.integer (i32).a32, X.integer (i32).a32        #23
   t185.integer (i32) = ADD t184.integer (i32), Y.integer (i32).a32         #24
   W.integer (i32).a32 = ASSIGN t185.integer (i32)                          #24
                       GOTO $L54                                            #24
$L53: (references=1)                                                        #19
   t186.i32          = COMPARE(LT) X.integer (i32).a32, 4.integer (i32)     #25
                       CONDITIONALBRANCH(True) t186.i32, $L55, $L56         #25
$L55: (references=1)                                                        #25
   tv187-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #25
                       GOTO $L57                                            #25
$L56: (references=1)                                                        #25
   tv187-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #25
                       GOTO $L57                                            #25
$L57: (references=2)                                                        #25
                       CONDITIONALBRANCH(True) tv187"$$data"(Boolean (Enum32)+0).i32, $L58, $L59                                                            #25
$L58: (references=1)                                                        #25
   W.integer (i32).a32 = ASSIGN 2.integer (i32)                             #25
                       GOTO $L60                                            #25
$L59: (references=1)                                                        #25
   W.integer (i32).a32 = ASSIGN 66(0x00000042).integer (i32)                #26
                       GOTO $L60                                            #26
$L60: (references=2)                                                        #25
                       GOTO $L54                                            #26
$L54: (references=2)                                                        #19
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN W.integer (i32).a32                                                                #28
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 28(0x0000001c).i32                                                    #28
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #28
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 28(0x0000001c).i32                                                                #28
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #28
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 28(0x0000001c).i32                                                                #28
   t188.i32          = COMPARE(LT) X.integer (i32).a32, 2.integer (i32)     #31
                       CONDITIONALBRANCH(True) t188.i32, $L61, $L62         #31
$L61: (references=1)                                                        #31
   tv189-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #31
                       GOTO $L63                                            #31
$L62: (references=1)                                                        #31
   tv189-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #31
                       GOTO $L63                                            #31
$L63: (references=2)                                                        #31
                       CONDITIONALBRANCH(True) tv189"$$data"(Boolean (Enum32)+0).i32, $L64, $L65                                                            #31
$L64: (references=1)                                                        #31
   t190.integer (i32) = ADD X.integer (i32).a32, Y.integer (i32).a32        #32
   W.integer (i32).a32 = ASSIGN t190.integer (i32)                          #32
                       GOTO $L66                                            #32
$L65: (references=1)                                                        #31
   W.integer (i32).a32 = ASSIGN 2.integer (i32)                             #32
                       GOTO $L66                                            #32
$L66: (references=2)                                                        #31
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN W.integer (i32).a32                                                                #33
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 33(0x00000021).i32                                                    #33
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #33
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 33(0x00000021).i32                                                                #33
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #33
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 33(0x00000021).i32                                                                #33
                       GOTO $L4                                             #33
$L12: (references=1)                                                         #8
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #33
                       RETURN $L67(T)                                       #35
$L67: (references=1)                                                        #35
                       EXITFUNCTION                                         #35
$L2: (references=0)                                                         #35
                       END                                                  #35
Writing If1.obj...

If1.p - 0 error(s), 0 warning(s).

Linking...

If1.exe - 0 error(s), 0 warning(s).

false
true
10
2
true
true
17
3
true
true
2
2
true
true
2
2
true
true
66
2
true
true
66
2
true
true
66
2
true
true
66
2
true
true
66
2
true
true
66
2

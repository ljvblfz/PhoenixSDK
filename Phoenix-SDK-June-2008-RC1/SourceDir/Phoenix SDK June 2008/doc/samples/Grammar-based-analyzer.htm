<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List href="Grammar-based-analyzer_files/filelist.xml">
<title>Grammar-Based Analyzer</title>
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:1627421319 -2147483648 8 0 66047 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	background:navy;
	font-size:10.0pt;
	font-family:Tahoma;
	mso-fareast-font-family:"Times New Roman";}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]-->
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<p class=MsoNormal align=center style='text-align:center;mso-outline-level:
1'><b><span style='font-size:14.0pt;font-family:Arial'>Grammar-Based Analyzer</span></b></p>

<p class=MsoNormal><b><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></b></p>

<p class=MsoNormal><b><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></b></p>

<p class=MsoNormal style='mso-outline-level:1'><b><span style='font-size:10.0pt;
font-family:Arial'>Sample Name</span></b><span style='font-size:10.0pt;
font-family:Arial'>: Grammar-based-analyzer</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>

<p class=MsoNormal style='mso-outline-level:1'><b><span style='font-size:10.0pt;
font-family:Arial'>Sample Category</span></b><span style='font-size:10.0pt;
font-family:Arial'>: Grammar-based front-end that generates ilasm output.</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>

<p class=MsoNormal><b><span style='font-size:10.0pt;font-family:Arial'>Description</span></b><span
style='font-size:10.0pt;font-family:Arial'>: Grammar-based-analyzer illustrates
how to write a front-end to a Phoenix application using lex and yacc.</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>

<p class=MsoNormal style='mso-outline-level:1'><b><span lang=FR
style='font-size:10.0pt;font-family:Arial;mso-ansi-language:FR'>Source Language</span></b><span
lang=FR style='font-size:10.0pt;font-family:Arial;mso-ansi-language:FR'>: Lex,
Yacc, C++/CLI</span><span lang=FR style='mso-ansi-language:FR'><o:p></o:p></span></p>

<p class=MsoNormal><span lang=FR style='font-size:10.0pt;font-family:Arial;
mso-ansi-language:FR'>&nbsp;</span><span lang=FR style='mso-ansi-language:FR'><o:p></o:p></span></p>

<p class=MsoNormal style='mso-outline-level:1'><b><span style='font-size:10.0pt;
font-family:Arial'>Sample Location</span></b><span style='font-size:10.0pt;
font-family:Arial'>: <a href="../../Samples/grammar-based-analyzer/cpp">Samples\grammar-based-analyzer\cpp</a>
</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>

<p class=MsoNormal><b><span style='font-size:10.0pt;font-family:Arial'>Quick
start</span></b><span style='font-size:10.0pt;font-family:Arial'>: Edit the makefile
if necessary to make it invoke the version of yacc installed in the
environment. Make sure flex is on the command path. Then, from an RDK command
prompt:</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>

<p class=MsoNormal><span class=GramE><span style='font-size:10.0pt;font-family:
"Courier New"'>nmake</span></span><span style='font-size:10.0pt;font-family:
"Courier New"'> test1 test2</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>This will
create the executable FrontEnd.exe and launch it on the test input Hanoi.min to
create an ilasm file which then gets assembled into Hanoi.exe. The target test1
will then run Hanoi.exe, showing the solution of the Towers of Hanoi for 4
disks. In turn, the target test2 will input Hanoi.exe into sample mtrace and
run the output, Hanoi-mtrace.exe, which is an instrumented version of Hanoi.exe
that will display its output interlarded with execution traces. </span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>

<p class=MsoNormal><b><span style='font-size:10.0pt;font-family:Arial'>Detailed
Description</span></b><span style='font-size:10.0pt;font-family:Arial'>:
Grammar-based-analyzer demonstrates how one can write a front-end for an
arbitrary language by describing the language in Lex and Yacc and outputting
ildasm, which can later be pipelined into a Phoenix instrumenter, analyzer, or
optimizer, as shown in test2. </span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>Yacc
actions build CLI objects; and symbol and type management in the front-end is
carried out with the help of Phoenix data types, such as ModuleUnit, FuncUnit,
Syms::Table and ExtensionObject.</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>

<p class=MsoNormal style='mso-outline-level:1'><span style='font-size:10.0pt;
font-family:Arial'>A Visual Studio solution is provided to drive the makefile
from the VS IDE.</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>

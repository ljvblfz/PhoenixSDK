Compiling...
Function8-1.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 6.i32                                    #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 6.i32                                        #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Function8.CDecl.Function()->(void)              #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #3
                       START Function8(T)                                    #3
Function8: (references=1)                                                    #3
                       ENTERFUNCTION                                         #3
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 0.i32                   #5
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = CALL &e.CDecl.Function(integer (i32),integer (i32),integer (i32))->(integer (i32)), 1.integer (i32), 2.integer (i32), 3.integer (i32)                                             #5
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 5.i32                                                                  #5
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8     #5
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 5.i32 #5
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8     #5
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 5.i32 #5
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                    #5
                       RETURN $L4(T)                                         #6
$L4: (references=1)                                                          #6
                       EXITFUNCTION                                          #6
$L2: (references=0)                                                          #6
                       END                                                   #6
Writing Function8-1.obj...

Function8-1.p - 0 error(s), 0 warning(s).
Compiling...
Function8-2.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #9
                       START e(T)                                            #9
e: (references=1)                                                            #9
   x.integer (i32).a32, y.integer (i32).a32, z.integer (i32).a32 = ENTERFUNCTION                                                                             #9
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG103.up32->char (i8), 1.i32, 1.i32, 4.i32, &x.up32->integer (i32), &y.up32->integer (i32), &z.up32->integer (i32), &e.up32->integer (i32)  #11
   t145.integer (i32) = ADD x.integer (i32).a32, y.integer (i32).a32        #11
   e.integer (i32).a32 = ADD t145.integer (i32), z.integer (i32).a32        #11
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 1.i32, 1.i32                                                                   #11
                       RETURN e.integer (i32).a32, $L4(T)                   #11
$L4: (references=1)                                                         #11
                       EXITFUNCTION                                         #11
$L2: (references=0)                                                         #11
                       END                                                  #11
Writing Function8-2.obj...

Function8-2.p - 0 error(s), 0 warning(s).

Linking...

Function8.exe - 0 error(s), 0 warning(s).

6

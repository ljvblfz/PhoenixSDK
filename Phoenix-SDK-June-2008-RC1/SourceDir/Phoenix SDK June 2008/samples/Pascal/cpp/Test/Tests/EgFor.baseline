Compiling...
EgFor.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 20(0x00000014).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 20(0x00000014).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &EgFor.CDecl.Function()->(void)                  #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #4
                       START EgFor(T)                                        #4
EgFor: (references=1)                                                        #4
                       ENTERFUNCTION                                         #4
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 2.i32, 4.i32, &i.up32->integer (i32), &n.up32->integer (i32), &h.up32->real (f64), &eg.up32->$$unnamed100 (Aggregate64)                                                                       #19
   eg"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32 = CALL &_file_open.CDecl.Function(up32->i8,i32,i32,i32)->(HANDLE (up32->void)), &$SG105.up32->char (i8), 1.i32, 0.i32, 7.i32                                    #7
   t144.i32          = CALL &_file_get_int.CDecl.Function(HANDLE (up32->void),i32,i32)->(i32), eg"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 7.i32                                                       #7
   [&eg.up32->$$unnamed100 (Aggregate64)+4].integer (i32).a32 = ASSIGN t144.i32 #7
   t145.i32          = CALL &_file_eof.CDecl.Function(HANDLE (up32->void))->(i32), eg"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32 #9
                       CONDITIONALBRANCH(True) t145.i32, $L4, $L5            #9
$L4: (references=1)                                                          #9
   tv148-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32                #9
                       GOTO $L6                                              #9
$L5: (references=1)                                                          #9
   tv148-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32               #9
                       GOTO $L6                                              #9
$L6: (references=2)                                                          #9
   tv148-.Boolean (Enum32) = ASSIGN tv148-.Boolean (Enum32)                  #9
                       CONDITIONALBRANCH(True) tv148"$$data"(Boolean (Enum32)+0).i32, $L7, $L8                                                               #9
$L7: (references=1)                                                          #9
                       CALL &_file_rewrite.CDecl.Function(HANDLE (up32->void),i32,i32)->(void), eg"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 11(0x0000000b).i32                                        #11
   eg"$current_value"($$unnamed100 (Aggregate64)+32).integer (i32).a32 = ASSIGN 10(0x0000000a).integer (i32)                                                #11
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), eg"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32, [&eg.up32->$$unnamed100 (Aggregate64)+4].integer (i32).a32, 0.i32, 11(0x0000000b).i32                                                        #11
                       GOTO $L8                                             #11
$L8: (references=2)                                                          #9
                       CALL &_file_reset.CDecl.Function(HANDLE (up32->void),i32,i32)->(void), eg"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 14(0x0000000e).i32                                          #14
   t149.i32          = CALL &_file_get_int.CDecl.Function(HANDLE (up32->void),i32,i32)->(i32), eg"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 14(0x0000000e).i32                                         #14
   [&eg.up32->$$unnamed100 (Aggregate64)+4].integer (i32).a32 = ASSIGN t149.i32 #14
   n.integer (i32).a32 = ASSIGN eg"$current_value"($$unnamed100 (Aggregate64)+32).integer (i32).a32                                                         #15
   t150.i32          = CALL &_file_get_int.CDecl.Function(HANDLE (up32->void),i32,i32)->(i32), eg"$runtime_handle"($$unnamed100 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 15(0x0000000f).i32                                         #15
   [&eg.up32->$$unnamed100 (Aggregate64)+4].integer (i32).a32 = ASSIGN t150.i32 #15
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN n.integer (i32).a32                                                                #16
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 16(0x00000010).i32                                                    #16
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                      #16
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 16(0x00000010).i32                                                         #16
   h.real (f64).a64  = ASSIGN 0.real (f64)                                  #17
   i.integer (i32).a32 = ASSIGN n.integer (i32).a32                         #18
   tv152-.integer (i32) = ASSIGN i.integer (i32).a32                        #18
                       GOTO $L9                                             #18
$L9: (references=2)                                                         #18
   t153.i32          = COMPARE(LT) tv152-.integer (i32), 1.integer (i32)    #18
                       CONDITIONALBRANCH(True) t153.i32, $L10, $L11         #18
$L10: (references=1)                                                        #18
   tv154-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #18
                       GOTO $L12                                            #18
$L11: (references=1)                                                        #18
   tv154-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #18
                       GOTO $L12                                            #18
$L12: (references=2)                                                        #18
                       CONDITIONALBRANCH(True) tv154"$$data"(Boolean (Enum32)+0).i32, $L13, $L14                                                            #18
$L14: (references=1)                                                        #18
   i.integer (i32).a32 = ASSIGN tv152-.integer (i32)                        #18
   t155.real (f64)   = CONVERT 1.integer (i32)                              #18
   t156.real (f64)   = CONVERT i.integer (i32).a32                          #18
   t157.real (f64)   = DIVIDE t155.real (f64), t156.real (f64)              #18
   t158.real (f64)   = ADD h.real (f64).a64, t157.real (f64)                #18
   h.real (f64).a64  = ASSIGN t158.real (f64)                               #18
   t159.integer (i32) = SUBTRACT i.integer (i32).a32, 1.integer (i32)       #18
   tv152-.integer (i32) = ASSIGN t159.integer (i32)                         #18
                       GOTO $L9                                             #18
$L13: (references=1)                                                        #18
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN h.real (f64).a64                                                                      #19
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 19(0x00000013).i32                                                    #19
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #19
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 19(0x00000013).i32                                                                #19
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #19
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 19(0x00000013).i32                                                                #19
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #19
                       RETURN $L15(T)                                       #20
$L15: (references=1)                                                        #20
                       EXITFUNCTION                                         #20
$L2: (references=0)                                                         #20
                       END                                                  #20
Writing EgFor.obj...

EgFor.p - 0 error(s), 0 warning(s).

Linking...

EgFor.exe - 0 error(s), 0 warning(s).

10 2.928968

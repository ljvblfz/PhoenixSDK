Compiling...
Parameters.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 14(0x0000000e).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 14(0x0000000e).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Parameters.CDecl.Function()->(void)             #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #4
                       START Parameters(T)                                   #4
Parameters: (references=1)                                                   #4
                       ENTERFUNCTION                                         #4
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 2.i32, &a.up32->integer (i32), &b.up32->integer (i32)                                                  #13
   a.integer (i32).a32 = ASSIGN 0.integer (i32)                             #11
   b.integer (i32).a32 = ASSIGN 0.integer (i32)                             #11
                       CALL &h.CDecl.Function(integer (i32),up32->integer (i32))->(void), a.integer (i32).a32, &b.up32->integer (i32)                       #12
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = ASSIGN a.integer (i32).a32                                                                       #13
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).integer (i32).a32, 0.i32, 13(0x0000000d).i32                                                           #13
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 32(0x20).char (i8) #13
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 13(0x0000000d).i32                                                                #13
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = ASSIGN b.integer (i32).a32                                                                       #13
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).integer (i32).a32, 0.i32, 13(0x0000000d).i32                                                           #13
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 13(0x0d).i8    #13
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 13(0x0000000d).i32                                                                #13
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 10(0x0a).i8    #13
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 13(0x0000000d).i32                                                                #13
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #13
                       RETURN $L4(T)                                        #14
$L4: (references=1)                                                         #14
                       EXITFUNCTION                                         #14
$L2: (references=0)                                                         #14
                       END                                                  #14

IR after Type Checker (control chktype)

Function Unit #3
$L1: (references=0)                                                          #7
                       START h(T)                                            #7
h: (references=1)                                                            #7
   x.integer (i32).a32, y.up32->integer (i32).a32 = ENTERFUNCTION            #7
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 3.i32, 2.i32, &x.up32->integer (i32), &y.up32->up32->integer (i32)                                             #9
   x.integer (i32).a32 = ADD 1.integer (i32), x.integer (i32).a32            #8
   t140.integer (i32) = ADD [y.up32->integer (i32).a32].integer (i32).a32, 1.integer (i32)                                                                   #8
   [y.up32->integer (i32).a32].integer (i32).a32 = ASSIGN t140.integer (i32) #8
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN x.integer (i32).a32                                                                 #9
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 9.i32                                                                  #9
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                       #9
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 9.i32                                                                       #9
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN [y.up32->integer (i32).a32].integer (i32).a32                                       #9
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 9.i32                                                                  #9
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8     #9
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 9.i32 #9
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8     #9
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 9.i32 #9
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 3.i32                                                                    #9
                       RETURN $L4(T)                                        #10
$L4: (references=1)                                                         #10
                       EXITFUNCTION                                         #10
$L2: (references=0)                                                         #10
                       END                                                  #10
Writing Parameters.obj...

Parameters.p - 0 error(s), 0 warning(s).

Linking...

Parameters.exe - 0 error(s), 0 warning(s).

1 1
0 1

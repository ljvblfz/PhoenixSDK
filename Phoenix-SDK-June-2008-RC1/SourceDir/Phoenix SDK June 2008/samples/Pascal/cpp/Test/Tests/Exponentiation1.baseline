Compiling...
Exponentiation1.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 22(0x00000016).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 22(0x00000016).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Exponentiation1.CDecl.Function()->(void)        #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #4
                       START Exponentiation1(T)                              #4
Exponentiation1: (references=1)                                              #4
                       ENTERFUNCTION                                         #4
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 2.i32, 7.i32, &e.up32->integer (i32), &y.up32->integer (i32), &u.up32->real (f64), &x.up32->real (f64), &t.up32->real (f64), &z.up32->real (f64), &exp.up32->$$unnamed100 (Aggregate96)       #21
   exp"$runtime_handle"($$unnamed100 (Aggregate96)+0).HANDLE (up32->void).a32 = CALL &_file_open.CDecl.Function(up32->i8,i32,i32,i32)->(HANDLE (up32->void)), &$SG105.up32->char (i8), 0.i32, 0.i32, 7.i32                                   #7
   t147.f64          = CALL &_file_get_double.CDecl.Function(HANDLE (up32->void),i32,i32)->(f64), exp"$runtime_handle"($$unnamed100 (Aggregate96)+0).HANDLE (up32->void).a32, 0.i32, 7.i32                                                   #7
   [&exp.up32->$$unnamed100 (Aggregate96)+4].real (f64).a64 = ASSIGN t147.f64 #7
                       CALL &_file_reset.CDecl.Function(HANDLE (up32->void),i32,i32)->(void), exp"$runtime_handle"($$unnamed100 (Aggregate96)+0).HANDLE (up32->void).a32, 0.i32, 9.i32                                                       #9
   t148.f64          = CALL &_file_get_double.CDecl.Function(HANDLE (up32->void),i32,i32)->(f64), exp"$runtime_handle"($$unnamed100 (Aggregate96)+0).HANDLE (up32->void).a32, 0.i32, 9.i32                                                   #9
   [&exp.up32->$$unnamed100 (Aggregate96)+4].real (f64).a64 = ASSIGN t148.f64 #9
   x.real (f64).a64  = ASSIGN exp"$current_value"($$unnamed100 (Aggregate96)+32).real (f64).a64                                                             #10
   t149.f64          = CALL &_file_get_double.CDecl.Function(HANDLE (up32->void),i32,i32)->(f64), exp"$runtime_handle"($$unnamed100 (Aggregate96)+0).HANDLE (up32->void).a32, 0.i32, 10(0x0000000a).i32                                     #10
   [&exp.up32->$$unnamed100 (Aggregate96)+4].real (f64).a64 = ASSIGN t149.f64 #10
   t.real (f64).a64  = ASSIGN exp"$current_value"($$unnamed100 (Aggregate96)+32).real (f64).a64                                                             #10
   t150.f64          = CALL &_file_get_double.CDecl.Function(HANDLE (up32->void),i32,i32)->(f64), exp"$runtime_handle"($$unnamed100 (Aggregate96)+0).HANDLE (up32->void).a32, 0.i32, 10(0x0000000a).i32                                     #10
   [&exp.up32->$$unnamed100 (Aggregate96)+4].real (f64).a64 = ASSIGN t150.f64 #10
   t151.i32          = CALL &_round.CDecl.Function(f64)->(i32), t.real (f64).a64                                                                            #11
   y.integer (i32).a32 = ASSIGN t151.i32                                    #11
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN x.real (f64).a64                                                                      #12
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 12(0x0000000c).i32                                                    #12
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 9.char (i8) #12
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 12(0x0000000c).i32                                                         #12
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN y.integer (i32).a32                                                                #12
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 12(0x0000000c).i32                                                    #12
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                      #12
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 12(0x0000000c).i32                                                         #12
   z.real (f64).a64  = ASSIGN 1.real (f64)                                  #13
   u.real (f64).a64  = ASSIGN x.real (f64).a64                              #13
   e.integer (i32).a32 = ASSIGN y.integer (i32).a32                         #13
                       GOTO $L4                                             #14
$L4: (references=2)                                                         #14
   t153.i32          = COMPARE(GT) e.integer (i32).a32, 0.integer (i32)     #14
                       CONDITIONALBRANCH(True) t153.i32, $L5, $L6           #14
$L5: (references=1)                                                         #14
   tv156-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #14
                       GOTO $L7                                             #14
$L6: (references=1)                                                         #14
   tv156-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #14
                       GOTO $L7                                             #14
$L7: (references=2)                                                         #14
                       CONDITIONALBRANCH(True) tv156"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #14
$L8: (references=1)                                                         #14
                       GOTO $L10                                            #16
$L10: (references=2)                                                        #16
   t157.i32          = CALL &_odd.CDecl.Function(i32)->(i32), e.integer (i32).a32                                                                           #16
                       CONDITIONALBRANCH(True) t157.i32, $L11, $L12         #16
$L11: (references=1)                                                        #16
   tv158-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #16
                       GOTO $L13                                            #16
$L12: (references=1)                                                        #16
   tv158-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #16
                       GOTO $L13                                            #16
$L13: (references=2)                                                        #16
   tv158-.Boolean (Enum32) = ASSIGN tv158-.Boolean (Enum32)                 #16
   t159.i32          = NOT tv158"$$data"(Boolean (Enum32)+0).i32            #16
                       CONDITIONALBRANCH(True) t159.i32, $L14, $L15         #16
$L14: (references=1)                                                        #16
   tv160-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #16
                       GOTO $L16                                            #16
$L15: (references=1)                                                        #16
   tv160-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #16
                       GOTO $L16                                            #16
$L16: (references=2)                                                        #16
                       CONDITIONALBRANCH(True) tv160"$$data"(Boolean (Enum32)+0).i32, $L17, $L18                                                            #16
$L17: (references=1)                                                        #16
   t161.integer (i32) = DIVIDE e.integer (i32).a32, 2.integer (i32)         #17
   e.integer (i32).a32 = ASSIGN t161.integer (i32)                          #17
   t162.f64          = CALL &_sqrf.CDecl.Function(f64)->(f64), u.real (f64).a64 #17
   u.real (f64).a64  = ASSIGN t162.f64                                      #17
                       GOTO $L10                                            #17
$L18: (references=1)                                                        #16
   t163.integer (i32) = SUBTRACT e.integer (i32).a32, 1.integer (i32)       #19
   e.integer (i32).a32 = ASSIGN t163.integer (i32)                          #19
   t164.real (f64)   = MULTIPLY u.real (f64).a64, z.real (f64).a64          #19
   z.real (f64).a64  = ASSIGN t164.real (f64)                               #19
                       GOTO $L4                                             #20
$L9: (references=1)                                                         #14
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN z.real (f64).a64                                                                      #21
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 21(0x00000015).i32                                                    #21
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #21
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 21(0x00000015).i32                                                                #21
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #21
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 21(0x00000015).i32                                                                #21
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #21
                       RETURN $L19(T)                                       #22
$L19: (references=1)                                                        #22
                       EXITFUNCTION                                         #22
$L2: (references=0)                                                         #22
                       END                                                  #22
Writing Exponentiation1.obj...

Exponentiation1.p - 0 error(s), 0 warning(s).

Linking...

Exponentiation1.exe - 0 error(s), 0 warning(s).

2.000000	7 128.000000

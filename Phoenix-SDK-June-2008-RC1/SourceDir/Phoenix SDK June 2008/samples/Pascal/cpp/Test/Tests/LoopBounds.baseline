Compiling...
LoopBounds.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 35(0x00000023).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 35(0x00000023).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &LoopBounds.CDecl.Function()->(void)             #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #3
                       START LoopBounds(T)                                   #3
LoopBounds: (references=1)                                                   #3
                       ENTERFUNCTION                                         #3
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 3.i32, &max.up32->integer (i32), &i.up32->$$unnamed100 (i32), &n.up32->integer (i32)                   #34
   max.integer (i32).a32 = ASSIGN 63(0x0000003f).integer (i32)               #5
   n.integer (i32).a32 = ASSIGN 0.integer (i32)                              #8
   i.$$unnamed100 (i32).a32 = ASSIGN 1.integer (i32)                        #12
   tv141-.integer (i32) = ASSIGN i.$$unnamed100 (i32).a32                   #12
                       GOTO $L4                                             #12
$L4: (references=2)                                                         #12
   t142.i32          = COMPARE(LT) max.integer (i32).a32, tv141-.integer (i32) #12
                       CONDITIONALBRANCH(True) t142.i32, $L5, $L6           #12
$L5: (references=1)                                                         #12
   tv145-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #12
                       GOTO $L7                                             #12
$L6: (references=1)                                                         #12
   tv145-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #12
                       GOTO $L7                                             #12
$L7: (references=2)                                                         #12
                       CONDITIONALBRANCH(True) tv145"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #12
$L9: (references=1)                                                         #12
   i.$$unnamed100 (i32).a32 = ASSIGN tv141-.integer (i32)                   #12
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 63(0x0000003f).i32, i.$$unnamed100 (i32).a32, 0.i32, 13(0x0000000d).i32                                                           #12
   n.integer (i32).a32 = ADD i.$$unnamed100 (i32).a32, n.integer (i32).a32  #13
   t147.integer (i32) = ADD i.$$unnamed100 (i32).a32, 1.integer (i32)       #13
   tv141-.integer (i32) = ASSIGN t147.integer (i32)                         #13
                       GOTO $L4                                             #13
$L8: (references=1)                                                         #12
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN n.integer (i32).a32                                                                #15
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 15(0x0000000f).i32                                                    #15
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #15
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 15(0x0000000f).i32                                                                #15
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #15
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 15(0x0000000f).i32                                                                #15
   n.integer (i32).a32 = ASSIGN 0.integer (i32)                             #16
   i.$$unnamed100 (i32).a32 = ASSIGN 1.integer (i32)                        #26
                       GOTO $L10                                            #27
$L10: (references=2)                                                        #27
   t149.i32          = COMPARE(LT) i.$$unnamed100 (i32).a32, max.integer (i32).a32                                                                          #27
                       CONDITIONALBRANCH(True) t149.i32, $L11, $L12         #27
$L11: (references=1)                                                        #27
   tv150-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #27
                       GOTO $L13                                            #27
$L12: (references=1)                                                        #27
   tv150-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #27
                       GOTO $L13                                            #27
$L13: (references=2)                                                        #27
                       CONDITIONALBRANCH(True) tv150"$$data"(Boolean (Enum32)+0).i32, $L14, $L15                                                            #27
$L14: (references=1)                                                        #27
   t151.integer (i32) = ADD n.integer (i32).a32, i.$$unnamed100 (i32).a32   #29
   n.integer (i32).a32 = ASSIGN t151.integer (i32)                          #29
   t152.integer (i32) = ADD i.$$unnamed100 (i32).a32, 1.integer (i32)       #30
   i.$$unnamed100 (i32).a32 = ASSIGN t152.integer (i32)                     #30
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 63(0x0000003f).i32, i.$$unnamed100 (i32).a32, 0.i32, 31(0x0000001f).i32                                                           #30
                       GOTO $L10                                            #30
$L15: (references=1)                                                        #27
   t153.integer (i32) = ADD n.integer (i32).a32, max.integer (i32).a32      #32
   n.integer (i32).a32 = ASSIGN t153.integer (i32)                          #32
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN n.integer (i32).a32                                                                #34
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 34(0x00000022).i32                                                    #34
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #34
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 34(0x00000022).i32                                                                #34
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #34
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 34(0x00000022).i32                                                                #34
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #34
                       RETURN $L16(T)                                       #35
$L16: (references=1)                                                        #35
                       EXITFUNCTION                                         #35
$L2: (references=0)                                                         #35
                       END                                                  #35
Writing LoopBounds.obj...

LoopBounds.p - 0 error(s), 0 warning(s).

Linking...

LoopBounds.exe - 0 error(s), 0 warning(s).

2016
2016

Compiling...
Postfix.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 42(0x0000002a).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 42(0x0000002a).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Postfix.CDecl.Function()->(void)                #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #4
                       START Postfix(T)                                      #4
Postfix: (references=1)                                                      #4
                       ENTERFUNCTION                                         #4
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 2.i32, 2.i32, &ch.up32->char (i8), &postfix.up32->text (Aggregate40)                                          #41
   postfix"$runtime_handle"(text (Aggregate40)+0).HANDLE (up32->void).a32 = CALL &_file_open.CDecl.Function(up32->i8,i32,i32,i32)->(HANDLE (up32->void)), &$SG105.up32->char (i8), 0.i32, 0.i32, 6.i32                                       #6
   t141.i8           = CALL &_file_get_char.CDecl.Function(HANDLE (up32->void),i32,i32)->(i8), postfix"$runtime_handle"(text (Aggregate40)+0).HANDLE (up32->void).a32, 0.i32, 6.i32                                                          #6
   [&postfix.up32->text (Aggregate40)+4].char (i8).a8 = ASSIGN t141.i8       #6
                       CALL &find.CDecl.Function()->(void)                  #37
                       GOTO $L4                                             #42
$L4: (references=2)                                                         #42
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                      #38
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 38(0x00000026).i32                                                         #38
                       CALL &expression.CDecl.Function()->(void)            #39
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #41
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 41(0x00000029).i32                                                         #41
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #41
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 41(0x00000029).i32                                                         #41
   t143.i32          = COMPARE(EQ) ch.char (i8).a8, 46(0x2e).char (i8)      #41
                       CONDITIONALBRANCH(True) t143.i32, $L5, $L6           #41
$L5: (references=1)                                                         #41
   tv146-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #41
                       GOTO $L7                                             #41
$L6: (references=1)                                                         #41
   tv146-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #41
                       GOTO $L7                                             #41
$L7: (references=2)                                                         #41
                       CONDITIONALBRANCH(True) tv146"$$data"(Boolean (Enum32)+0).i32, $L8, $L4                                                              #41
$L8: (references=1)                                                         #41
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #41
                       RETURN $L9(T)                                        #42
$L9: (references=1)                                                         #42
                       EXITFUNCTION                                         #42
$L2: (references=0)                                                         #42
                       END                                                  #42

IR after Type Checker (control chktype)

Function Unit #4
$L1: (references=0)                                                         #13
                       START expression(T)                                  #13
expression: (references=1)                                                  #13
                       ENTERFUNCTION                                        #13
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 4.i32, 1.i32, &op.up32->char (i8) #33
                       CALL &term.CDecl.Function()->(void)                  #31
                       GOTO $L4                                             #32
$L4: (references=2)                                                         #32
   t138.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                            #32
   t139.i32          = COMPARE(EQ) 43(0x2b).char (i8), [t138.up32->void].char (i8).a8                                                                       #32
                       CONDITIONALBRANCH(True) t139.i32, $L5, $L6           #32
$L5: (references=1)                                                         #32
   tv142-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #32
                       GOTO $L7                                             #32
$L6: (references=1)                                                         #32
   tv142-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #32
                       GOTO $L7                                             #32
$L7: (references=2)                                                         #32
   t143.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                            #32
   t144.i32          = COMPARE(EQ) 45(0x2d).char (i8), [t143.up32->void].char (i8).a8                                                                       #32
                       CONDITIONALBRANCH(True) t144.i32, $L8, $L9           #32
$L8: (references=1)                                                         #32
   tv145-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #32
                       GOTO $L10                                            #32
$L9: (references=1)                                                         #32
   tv145-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #32
                       GOTO $L10                                            #32
$L10: (references=2)                                                        #32
   t146.i32          = BITOR tv142"$$data"(Boolean (Enum32)+0).i32, tv145"$$data"(Boolean (Enum32)+0).i32                                                   #32
                       CONDITIONALBRANCH(True) t146.i32, $L11, $L12         #32
$L11: (references=1)                                                        #32
   tv147-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #32
                       GOTO $L13                                            #32
$L12: (references=1)                                                        #32
   tv147-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #32
                       GOTO $L13                                            #32
$L13: (references=2)                                                        #32
                       CONDITIONALBRANCH(True) tv147"$$data"(Boolean (Enum32)+0).i32, $L14, $L15                                                            #32
$L14: (references=1)                                                        #32
   t148.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                            #33
   op.char (i8).a8   = ASSIGN [t148.up32->void].char (i8).a8                #33
                       CALL &find.CDecl.Function()->(void)                  #33
                       CALL &term.CDecl.Function()->(void)                  #33
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN op.char (i8).a8 #33
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 33(0x00000021).i32                                                                #33
                       GOTO $L4                                             #33
$L15: (references=1)                                                        #32
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 4.i32                                                                   #33
                       RETURN $L16(T)                                       #35
$L16: (references=1)                                                        #35
                       EXITFUNCTION                                         #35
$L2: (references=0)                                                         #35
                       END                                                  #35

IR after Type Checker (control chktype)

Function Unit #5
$L1: (references=0)                                                         #16
                       START term(T)                                        #16
term: (references=1)                                                        #16
                       ENTERFUNCTION                                        #16
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 5.i32, 0.i32                  #27
                       CALL &factor.CDecl.Function()->(void)                #25
                       GOTO $L4                                             #26
$L4: (references=2)                                                         #26
   t137.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                            #26
   t138.i32          = COMPARE(EQ) 42(0x2a).char (i8), [t137.up32->void].char (i8).a8                                                                       #26
                       CONDITIONALBRANCH(True) t138.i32, $L5, $L6           #26
$L5: (references=1)                                                         #26
   tv141-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #26
                       GOTO $L7                                             #26
$L6: (references=1)                                                         #26
   tv141-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #26
                       GOTO $L7                                             #26
$L7: (references=2)                                                         #26
                       CONDITIONALBRANCH(True) tv141"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #26
$L8: (references=1)                                                         #26
                       CALL &find.CDecl.Function()->(void)                  #27
                       CALL &factor.CDecl.Function()->(void)                #27
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 42(0x2a).char (i8) #27
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 27(0x0000001b).i32                                                                #27
                       GOTO $L4                                             #27
$L9: (references=1)                                                         #26
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 5.i32                                                                   #27
                       RETURN $L10(T)                                       #29
$L10: (references=1)                                                        #29
                       EXITFUNCTION                                         #29
$L2: (references=0)                                                         #29
                       END                                                  #29

IR after Type Checker (control chktype)

Function Unit #6
$L1: (references=0)                                                         #18
                       START factor(T)                                      #18
factor: (references=1)                                                      #18
                       ENTERFUNCTION                                        #18
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 6.i32, 0.i32                  #23
   t137.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                            #19
   t138.i32          = COMPARE(EQ) 40(0x28).char (i8), [t137.up32->void].char (i8).a8                                                                       #19
                       CONDITIONALBRANCH(True) t138.i32, $L4, $L5           #19
$L4: (references=1)                                                         #19
   tv141-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #19
                       GOTO $L6                                             #19
$L5: (references=1)                                                         #19
   tv141-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #19
                       GOTO $L6                                             #19
$L6: (references=2)                                                         #19
                       CONDITIONALBRANCH(True) tv141"$$data"(Boolean (Enum32)+0).i32, $L7, $L8                                                              #19
$L7: (references=1)                                                         #19
                       CALL &find.CDecl.Function()->(void)                  #20
                       CALL &expression.CDecl.Function()->(void)            #20
                       GOTO $L9                                             #21
$L8: (references=1)                                                         #19
   t142.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                            #21
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN [t142.up32->void].char (i8).a8                                                                 #21
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 21(0x00000015).i32                                                                #21
                       GOTO $L9                                             #21
$L9: (references=2)                                                         #19
                       CALL &find.CDecl.Function()->(void)                  #23
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 6.i32                                                                   #23
                       RETURN $L10(T)                                       #23
$L10: (references=1)                                                        #23
                       EXITFUNCTION                                         #23
$L2: (references=0)                                                         #23
                       END                                                  #23

IR after Type Checker (control chktype)

Function Unit #3
$L1: (references=0)                                                          #8
                       START find(T)                                         #8
find: (references=1)                                                         #8
                       ENTERFUNCTION                                         #8
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 3.i32, 0.i32                  #10
                       GOTO $L4                                             #11
$L4: (references=2)                                                         #11
   tv137-.up32->void = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 1.i32                                             #9
   t138.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                             #9
   [t138.up32->void].char (i8).a8 = ASSIGN [tv137-.up32->void]"$current_value"(text (Aggregate40)+32).char (i8).a8                                           #9
   [tv137-.up32->void+4].i8.a8 = CALL &_file_get_char.CDecl.Function(HANDLE (up32->void),i32,i32)->(i8), [tv137-.up32->void]"$runtime_handle"(text (Aggregate40)+0).HANDLE (up32->void).a32, 0.i32, 9.i32                                    #9
                       CALL &_file_eat_white.CDecl.Function(HANDLE (up32->void),i32,i32)->(void), [tv137-.up32->void]"$runtime_handle"(text (Aggregate40)+0).HANDLE (up32->void).a32, 0.i32, 9.i32                                           #9
   t140.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                            #10
   t141.i32          = COMPARE(NE) [t140.up32->void].char (i8).a8, 32(0x20).char (i8)                                                                       #10
                       CONDITIONALBRANCH(True) t141.i32, $L5, $L6           #10
$L5: (references=1)                                                         #10
   tv144-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #10
                       GOTO $L7                                             #10
$L6: (references=1)                                                         #10
   tv144-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #10
                       GOTO $L7                                             #10
$L7: (references=2)                                                         #10
   tv145-.up32->void = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 1.i32                                            #10
   t146.i32          = CALL &_file_eoln.CDecl.Function(HANDLE (up32->void),i8)->(i32), [tv145-.up32->void]"$runtime_handle"(text (Aggregate40)+0).HANDLE (up32->void).a32, [tv145-.up32->void+4].char (i8).a8                               #10
                       CONDITIONALBRANCH(True) t146.i32, $L8, $L9           #10
$L8: (references=1)                                                         #10
   tv147-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #10
                       GOTO $L10                                            #10
$L9: (references=1)                                                         #10
   tv147-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #10
                       GOTO $L10                                            #10
$L10: (references=2)                                                        #10
   tv147-.Boolean (Enum32) = ASSIGN tv147-.Boolean (Enum32)                 #10
   t148.i32          = NOT tv147"$$data"(Boolean (Enum32)+0).i32            #10
                       CONDITIONALBRANCH(True) t148.i32, $L11, $L12         #10
$L11: (references=1)                                                        #10
   tv149-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #10
                       GOTO $L13                                            #10
$L12: (references=1)                                                        #10
   tv149-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #10
                       GOTO $L13                                            #10
$L13: (references=2)                                                        #10
   t150.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 1.i32                                            #10
   t151.i32          = BITAND tv144"$$data"(Boolean (Enum32)+0).i32, tv149"$$data"(Boolean (Enum32)+0).i32                                                  #10
                       CONDITIONALBRANCH(True) t151.i32, $L14, $L15         #10
$L14: (references=1)                                                        #10
   tv152-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #10
                       GOTO $L16                                            #10
$L15: (references=1)                                                        #10
   tv152-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #10
                       GOTO $L16                                            #10
$L16: (references=2)                                                        #10
                       CONDITIONALBRANCH(True) tv152"$$data"(Boolean (Enum32)+0).i32, $L17, $L4                                                             #10
$L17: (references=1)                                                        #10
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 3.i32                                                                   #10
                       RETURN $L18(T)                                       #11
$L18: (references=1)                                                        #11
                       EXITFUNCTION                                         #11
$L2: (references=0)                                                         #11
                       END                                                  #11
Writing Postfix.obj...

Postfix.p - 0 error(s), 0 warning(s).

Linking...

Postfix.exe - 0 error(s), 0 warning(s).

 ab+cd-*
 abc*+d-
 ab+c*d-
 abcd-*+
 aa*a*a*
 bcdca*a*+*b*+a+

Compiling...
Inflation.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 20(0x00000014).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 20(0x00000014).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &inflation.CDecl.Function()->(void)              #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #7
                       START inflation(T)                                    #7
inflation: (references=1)                                                    #7
                       ENTERFUNCTION                                         #7
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 5.i32, &n.up32->integer (i32), &i.up32->integer (i32), &w1.up32->real (f64), &w2.up32->real (f64), &w3.up32->real (f64)                                                                #20
   n.integer (i32).a32 = ASSIGN 10(0x0000000a).integer (i32)                 #9
   i.integer (i32).a32 = ASSIGN 0.integer (i32)                             #11
   w1.real (f64).a64 = ASSIGN 1.real (f64)                                  #11
   w2.real (f64).a64 = ASSIGN 1.real (f64)                                  #11
   w3.real (f64).a64 = ASSIGN 1.real (f64)                                  #11
                       GOTO $L4                                             #20
$L4: (references=2)                                                         #20
   i.integer (i32).a32 = ADD 1.integer (i32), i.integer (i32).a32           #12
   t143.real (f64)   = MULTIPLY w1.real (f64).a64, 1.07.real (f64)          #13
   w1.real (f64).a64 = ASSIGN t143.real (f64)                               #13
   t144.real (f64)   = MULTIPLY w2.real (f64).a64, 1.08.real (f64)          #14
   w2.real (f64).a64 = ASSIGN t144.real (f64)                               #14
   t145.real (f64)   = MULTIPLY w3.real (f64).a64, 1.1.real (f64)           #15
   w3.real (f64).a64 = ASSIGN t145.real (f64)                               #15
   t146.i32          = COMPARE(LT) i.integer (i32).a32, 10(0x0000000a).integer (i32)                                                                        #16
                       CONDITIONALBRANCH(True) t146.i32, $L5, $L6           #16
$L5: (references=1)                                                         #16
   tv149-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #16
                       GOTO $L7                                             #16
$L6: (references=1)                                                         #16
   tv149-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #16
                       GOTO $L7                                             #16
$L7: (references=2)                                                         #16
                       CONDITIONALBRANCH(True) tv149"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #16
$L8: (references=1)                                                         #16
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                      #17
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 17(0x00000011).i32                                                         #17
                       GOTO $L9                                             #17
$L9: (references=2)                                                         #16
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN i.integer (i32).a32                                                                #18
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 18(0x00000012).i32                                                    #18
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                      #18
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 18(0x00000012).i32                                                         #18
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN w1.real (f64).a64                                                                     #18
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 18(0x00000012).i32                                                    #18
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                      #18
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 18(0x00000012).i32                                                         #18
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN w2.real (f64).a64                                                                     #18
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 18(0x00000012).i32                                                    #18
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                      #18
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 18(0x00000012).i32                                                         #18
   [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64 = ASSIGN w3.real (f64).a64                                                                     #18
                       CALL &_file_put_double.CDecl.Function(HANDLE (up32->void),f64,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].real (f64).a64, 0.i32, 18(0x00000012).i32                                                    #18
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #18
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 18(0x00000012).i32                                                                #18
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #18
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 18(0x00000012).i32                                                                #18
   t151.i32          = COMPARE(EQ) i.integer (i32).a32, n.integer (i32).a32 #20
                       CONDITIONALBRANCH(True) t151.i32, $L10, $L11         #20
$L10: (references=1)                                                        #20
   tv152-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #20
                       GOTO $L12                                            #20
$L11: (references=1)                                                        #20
   tv152-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #20
                       GOTO $L12                                            #20
$L12: (references=2)                                                        #20
                       CONDITIONALBRANCH(True) tv152"$$data"(Boolean (Enum32)+0).i32, $L13, $L4                                                             #20
$L13: (references=1)                                                        #20
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #20
                       RETURN $L14(T)                                       #20
$L14: (references=1)                                                        #20
                       EXITFUNCTION                                         #20
$L2: (references=0)                                                         #20
                       END                                                  #20
Writing Inflation.obj...

Inflation.p - 0 error(s), 0 warning(s).

Linking...

inflation.exe - 0 error(s), 0 warning(s).

 1 1.070000 1.080000 1.100000
 2 1.144900 1.166400 1.210000
 3 1.225043 1.259712 1.331000
 4 1.310796 1.360489 1.464100
 5 1.402552 1.469328 1.610510
 6 1.500730 1.586874 1.771561
 7 1.605781 1.713824 1.948717
 8 1.718186 1.850930 2.143589
 9 1.838459 1.999005 2.357948
10 1.967151 2.158925 2.593742

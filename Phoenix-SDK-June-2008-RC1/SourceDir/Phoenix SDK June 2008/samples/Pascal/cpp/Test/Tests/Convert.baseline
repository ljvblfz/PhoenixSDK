Compiling...
Convert.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 17(0x00000011).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 17(0x00000011).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Convert.CDecl.Function()->(void)                #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #4
                       START Convert(T)                                      #4
Convert: (references=1)                                                      #4
                       ENTERFUNCTION                                         #4
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG108.up32->char (i8), 0.i32, 2.i32, 6.i32, &addin.up32->integer (i32), &mulby.up32->real (f64), &low.up32->integer (i32), &high.up32->integer (i32), &separator.up32->$$unnamed100 (UnmgdArr[char (i8)]80), &degree.up32->$$unnamed101 (i32)                                                               #16
   addin.integer (i32).a32 = ASSIGN 32(0x00000020).integer (i32)             #6
   mulby.real (f64).a64 = ASSIGN 1.8.real (f64)                              #6
   low.integer (i32).a32 = ASSIGN 0.integer (i32)                            #6
   high.integer (i32).a32 = ASSIGN 39(0x00000027).integer (i32)              #6
   t144.up32->void   = CONVERT &separator($$unnamed100 (UnmgdArr[char (i8)]80)+0).up32->char (i8)                                                            #7
   t145.up32->void   = CONVERT &$SG105.up32->char (i8)                       #7
   tv146.i32         = CALL &_memcpy.CDecl.Function(up32->void,up32->void,u32)->(i32), t144.up32->void, t145.up32->void, 10(0x0000000a).u32                  #7
   t150.up32->void   = CONVERT &output($stdfile (Aggregate2080)+32).up32->char (i8)                                                                         #10
   t151.up32->void   = CONVERT &separator($$unnamed100 (UnmgdArr[char (i8)]80)+0).up32->char (i8)                                                           #10
   tv152.i32         = CALL &_memcpy.CDecl.Function(up32->void,up32->void,u32)->(i32), t150.up32->void, t151.up32->void, 10(0x0000000a).u32                 #10
                       CALL &_file_put_string.CDecl.Function(HANDLE (up32->void),up32->i8,i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, &output($stdfile (Aggregate2080)+32).up32->char (i8), 10(0x0000000a).i32, 0.i32, 10(0x0000000a).i32                            #10
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 13(0x0d).i8    #10
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 10(0x0000000a).i32                                                                #10
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 10(0x0a).i8    #10
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 10(0x0000000a).i32                                                                #10
   degree.$$unnamed101 (i32).a32 = ASSIGN low.integer (i32).a32             #11
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 39(0x00000027).i32, degree.$$unnamed101 (i32).a32, 0.i32, 14(0x0000000e).i32                                                      #11
   tv153-.integer (i32) = ASSIGN degree.$$unnamed101 (i32).a32              #11
                       GOTO $L4                                             #11
$L4: (references=2)                                                         #11
   t154.i32          = COMPARE(LT) high.integer (i32).a32, tv153-.integer (i32) #11
                       CONDITIONALBRANCH(True) t154.i32, $L5, $L6           #11
$L5: (references=1)                                                         #11
   tv157-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #11
                       GOTO $L7                                             #11
$L6: (references=1)                                                         #11
   tv157-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #11
                       GOTO $L7                                             #11
$L7: (references=2)                                                         #11
                       CONDITIONALBRANCH(True) tv157"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #11
$L9: (references=1)                                                         #11
   degree.$$unnamed101 (i32).a32 = ASSIGN tv153-.integer (i32)              #11
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 39(0x00000027).i32, degree.$$unnamed101 (i32).a32, 0.i32, 14(0x0000000e).i32                                                      #11
   t159.real (f64)   = CONVERT degree.$$unnamed101 (i32).a32                #12
   t160.real (f64)   = MULTIPLY t159.real (f64), mulby.real (f64).a64       #12
   t161.real (f64)   = CONVERT addin.integer (i32).a32                      #12
   t162.real (f64)   = ADD t160.real (f64), t161.real (f64)                 #12
   output($stdfile (Aggregate2080)+32).$$unnamed101 (i32).a32 = ASSIGN degree.$$unnamed101 (i32).a32                                                        #12
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 39(0x00000027).i32, output($stdfile (Aggregate2080)+32).$$unnamed101 (i32).a32, 0.i32, 12(0x0000000c).i32                         #12
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).$$unnamed101 (i32).a32, 0.i32, 12(0x0000000c).i32                                                      #12
   output($stdfile (Aggregate2080)+32).up32->char (i8).a32 = ASSIGN &$SG106.up32->char (i8)                                                                 #12
                       CALL &_file_put_string.CDecl.Function(HANDLE (up32->void),up32->i8,i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).up32->char (i8).a32, -1(0xffffffff).i32, 0.i32, 12(0x0000000c).i32                         #12
   output($stdfile (Aggregate2080)+32).$$unnamed101 (i32).a32 = CALL &_round.CDecl.Function(f64)->(i32), t162.real (f64)                                    #12
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i32.a32, 0.i32, 12(0x0000000c).i32                                                              #12
   [&output.up32->$stdfile (Aggregate2080)+4].up32->char (i8).a32 = ASSIGN &$SG107.up32->char (i8)                                                          #12
                       CALL &_file_put_string.CDecl.Function(HANDLE (up32->void),up32->i8,i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].up32->char (i8).a32, -1(0xffffffff).i32, 0.i32, 12(0x0000000c).i32                  #12
   t165.i32          = CALL &_odd.CDecl.Function(i32)->(i32), degree.$$unnamed101 (i32).a32                                                                 #13
                       CONDITIONALBRANCH(True) t165.i32, $L10, $L11         #13
$L10: (references=1)                                                        #13
   tv166-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #13
                       GOTO $L12                                            #13
$L11: (references=1)                                                        #13
   tv166-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #13
                       GOTO $L12                                            #13
$L12: (references=2)                                                        #13
   tv166-.Boolean (Enum32) = ASSIGN tv166-.Boolean (Enum32)                 #13
                       CONDITIONALBRANCH(True) tv166"$$data"(Boolean (Enum32)+0).i32, $L13, $L14                                                            #13
$L13: (references=1)                                                        #13
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #14
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 14(0x0000000e).i32                                                                #14
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #14
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 14(0x0000000e).i32                                                                #14
                       GOTO $L14                                            #14
$L14: (references=2)                                                        #13
   t167.integer (i32) = ADD degree.$$unnamed101 (i32).a32, 1.integer (i32)  #14
   tv153-.integer (i32) = ASSIGN t167.integer (i32)                         #14
                       GOTO $L4                                             #14
$L8: (references=1)                                                         #11
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #15
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 15(0x0000000f).i32                                                                #15
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #15
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 15(0x0000000f).i32                                                                #15
   t168.up32->void   = CONVERT &[&output.up32->$stdfile (Aggregate2080)+4]($$unnamed100 (UnmgdArr[char (i8)]80)+0).up32->char (i8)                          #16
   t169.up32->void   = CONVERT &[&separator.up32->$$unnamed100 (UnmgdArr[char (i8)]80)].up32->char (i8)                                                     #16
   tv170.i32         = CALL &_memcpy.CDecl.Function(up32->void,up32->void,u32)->(i32), t168.up32->void, t169.up32->void, 10(0x0000000a).u32                 #16
                       CALL &_file_put_string.CDecl.Function(HANDLE (up32->void),up32->i8,i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, &[&output.up32->$stdfile (Aggregate2080)+4]($$unnamed100 (UnmgdArr[char (i8)]80)+0).up32->char (i8), 10(0x0000000a).i32, 0.i32, 16(0x00000010).i32                                                             #16
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #16
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 16(0x00000010).i32                                                                #16
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #16
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 16(0x00000010).i32                                                                #16
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #16
                       RETURN $L15(T)                                       #17
$L15: (references=1)                                                        #17
                       EXITFUNCTION                                         #17
$L2: (references=0)                                                         #17
                       END                                                  #17
Writing Convert.obj...

Convert.p - 0 error(s), 0 warning(s).

Linking...

Convert.exe - 0 error(s), 0 warning(s).

----------
0c	32f	1c	34f	
2c	36f	3c	37f	
4c	39f	5c	41f	
6c	43f	7c	45f	
8c	46f	9c	48f	
10c	50f	11c	52f	
12c	54f	13c	55f	
14c	57f	15c	59f	
16c	61f	17c	63f	
18c	64f	19c	66f	
20c	68f	21c	70f	
22c	72f	23c	73f	
24c	75f	25c	77f	
26c	79f	27c	81f	
28c	82f	29c	84f	
30c	86f	31c	88f	
32c	90f	33c	91f	
34c	93f	35c	95f	
36c	97f	37c	99f	
38c	100f	39c	102f	

----------

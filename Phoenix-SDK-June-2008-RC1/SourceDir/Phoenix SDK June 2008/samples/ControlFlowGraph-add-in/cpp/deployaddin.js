/*
    This script is called by a custom build rule for the Control-Flow-Graph-To-Deploy.Addin file.
    This is only for checked-in VS addin samples and not required for those generated by 
    the VS addin wizard.
*/
main();

function main()
{
    if (WScript.Arguments.length < 2)
    {
        Usage();
        WScript.Quit(1);
    }
    
    // get the args
    var args = WScript.Arguments;
    var addinFilespec = args(0);
    var assemblyPath = args(1);
    
    var fso = new ActiveXObject("Scripting.FileSystemObject");
    var shell = new ActiveXObject("WScript.Shell");
        
    if (!fso.FileExists(addinFilespec))
    {
        WScript.Echo("ERROR: couldn't find " + addinFilespec);
        WScript.Quit(1);
    }

    // get the filename
    var regexp = /([^\\]*\.addin)/i;
    regexp.exec(addinFilespec);
    var filename = RegExp.$1;

    // fix up the path to the assembly
    var ForReading = 1;
    var ForWriting = 2;
    var ForAppending = 8;
    var infile = fso.OpenTextFile(addinFilespec, ForReading);
    var regexp = /(<Assembly>)(.+)(<\/Assembly>)/i;
    var filestream = infile.ReadAll();
    var outstream = filestream.replace(regexp, "$1" + assemblyPath + "$3");
    infile.Close();

    // create the new file in the right location
    var outFilespec = shell.ExpandEnvironmentStrings("%APPDATA%");
    outFilespec += "\\Microsoft\\MSEnvShared\\Addins\\" + filename;
    outfile = fso.CreateTextFile(outFilespec, true);
    outfile.Write(outstream);
    outfile.Close();
    
    /*
        Reset registry key
        
        The <CommandPreload> tag in the .addin file, if set to 1, causes Devenv.exe to send
        ext_cm_uisetup to your addin once, allowing you to add command bars and such.
        Obnoxiously, it then ignores this tag and instead uses the registry. After the
        first time, changing the value in the <CommandPreload> tag has no effect.
        
        It saves this setting in the registry under the following key:
        
        "HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\8.0\PreloadAddinStateManaged"
        
        with a DWORD value name of:
        
        "<PROGID>;<path to .addin file>"            <-- this silly name can't be parsed
                                                        by WshShell.RegRead or WMI
       
        There are two data values for this key:
        1 - Load addin with ext_cm_uisetup
        2 - Don't
        
        Here we reset this from 2 to 1 to force devenv.exe to load the addin with
        ext_cm_uisetup and have the addin reinstall it's commands.
        
        TODO: Figure out how to implement w/o WSH or WMI
    */
    
    
    var msg = "Successfully deployed to \"" + outFilespec + "\"\n" +
              "To uninstall just delete that file\n";
    WScript.Echo(msg);
}

function Usage()
{
    var msg = "  This deploys your VS Add-in by munging and copying the .addin\n" +
              "  file you specify to %APPDATA%\\Microsoft\\MSEnvShared\\Addins\n\n" +
              "  usage: DeployAddin.js <AddinConfig> <AssemblyFilespec>\n" +
              "\tAddinConfig\t\t-Full filespec to your VS .addin config\n" +
              "\tAssemblyFilespec\t-Full filespec to your VS Add-in assembly";
    WScript.Echo(msg);
}
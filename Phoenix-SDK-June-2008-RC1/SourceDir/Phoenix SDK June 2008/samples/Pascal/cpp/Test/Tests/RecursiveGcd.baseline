Compiling...
RecursiveGcd.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 21(0x00000015).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 21(0x00000015).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &RecursiveGcd.CDecl.Function()->(void)           #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #4
                       START RecursiveGcd(T)                                 #4
RecursiveGcd: (references=1)                                                 #4
                       ENTERFUNCTION                                         #4
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 3.i32, &x.up32->integer (i32), &y.up32->integer (i32), &n.up32->integer (i32)                          #20
                       CALL &try.CDecl.Function(integer (i32),integer (i32))->(void), 18(0x00000012).integer (i32), 27(0x0000001b).integer (i32)            #17
                       CALL &try.CDecl.Function(integer (i32),integer (i32))->(void), 312(0x00000138).integer (i32), 2142(0x0000085e).integer (i32)         #18
                       CALL &try.CDecl.Function(integer (i32),integer (i32))->(void), 61(0x0000003d).integer (i32), 53(0x00000035).integer (i32)            #19
                       CALL &try.CDecl.Function(integer (i32),integer (i32))->(void), 98(0x00000062).integer (i32), 868(0x00000364).integer (i32)           #20
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #20
                       RETURN $L4(T)                                        #21
$L4: (references=1)                                                         #21
                       EXITFUNCTION                                         #21
$L2: (references=0)                                                         #21
                       END                                                  #21

IR after Type Checker (control chktype)

Function Unit #4
$L1: (references=0)                                                         #13
                       START try(T)                                         #13
try: (references=1)                                                         #13
   a.integer (i32).a32, b.integer (i32).a32 = ENTERFUNCTION                 #13
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 4.i32, 2.i32, &a.up32->integer (i32), &b.up32->integer (i32)                                                  #14
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = ASSIGN a.integer (i32).a32                                                                       #14
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).integer (i32).a32, 0.i32, 14(0x0000000e).i32                                                           #14
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 9.char (i8)    #14
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 14(0x0000000e).i32                                                                #14
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = ASSIGN b.integer (i32).a32                                                                       #14
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).integer (i32).a32, 0.i32, 14(0x0000000e).i32                                                           #14
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 9.char (i8)    #14
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 14(0x0000000e).i32                                                                #14
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = CALL &gcd.CDecl.Function(integer (i32),integer (i32))->(integer (i32)), a.integer (i32).a32, b.integer (i32).a32                                                                 #14
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 14(0x0000000e).i32                                                    #14
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #14
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 14(0x0000000e).i32                                                                #14
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #14
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 14(0x0000000e).i32                                                                #14
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 4.i32                                                                   #14
                       RETURN $L4(T)                                        #15
$L4: (references=1)                                                         #15
                       EXITFUNCTION                                         #15
$L2: (references=0)                                                         #15
                       END                                                  #15

IR after Type Checker (control chktype)

Function Unit #3
$L1: (references=0)                                                          #8
                       START gcd(T)                                          #8
gcd: (references=1)                                                          #8
   m.integer (i32).a32, n.integer (i32).a32 = ENTERFUNCTION                  #8
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 3.i32, 3.i32, &m.up32->integer (i32), &n.up32->integer (i32), &gcd.up32->integer (i32)                        #10
   t140.i32          = COMPARE(EQ) 0.integer (i32), n.integer (i32).a32      #9
                       CONDITIONALBRANCH(True) t140.i32, $L4, $L5            #9
$L4: (references=1)                                                          #9
   tv143-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32                #9
                       GOTO $L6                                              #9
$L5: (references=1)                                                          #9
   tv143-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32               #9
                       GOTO $L6                                              #9
$L6: (references=2)                                                          #9
                       CONDITIONALBRANCH(True) tv143"$$data"(Boolean (Enum32)+0).i32, $L7, $L8                                                               #9
$L7: (references=1)                                                          #9
   gcd.integer (i32).a32 = ASSIGN m.integer (i32).a32                       #10
                       GOTO $L9                                             #10
$L8: (references=1)                                                          #9
   t144.i32          = CALL &_mod.CDecl.Function(i32,i32)->(i32), m.integer (i32).a32, n.integer (i32).a32                                                  #10
   gcd.integer (i32).a32 = CALL &gcd.CDecl.Function(integer (i32),integer (i32))->(integer (i32)), n.integer (i32).a32, t144.i32                            #10
                       GOTO $L9                                             #10
$L9: (references=2)                                                          #9
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 3.i32                                                                   #10
                       RETURN gcd.integer (i32).a32, $L10(T)                #11
$L10: (references=1)                                                        #11
                       EXITFUNCTION                                         #11
$L2: (references=0)                                                         #11
                       END                                                  #11
Writing RecursiveGcd.obj...

RecursiveGcd.p - 0 error(s), 0 warning(s).

Linking...

RecursiveGcd.exe - 0 error(s), 0 warning(s).

18	27	9
312	2142	6
61	53	1
98	868	14

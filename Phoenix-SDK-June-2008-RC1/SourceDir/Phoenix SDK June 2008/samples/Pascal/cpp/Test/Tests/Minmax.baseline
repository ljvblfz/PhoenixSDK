Compiling...
Minmax.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 33(0x00000021).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 33(0x00000021).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Minmax.CDecl.Function()->(void)                 #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #4
                       START Minmax(T)                                       #4
Minmax: (references=1)                                                       #4
                       ENTERFUNCTION                                         #4
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG106.up32->char (i8), 0.i32, 2.i32, 8.i32, &n.up32->integer (i32), &i.up32->integer (i32), &u.up32->integer (i32), &v.up32->integer (i32), &min.up32->integer (i32), &max.up32->integer (i32), &a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640), &minmax.up32->$$unnamed101 (Aggregate64)                #32
   n.integer (i32).a32 = ASSIGN 20(0x00000014).integer (i32)                 #6
   minmax"$runtime_handle"($$unnamed101 (Aggregate64)+0).HANDLE (up32->void).a32 = CALL &_file_open.CDecl.Function(up32->i8,i32,i32,i32)->(HANDLE (up32->void)), &$SG105.up32->char (i8), 0.i32, 0.i32, 9.i32                                #9
   t150.i32          = CALL &_file_get_int.CDecl.Function(HANDLE (up32->void),i32,i32)->(i32), minmax"$runtime_handle"($$unnamed101 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 9.i32                                                   #9
   [&minmax.up32->$$unnamed101 (Aggregate64)+4].integer (i32).a32 = ASSIGN t150.i32                                                                          #9
   i.integer (i32).a32 = ASSIGN 1.integer (i32)                             #13
   tv151-.integer (i32) = ASSIGN i.integer (i32).a32                        #13
                       GOTO $L4                                             #13
$L4: (references=2)                                                         #13
   t152.i32          = COMPARE(GT) tv151-.integer (i32), 20(0x00000014).integer (i32)                                                                       #13
                       CONDITIONALBRANCH(True) t152.i32, $L5, $L6           #13
$L5: (references=1)                                                         #13
   tv155-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #13
                       GOTO $L7                                             #13
$L6: (references=1)                                                         #13
   tv155-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #13
                       GOTO $L7                                             #13
$L7: (references=2)                                                         #13
                       CONDITIONALBRANCH(True) tv155"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #13
$L9: (references=1)                                                         #13
   i.integer (i32).a32 = ASSIGN tv151-.integer (i32)                        #13
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, i.integer (i32).a32, 0.i32, 14(0x0000000e).i32                                                                #14
   t156.i32          = SUBTRACT i.integer (i32).a32, 1.i32                  #14
   t157.i32          = MULTIPLY 1.i32, t156.i32                             #14
   t158.i32          = ADD t157.i32, 0.i32                                  #14
   tv159-.i32        = MULTIPLY 4.i32, t158.i32                             #14
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv159-.i32, 0.i32, 14(0x0000000e).i32                                                                         #14
   [&a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640)+tv159-.i32].integer (i32).a32 = ASSIGN minmax"$current_value"($$unnamed101 (Aggregate64)+32).integer (i32).a32                                                                       #14
   t160.i32          = CALL &_file_get_int.CDecl.Function(HANDLE (up32->void),i32,i32)->(i32), minmax"$runtime_handle"($$unnamed101 (Aggregate64)+0).HANDLE (up32->void).a32, 0.i32, 14(0x0000000e).i32                                     #14
   [&minmax.up32->$$unnamed101 (Aggregate64)+4].integer (i32).a32 = ASSIGN t160.i32                                                                         #14
   t161.integer (i32) = ADD i.integer (i32).a32, 1.integer (i32)            #14
   tv151-.integer (i32) = ASSIGN t161.integer (i32)                         #14
                       GOTO $L4                                             #14
$L8: (references=1)                                                         #13
   t162.i32          = SUBTRACT 1.integer (i32), 1.i32                      #16
   t163.i32          = MULTIPLY 1.i32, t162.i32                             #16
   t164.i32          = ADD t163.i32, 0.i32                                  #16
   tv165-.i32        = MULTIPLY 4.i32, t164.i32                             #16
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv165-.i32, 0.i32, 16(0x00000010).i32                                                                         #16
   min.integer (i32).a32 = ASSIGN [&a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640)+tv165-.i32].integer (i32).a32                                         #16
   max.integer (i32).a32 = ASSIGN min.integer (i32).a32                     #16
   i.integer (i32).a32 = ASSIGN 2.integer (i32)                             #16
                       GOTO $L10                                            #17
$L10: (references=2)                                                        #17
   t166.i32          = COMPARE(LT) i.integer (i32).a32, n.integer (i32).a32 #17
                       CONDITIONALBRANCH(True) t166.i32, $L11, $L12         #17
$L11: (references=1)                                                        #17
   tv167-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #17
                       GOTO $L13                                            #17
$L12: (references=1)                                                        #17
   tv167-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #17
                       GOTO $L13                                            #17
$L13: (references=2)                                                        #17
                       CONDITIONALBRANCH(True) tv167"$$data"(Boolean (Enum32)+0).i32, $L14, $L15                                                            #17
$L14: (references=1)                                                        #17
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, i.integer (i32).a32, 0.i32, 18(0x00000012).i32                                                                #18
   t168.i32          = SUBTRACT i.integer (i32).a32, 1.i32                  #18
   t169.i32          = MULTIPLY 1.i32, t168.i32                             #18
   t170.i32          = ADD t169.i32, 0.i32                                  #18
   tv171-.i32        = MULTIPLY 4.i32, t170.i32                             #18
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv171-.i32, 0.i32, 18(0x00000012).i32                                                                         #18
   u.integer (i32).a32 = ASSIGN [&a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640)+tv171-.i32].integer (i32).a32                                           #18
   tv172-.integer (i32) = ADD i.integer (i32).a32, 1.integer (i32)          #18
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, tv172-.integer (i32), 0.i32, 18(0x00000012).i32                                                               #18
   t173.i32          = SUBTRACT tv172-.integer (i32), 1.i32                 #18
   t174.i32          = MULTIPLY 1.i32, t173.i32                             #18
   t175.i32          = ADD t174.i32, 0.i32                                  #18
   tv176-.i32        = MULTIPLY 4.i32, t175.i32                             #18
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv176-.i32, 0.i32, 18(0x00000012).i32                                                                         #18
   v.integer (i32).a32 = ASSIGN [&a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640)+tv176-.i32].integer (i32).a32                                           #18
   t177.i32          = COMPARE(GT) u.integer (i32).a32, v.integer (i32).a32 #19
                       CONDITIONALBRANCH(True) t177.i32, $L16, $L17         #19
$L16: (references=1)                                                        #19
   tv178-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #19
                       GOTO $L18                                            #19
$L17: (references=1)                                                        #19
   tv178-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #19
                       GOTO $L18                                            #19
$L18: (references=2)                                                        #19
                       CONDITIONALBRANCH(True) tv178"$$data"(Boolean (Enum32)+0).i32, $L19, $L20                                                            #19
$L19: (references=1)                                                        #19
   t179.i32          = COMPARE(GT) u.integer (i32).a32, max.integer (i32).a32 #20
                       CONDITIONALBRANCH(True) t179.i32, $L22, $L23         #20
$L22: (references=1)                                                        #20
   tv180-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #20
                       GOTO $L24                                            #20
$L23: (references=1)                                                        #20
   tv180-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #20
                       GOTO $L24                                            #20
$L24: (references=2)                                                        #20
                       CONDITIONALBRANCH(True) tv180"$$data"(Boolean (Enum32)+0).i32, $L25, $L26                                                            #20
$L25: (references=1)                                                        #20
   max.integer (i32).a32 = ASSIGN u.integer (i32).a32                       #20
                       GOTO $L26                                            #20
$L26: (references=2)                                                        #20
   t181.i32          = COMPARE(LT) v.integer (i32).a32, min.integer (i32).a32 #21
                       CONDITIONALBRANCH(True) t181.i32, $L27, $L28         #21
$L27: (references=1)                                                        #21
   tv182-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #21
                       GOTO $L29                                            #21
$L28: (references=1)                                                        #21
   tv182-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #21
                       GOTO $L29                                            #21
$L29: (references=2)                                                        #21
                       CONDITIONALBRANCH(True) tv182"$$data"(Boolean (Enum32)+0).i32, $L30, $L31                                                            #21
$L30: (references=1)                                                        #21
   min.integer (i32).a32 = ASSIGN v.integer (i32).a32                       #22
                       GOTO $L31                                            #22
$L31: (references=2)                                                        #21
                       GOTO $L21                                            #22
$L20: (references=1)                                                        #19
   t183.i32          = COMPARE(GT) v.integer (i32).a32, max.integer (i32).a32 #23
                       CONDITIONALBRANCH(True) t183.i32, $L32, $L33         #23
$L32: (references=1)                                                        #23
   tv184-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #23
                       GOTO $L34                                            #23
$L33: (references=1)                                                        #23
   tv184-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #23
                       GOTO $L34                                            #23
$L34: (references=2)                                                        #23
                       CONDITIONALBRANCH(True) tv184"$$data"(Boolean (Enum32)+0).i32, $L35, $L36                                                            #23
$L35: (references=1)                                                        #23
   max.integer (i32).a32 = ASSIGN v.integer (i32).a32                       #23
                       GOTO $L36                                            #23
$L36: (references=2)                                                        #23
   t185.i32          = COMPARE(LT) u.integer (i32).a32, min.integer (i32).a32 #24
                       CONDITIONALBRANCH(True) t185.i32, $L37, $L38         #24
$L37: (references=1)                                                        #24
   tv186-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #24
                       GOTO $L39                                            #24
$L38: (references=1)                                                        #24
   tv186-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #24
                       GOTO $L39                                            #24
$L39: (references=2)                                                        #24
                       CONDITIONALBRANCH(True) tv186"$$data"(Boolean (Enum32)+0).i32, $L40, $L41                                                            #24
$L40: (references=1)                                                        #24
   min.integer (i32).a32 = ASSIGN u.integer (i32).a32                       #25
                       GOTO $L41                                            #25
$L41: (references=2)                                                        #24
                       GOTO $L21                                            #25
$L21: (references=2)                                                        #19
   t187.integer (i32) = ADD i.integer (i32).a32, 2.integer (i32)            #26
   i.integer (i32).a32 = ASSIGN t187.integer (i32)                          #26
                       GOTO $L10                                            #26
$L15: (references=1)                                                        #17
   t188.i32          = COMPARE(EQ) i.integer (i32).a32, n.integer (i32).a32 #28
                       CONDITIONALBRANCH(True) t188.i32, $L42, $L43         #28
$L42: (references=1)                                                        #28
   tv189-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #28
                       GOTO $L44                                            #28
$L43: (references=1)                                                        #28
   tv189-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #28
                       GOTO $L44                                            #28
$L44: (references=2)                                                        #28
                       CONDITIONALBRANCH(True) tv189"$$data"(Boolean (Enum32)+0).i32, $L45, $L46                                                            #28
$L45: (references=1)                                                        #28
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, n.integer (i32).a32, 0.i32, 29(0x0000001d).i32                                                                #29
   t190.i32          = SUBTRACT n.integer (i32).a32, 1.i32                  #29
   t191.i32          = MULTIPLY 1.i32, t190.i32                             #29
   t192.i32          = ADD t191.i32, 0.i32                                  #29
   tv193-.i32        = MULTIPLY 4.i32, t192.i32                             #29
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv193-.i32, 0.i32, 29(0x0000001d).i32                                                                         #29
   t194.i32          = COMPARE(GT) [&a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640)+tv193-.i32].integer (i32).a32, max.integer (i32).a32                 #29
                       CONDITIONALBRANCH(True) t194.i32, $L47, $L48         #29
$L47: (references=1)                                                        #29
   tv195-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #29
                       GOTO $L49                                            #29
$L48: (references=1)                                                        #29
   tv195-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #29
                       GOTO $L49                                            #29
$L49: (references=2)                                                        #29
                       CONDITIONALBRANCH(True) tv195"$$data"(Boolean (Enum32)+0).i32, $L50, $L51                                                            #29
$L50: (references=1)                                                        #29
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, n.integer (i32).a32, 0.i32, 29(0x0000001d).i32                                                                #29
   t196.i32          = SUBTRACT n.integer (i32).a32, 1.i32                  #29
   t197.i32          = MULTIPLY 1.i32, t196.i32                             #29
   t198.i32          = ADD t197.i32, 0.i32                                  #29
   tv199-.i32        = MULTIPLY 4.i32, t198.i32                             #29
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv199-.i32, 0.i32, 29(0x0000001d).i32                                                                         #29
   max.integer (i32).a32 = ASSIGN [&a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640)+tv199-.i32].integer (i32).a32                                         #29
                       GOTO $L52                                            #29
$L51: (references=1)                                                        #29
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, n.integer (i32).a32, 0.i32, 30(0x0000001e).i32                                                                #30
   t200.i32          = SUBTRACT n.integer (i32).a32, 1.i32                  #30
   t201.i32          = MULTIPLY 1.i32, t200.i32                             #30
   t202.i32          = ADD t201.i32, 0.i32                                  #30
   tv203-.i32        = MULTIPLY 4.i32, t202.i32                             #30
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv203-.i32, 0.i32, 30(0x0000001e).i32                                                                         #30
   t204.i32          = COMPARE(LT) [&a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640)+tv203-.i32].integer (i32).a32, min.integer (i32).a32                 #30
                       CONDITIONALBRANCH(True) t204.i32, $L53, $L54         #30
$L53: (references=1)                                                        #30
   tv205-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #30
                       GOTO $L55                                            #30
$L54: (references=1)                                                        #30
   tv205-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #30
                       GOTO $L55                                            #30
$L55: (references=2)                                                        #30
                       CONDITIONALBRANCH(True) tv205"$$data"(Boolean (Enum32)+0).i32, $L56, $L57                                                            #30
$L56: (references=1)                                                        #30
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 20(0x00000014).i32, n.integer (i32).a32, 0.i32, 30(0x0000001e).i32                                                                #30
   t206.i32          = SUBTRACT n.integer (i32).a32, 1.i32                  #30
   t207.i32          = MULTIPLY 1.i32, t206.i32                             #30
   t208.i32          = ADD t207.i32, 0.i32                                  #30
   tv209-.i32        = MULTIPLY 4.i32, t208.i32                             #30
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 76(0x0000004c).i32, tv209-.i32, 0.i32, 30(0x0000001e).i32                                                                         #30
   min.integer (i32).a32 = ASSIGN [&a.up32->$$unnamed100 (UnmgdArr[integer (i32)]640)+tv209-.i32].integer (i32).a32                                         #30
                       GOTO $L57                                            #30
$L57: (references=2)                                                        #30
                       GOTO $L52                                            #30
$L52: (references=2)                                                        #29
                       GOTO $L46                                            #30
$L46: (references=2)                                                        #28
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN max.integer (i32).a32                                                              #32
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 32(0x00000020).i32                                                    #32
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                      #32
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 32(0x00000020).i32                                                         #32
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN min.integer (i32).a32                                                              #32
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 32(0x00000020).i32                                                    #32
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #32
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 32(0x00000020).i32                                                                #32
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #32
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 32(0x00000020).i32                                                                #32
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #32
                       RETURN $L58(T)                                       #33
$L58: (references=1)                                                        #33
                       EXITFUNCTION                                         #33
$L2: (references=0)                                                         #33
                       END                                                  #33
Writing Minmax.obj...

Minmax.p - 0 error(s), 0 warning(s).

Linking...

Minmax.exe - 0 error(s), 0 warning(s).

94 -6

Compiling...
Parameters3.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 53(0x00000035).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 53(0x00000035).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Parameters3.CDecl.Function()->(void)            #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #3
                       START Parameters3(T)                                  #3
Parameters3: (references=1)                                                  #3
                       ENTERFUNCTION                                         #3
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 5.i32, &x.up32->complex (Aggregate64), &y.up32->complex (Aggregate64), &a.up32->arrayOfInteger (UnmgdArr[integer (i32)]320), &b.up32->arrayOfInteger (UnmgdArr[integer (i32)]320), &i.up32->integer (i32)                                                              #52
   x"re"(complex (Aggregate64)+0).integer (i32).a32 = ASSIGN 3.integer (i32) #37
   x"im"(complex (Aggregate64)+32).integer (i32).a32 = ASSIGN 4.integer (i32) #37
   y"re"(complex (Aggregate64)+0).integer (i32).a32 = ASSIGN 7.integer (i32) #38
   y"im"(complex (Aggregate64)+32).integer (i32).a32 = ASSIGN 8.integer (i32) #38
   i.integer (i32).a32 = ASSIGN 1.integer (i32)                             #40
   tv145-.integer (i32) = ASSIGN i.integer (i32).a32                        #40
                       GOTO $L4                                             #40
$L4: (references=2)                                                         #40
   t146.i32          = COMPARE(LT) 10(0x0000000a).integer (i32), tv145-.integer (i32)                                                                       #40
                       CONDITIONALBRANCH(True) t146.i32, $L5, $L6           #40
$L5: (references=1)                                                         #40
   tv149-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #40
                       GOTO $L7                                             #40
$L6: (references=1)                                                         #40
   tv149-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #40
                       GOTO $L7                                             #40
$L7: (references=2)                                                         #40
                       CONDITIONALBRANCH(True) tv149"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #40
$L9: (references=1)                                                         #40
   i.integer (i32).a32 = ASSIGN tv145-.integer (i32)                        #40
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 10(0x0000000a).i32, i.integer (i32).a32, 0.i32, 42(0x0000002a).i32                                                                #42
   t151.i32          = SUBTRACT i.integer (i32).a32, 1.i32                  #42
   t152.i32          = ADD t151.i32, 0.i32                                  #42
   tv153-.i32        = MULTIPLY 4.i32, t152.i32                             #42
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 36(0x00000024).i32, tv153-.i32, 0.i32, 42(0x0000002a).i32                                                                         #42
   t154.integer (i32) = ADD 6.integer (i32), i.integer (i32).a32            #42
   [&a.up32->arrayOfInteger (UnmgdArr[integer (i32)]320)+tv153-.i32].integer (i32).a32 = ASSIGN t154.integer (i32)                                          #42
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 10(0x0000000a).i32, i.integer (i32).a32, 0.i32, 43(0x0000002b).i32                                                                #43
   t155.i32          = SUBTRACT i.integer (i32).a32, 1.i32                  #43
   t156.i32          = MULTIPLY 1.i32, t155.i32                             #43
   t157.i32          = ADD t156.i32, 0.i32                                  #43
   tv158-.i32        = MULTIPLY 4.i32, t157.i32                             #43
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 36(0x00000024).i32, tv158-.i32, 0.i32, 43(0x0000002b).i32                                                                         #43
   t159.integer (i32) = ADD 8.integer (i32), i.integer (i32).a32            #44
   [&b.up32->arrayOfInteger (UnmgdArr[integer (i32)]320)+tv158-.i32].integer (i32).a32 = ASSIGN t159.integer (i32)                                          #44
   t160.integer (i32) = ADD i.integer (i32).a32, 1.integer (i32)            #44
   tv145-.integer (i32) = ASSIGN t160.integer (i32)                         #44
                       GOTO $L4                                             #44
$L8: (references=1)                                                         #40
                       CALL &printComplex.CDecl.Function(up32->complex (Aggregate64))->(void), &x.up32->complex (Aggregate64)                               #46
                       CALL &printComplex.CDecl.Function(up32->complex (Aggregate64))->(void), &y.up32->complex (Aggregate64)                               #46
                       CALL &printArray.CDecl.Function(up32->arrayOfInteger (UnmgdArr[integer (i32)]320))->(void), &a.up32->arrayOfInteger (UnmgdArr[integer (i32)]320)                                                                     #47
                       CALL &printArray.CDecl.Function(up32->arrayOfInteger (UnmgdArr[integer (i32)]320))->(void), &b.up32->arrayOfInteger (UnmgdArr[integer (i32)]320)                                                                     #47
                       CALL &p.CDecl.Function(complex (Aggregate64),up32->complex (Aggregate64),up32->arrayOfInteger (UnmgdArr[integer (i32)]320),up32->arrayOfInteger (UnmgdArr[integer (i32)]320))->(void), x.complex (Aggregate64).a64, &y.up32->complex (Aggregate64), &a.up32->arrayOfInteger (UnmgdArr[integer (i32)]320), &b.up32->arrayOfInteger (UnmgdArr[integer (i32)]320)                       #49
                       CALL &printComplex.CDecl.Function(up32->complex (Aggregate64))->(void), &x.up32->complex (Aggregate64)                               #51
                       CALL &printComplex.CDecl.Function(up32->complex (Aggregate64))->(void), &y.up32->complex (Aggregate64)                               #51
                       CALL &printArray.CDecl.Function(up32->arrayOfInteger (UnmgdArr[integer (i32)]320))->(void), &a.up32->arrayOfInteger (UnmgdArr[integer (i32)]320)                                                                     #52
                       CALL &printArray.CDecl.Function(up32->arrayOfInteger (UnmgdArr[integer (i32)]320))->(void), &b.up32->arrayOfInteger (UnmgdArr[integer (i32)]320)                                                                     #52
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #52
                       RETURN $L10(T)                                       #53
$L10: (references=1)                                                        #53
                       EXITFUNCTION                                         #53
$L2: (references=0)                                                         #53
                       END                                                  #53

IR after Type Checker (control chktype)

Function Unit #5
$L1: (references=0)                                                         #28
                       START printArray(T)                                  #28
printArray: (references=1)                                                  #28
   a.up32->arrayOfInteger (UnmgdArr[integer (i32)]320).a32 = ENTERFUNCTION  #28
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 5.i32, 2.i32, &a.up32->up32->arrayOfInteger (UnmgdArr[integer (i32)]320), &i.up32->integer (i32)              #34
   i.integer (i32).a32 = ASSIGN 1.integer (i32)                             #31
   tv139-.integer (i32) = ASSIGN i.integer (i32).a32                        #31
                       GOTO $L4                                             #31
$L4: (references=2)                                                         #31
   t140.i32          = COMPARE(LT) 10(0x0000000a).integer (i32), tv139-.integer (i32)                                                                       #31
                       CONDITIONALBRANCH(True) t140.i32, $L5, $L6           #31
$L5: (references=1)                                                         #31
   tv143-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #31
                       GOTO $L7                                             #31
$L6: (references=1)                                                         #31
   tv143-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #31
                       GOTO $L7                                             #31
$L7: (references=2)                                                         #31
                       CONDITIONALBRANCH(True) tv143"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #31
$L9: (references=1)                                                         #31
   i.integer (i32).a32 = ASSIGN tv139-.integer (i32)                        #31
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 10(0x0000000a).i32, i.integer (i32).a32, 0.i32, 32(0x00000020).i32                                                                #32
   t145.i32          = SUBTRACT i.integer (i32).a32, 1.i32                  #32
   t146.i32          = ADD t145.i32, 0.i32                                  #32
   tv147-.i32        = MULTIPLY 4.i32, t146.i32                             #32
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 36(0x00000024).i32, tv147-.i32, 0.i32, 32(0x00000020).i32                                                                         #32
                       CALL &_file_set_modifier.CDecl.Function(HANDLE (up32->void),i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, 0.i32, 2.integer (i32)                                    #32
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN [a.up32->arrayOfInteger (UnmgdArr[integer (i32)]320).a32+tv147-.i32](arrayOfInteger (UnmgdArr[integer (i32)]320)+0).integer (i32).a512                             #32
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 32(0x00000020).i32                                                    #32
   [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8 = ASSIGN 32(0x20).char (i8)                                                                      #32
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 32(0x00000020).i32                                                         #32
   t149.integer (i32) = ADD i.integer (i32).a32, 1.integer (i32)            #32
   tv139-.integer (i32) = ASSIGN t149.integer (i32)                         #32
                       GOTO $L4                                             #32
$L8: (references=1)                                                         #31
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8    #34
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 34(0x00000022).i32                                                         #34
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8    #34
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].char (i8).a8, 0.i32, 34(0x00000022).i32                                                         #34
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 5.i32                                                                   #34
                       RETURN $L10(T)                                       #34
$L10: (references=1)                                                        #34
                       EXITFUNCTION                                         #34
$L2: (references=0)                                                         #34
                       END                                                  #34

IR after Type Checker (control chktype)

Function Unit #4
$L1: (references=0)                                                         #23
                       START printComplex(T)                                #23
printComplex: (references=1)                                                #23
   c.up32->complex (Aggregate64).a32 = ENTERFUNCTION                        #23
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 4.i32, 1.i32, &c.up32->up32->complex (Aggregate64)                                                            #25
                       CALL &_file_set_modifier.CDecl.Function(HANDLE (up32->void),i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, 0.i32, 2.integer (i32)                                    #25
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = ASSIGN [c.up32->complex (Aggregate64).a32].integer (i32).a32                                     #25
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).integer (i32).a32, 0.i32, 25(0x00000019).i32                                                           #25
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 32(0x20).char (i8) #25
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 25(0x00000019).i32                                                                #25
                       CALL &_file_set_modifier.CDecl.Function(HANDLE (up32->void),i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, 0.i32, 2.integer (i32)                                    #25
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = ASSIGN [c.up32->complex (Aggregate64).a32+4].integer (i32).a32                                   #25
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).integer (i32).a32, 0.i32, 25(0x00000019).i32                                                           #25
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 13(0x0d).i8    #25
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 25(0x00000019).i32                                                                #25
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 10(0x0a).i8    #25
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 25(0x00000019).i32                                                                #25
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 4.i32                                                                   #25
                       RETURN $L4(T)                                        #26
$L4: (references=1)                                                         #26
                       EXITFUNCTION                                         #26
$L2: (references=0)                                                         #26
                       END                                                  #26

IR after Type Checker (control chktype)

Function Unit #3
$L1: (references=0)                                                         #10
                       START p(T)                                           #10
p: (references=1)                                                           #10
   c1.complex (Aggregate64).a64, c2.up32->complex (Aggregate64).a32, a1.up32->arrayOfInteger (UnmgdArr[integer (i32)]320).a32, a2.up32->arrayOfInteger (UnmgdArr[integer (i32)]320).a32 = ENTERFUNCTION                                     #10
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 3.i32, 4.i32, &c1.up32->complex (Aggregate64), &c2.up32->up32->complex (Aggregate64), &a1.up32->up32->arrayOfInteger (UnmgdArr[integer (i32)]320), &a2.up32->up32->arrayOfInteger (UnmgdArr[integer (i32)]320)                                                                #19
   c1"re"(complex (Aggregate64)+0).integer (i32).a32 = ADD 13(0x0000000d).integer (i32), c1"im"(complex (Aggregate64)+32).integer (i32).a32                 #13
   t142.integer (i32) = ADD [&c1.up32->complex (Aggregate64)].integer (i32).a32, 14(0x0000000e).integer (i32)                                               #13
   [&c1.up32->complex (Aggregate64)+4].integer (i32).a32 = ASSIGN t142.integer (i32)                                                                        #13
   t143.up32->complex (Aggregate64) = ASSIGN &[c2.up32->complex (Aggregate64).a32].up32->complex (Aggregate64)                                              #14
   t144.up32->complex (Aggregate64) = ASSIGN &[c2.up32->complex (Aggregate64).a32].up32->complex (Aggregate64)                                              #14
   t145.integer (i32) = ADD [t144.up32->complex (Aggregate64)+4].integer (i32).a32, 17(0x00000011).integer (i32)                                            #14
   [t143.up32->complex (Aggregate64)].integer (i32).a32 = ASSIGN t145.integer (i32)                                                                         #14
   t146.up32->complex (Aggregate64) = ASSIGN &[c2.up32->complex (Aggregate64).a32].up32->complex (Aggregate64)                                              #14
   t147.up32->complex (Aggregate64) = ASSIGN &[c2.up32->complex (Aggregate64).a32].up32->complex (Aggregate64)                                              #14
   t148.integer (i32) = ADD [t147.up32->complex (Aggregate64)].integer (i32).a32, 18(0x00000012).integer (i32)                                              #14
   [t146.up32->complex (Aggregate64)+4].integer (i32).a32 = ASSIGN t148.integer (i32)                                                                       #14
   tv149-.up32->void = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 4.i32                                            #20
   [tv149-.up32->void].integer (i32).a32 = ASSIGN 1.integer (i32)           #16
   tv150-.integer (i32) = ASSIGN [tv149-.up32->void].integer (i32).a32      #16
                       GOTO $L4                                             #16
$L4: (references=2)                                                         #16
   t151.i32          = COMPARE(GT) tv150-.integer (i32), 10(0x0000000a).integer (i32)                                                                       #16
                       CONDITIONALBRANCH(True) t151.i32, $L5, $L6           #16
$L5: (references=1)                                                         #16
   tv154-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #16
                       GOTO $L7                                             #16
$L6: (references=1)                                                         #16
   tv154-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #16
                       GOTO $L7                                             #16
$L7: (references=2)                                                         #16
                       CONDITIONALBRANCH(True) tv154"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #16
$L9: (references=1)                                                         #16
   [tv149-.up32->void].integer (i32).a32 = ASSIGN tv150-.integer (i32)      #16
   tv155-.up32->void = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 4.i32                                            #18
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 10(0x0000000a).i32, [tv155-.up32->void].integer (i32).a32, 0.i32, 18(0x00000012).i32                                              #18
   t156.i32          = SUBTRACT [tv155-.up32->void].integer (i32).a32, 1.i32 #18
   t157.i32          = MULTIPLY 1.i32, t156.i32                             #18
   t158.i32          = ADD t157.i32, 0.i32                                  #18
   tv159-.i32        = MULTIPLY 4.i32, t158.i32                             #18
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 36(0x00000024).i32, tv159-.i32, 0.i32, 18(0x00000012).i32                                                                         #18
   tv160-.up32->void = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 4.i32                                            #18
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 10(0x0000000a).i32, [tv160-.up32->void].integer (i32).a32, 0.i32, 18(0x00000012).i32                                              #18
   t161.i32          = SUBTRACT [tv160-.up32->void].integer (i32).a32, 1.i32 #18
   t162.i32          = MULTIPLY 1.i32, t161.i32                             #18
   t163.i32          = ADD t162.i32, 0.i32                                  #18
   tv164-.i32        = MULTIPLY 4.i32, t163.i32                             #18
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 36(0x00000024).i32, tv164-.i32, 0.i32, 18(0x00000012).i32                                                                         #18
   t165.integer (i32) = MULTIPLY [a1.up32->arrayOfInteger (UnmgdArr[integer (i32)]320).a32+tv164-.i32](arrayOfInteger (UnmgdArr[integer (i32)]320)+0).integer (i32).a512, 2.integer (i32)                                                   #18
   [a1.up32->arrayOfInteger (UnmgdArr[integer (i32)]320).a32+tv159-.i32](arrayOfInteger (UnmgdArr[integer (i32)]320)+0).integer (i32).a512 = ASSIGN t165.integer (i32)                                                                      #18
   tv166-.up32->void = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 4.i32                                            #19
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 10(0x0000000a).i32, [tv166-.up32->void].integer (i32).a32, 0.i32, 19(0x00000013).i32                                              #19
   t167.i32          = SUBTRACT [tv166-.up32->void].integer (i32).a32, 1.i32 #19
   t168.i32          = MULTIPLY 1.i32, t167.i32                             #19
   t169.i32          = ADD t168.i32, 0.i32                                  #19
   tv170-.i32        = MULTIPLY 4.i32, t169.i32                             #19
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 36(0x00000024).i32, tv170-.i32, 0.i32, 19(0x00000013).i32                                                                         #19
   tv171-.up32->void = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 4.i32                                            #19
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 10(0x0000000a).i32, [tv171-.up32->void].integer (i32).a32, 0.i32, 19(0x00000013).i32                                              #19
   t172.i32          = SUBTRACT [tv171-.up32->void].integer (i32).a32, 1.i32 #19
   t173.i32          = MULTIPLY 1.i32, t172.i32                             #19
   t174.i32          = ADD t173.i32, 0.i32                                  #19
   tv175-.i32        = MULTIPLY 4.i32, t174.i32                             #19
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 36(0x00000024).i32, tv175-.i32, 0.i32, 19(0x00000013).i32                                                                         #19
   t176.integer (i32) = MULTIPLY [a2.up32->arrayOfInteger (UnmgdArr[integer (i32)]320).a32+tv175-.i32](arrayOfInteger (UnmgdArr[integer (i32)]320)+0).integer (i32).a512, 2.integer (i32)                                                   #19
   [a2.up32->arrayOfInteger (UnmgdArr[integer (i32)]320).a32+tv170-.i32](arrayOfInteger (UnmgdArr[integer (i32)]320)+0).integer (i32).a512 = ASSIGN t176.integer (i32)                                                                      #19
   t177.integer (i32) = ADD [tv149-.up32->void].integer (i32).a32, 1.integer (i32)                                                                          #19
   tv150-.integer (i32) = ASSIGN t177.integer (i32)                         #19
                       GOTO $L4                                             #19
$L8: (references=1)                                                         #16
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 3.i32                                                                   #19
                       RETURN $L10(T)                                       #21
$L10: (references=1)                                                        #21
                       EXITFUNCTION                                         #21
$L2: (references=0)                                                         #21
                       END                                                  #21
Writing Parameters3.obj...

Parameters3.p - 0 error(s), 0 warning(s).

Linking...

Parameters3.exe - 0 error(s), 0 warning(s).

 3  4
 7  8
 7  8  9 10 11 12 13 14 15 16 
 9 10 11 12 13 14 15 16 17 18 
 3  4
25 43
14 16 18 20 22 24 26 28 30 32 
18 20 22 24 26 28 30 32 34 36 

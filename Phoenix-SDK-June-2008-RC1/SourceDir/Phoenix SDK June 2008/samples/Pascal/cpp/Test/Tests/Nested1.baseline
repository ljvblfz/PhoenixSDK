Compiling...
Nested1.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 13(0x0000000d).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 13(0x0000000d).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Nested1.CDecl.Function()->(void)                #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #3
                       START Nested1(T)                                      #3
Nested1: (references=1)                                                      #3
                       ENTERFUNCTION                                         #3
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 1.i32, &x.up32->integer (i32)                                                                          #12
   x.integer (i32).a32 = ASSIGN 5.integer (i32)                              #9
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = ASSIGN x.integer (i32).a32                                                                       #10
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).integer (i32).a32, 0.i32, 10(0x0000000a).i32                                                           #10
   output($stdfile (Aggregate2080)+32).i8.a8 = ASSIGN 13(0x0d).i8           #10
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).i8.a8, 0.i32, 10(0x0000000a).i32                                                                       #10
   output($stdfile (Aggregate2080)+32).i8.a8 = ASSIGN 10(0x0a).i8           #10
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).i8.a8, 0.i32, 10(0x0000000a).i32                                                                       #10
                       CALL &p.CDecl.Function()->(void)                     #11
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = ASSIGN x.integer (i32).a32                                                                       #12
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).integer (i32).a32, 0.i32, 12(0x0000000c).i32                                                           #12
   output($stdfile (Aggregate2080)+32).i8.a8 = ASSIGN 13(0x0d).i8           #12
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).i8.a8, 0.i32, 12(0x0000000c).i32                                                                       #12
   output($stdfile (Aggregate2080)+32).i8.a8 = ASSIGN 10(0x0a).i8           #12
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).i8.a8, 0.i32, 12(0x0000000c).i32                                                                       #12
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #12
                       RETURN $L4(T)                                        #13
$L4: (references=1)                                                         #13
                       EXITFUNCTION                                         #13
$L2: (references=0)                                                         #13
                       END                                                  #13

IR after Type Checker (control chktype)

Function Unit #3
$L1: (references=0)                                                          #5
                       START p(T)                                            #5
p: (references=1)                                                            #5
                       ENTERFUNCTION                                         #5
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 3.i32, 0.i32                   #6
   t137.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                             #6
   t138.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                             #6
   [t137.up32->void].integer (i32).a32 = ADD 1.integer (i32), [t138.up32->void].integer (i32).a32                                                            #6
   t140.up32->void   = CALL &_display_get_address.CDecl.Function(i32,i32,i32)->(up32->void), 0.i32, 2.i32, 0.i32                                             #6
   [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32 = ASSIGN [t140.up32->void].integer (i32).a32                                                 #6
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].integer (i32).a32, 0.i32, 6.i32                                                                  #6
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 13(0x0d).i8     #6
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 6.i32 #6
   [&output.up32->$stdfile (Aggregate2080)+4].i8.a8 = ASSIGN 10(0x0a).i8     #6
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, [&output.up32->$stdfile (Aggregate2080)+4].i8.a8, 0.i32, 6.i32 #6
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 3.i32                                                                    #6
                       RETURN $L4(T)                                         #7
$L4: (references=1)                                                          #7
                       EXITFUNCTION                                          #7
$L2: (references=0)                                                          #7
                       END                                                   #7
Writing Nested1.obj...

Nested1.p - 0 error(s), 0 warning(s).

Linking...

Nested1.exe - 0 error(s), 0 warning(s).

5
6
6

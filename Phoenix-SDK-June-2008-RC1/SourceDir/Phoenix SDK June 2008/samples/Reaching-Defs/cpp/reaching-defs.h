//-----------------------------------------------------------------------------
//
// Phoenix
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
// Description:
//
//    Reaching definitions plug-in.
//    Sample illustrates Phoenix Data Flow package
//    implementing standard iterative algorithm for
//    reaching definitions.
//
//    The plug-in injects a phase after MIR Lower
//
//    The ReachingDefs phase uses the Phoenix DataFlow API by deriving classes
//    from Phx::DataFlow::Walker and Phx::DataFlow::Data.
//    
// Usage:
//
//    -PlugIn:reaching-defs.dll
//
//-----------------------------------------------------------------------------

#pragma once

namespace Phx
{

namespace Samples
{

namespace ReachingDefs
{

typedef Phx::Collections::IdToInstructionMap IdToInstructionMap;

//-----------------------------------------------------------------------------
//
// Description:
//
//    ReachingDefs::PlugIn implements Phx::PlugIn so that Phx can load
//    this plug in.
//
//-----------------------------------------------------------------------------

public ref class PlugIn : public Phx::PlugIn
{
public:

   virtual void RegisterObjects() override;

   virtual void
   BuildPhases
   (
      Phases::PhaseConfiguration ^ config
   ) override;

   property System::String ^ NameString
   {
      virtual System::String ^ get() override
      {
      return L"Reaching Definitions";
      }
   }
};

//-----------------------------------------------------------------------------
//
// Description:
//
//    Reaching Definitions phase.
//    Collects reaching definitions in form of extending objects
//    (bit vectors) attached to instruction operands.
//    Results can be dumped using verbosetrace:reachingDefs.
//
// Remarks:
//
//    1. In the sample phase is invoked right after MIR Lower
//    for illustration purposes only. There are no limitations
//    on relative position of the phase exception ability to build flow
//    graph.
//    2. In the sample all auxiliary structures and results, including
//    operands extending objects are freed at the phase end.
//
//-----------------------------------------------------------------------------

public ref class Phase : public Phases::Phase
{
public:

   static Phase ^
   New
   (
      Phases::PhaseConfiguration ^ config
   );

   virtual void Execute(Phx::Unit ^ unit) override;

#if defined (PHX_DEBUG_SUPPORT)

public:
   static Phx::Controls::ComponentControl ^ DebugControl;

#endif
};

//-----------------------------------------------------------------------------
//
// Description:
//
//    Unique definition Id.
//
//-----------------------------------------------------------------------------

typedef Int32 DefId;

//-----------------------------------------------------------------------------
//
// Description:
//
//    Instruction extending object.
//    Keeps bit vector of definitions generated by the instruction.
//
//-----------------------------------------------------------------------------

public ref class InstructionExtensionObject : public Phx::IR::InstructionExtensionObject
{
public:

   static
   InstructionExtensionObject ^
   New
   (
      Phx::Lifetime ^ lifetime
   );

   virtual void Delete() override;

   static InstructionExtensionObject ^
   GetExtensionObject
   (
      Phx::IR::Instruction ^ instruction
   );

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    Bit vector of definitions generated by the
   //    instruction being extended by the object.
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   virtual property BitVector::Sparse ^ DefsBv;
};

//-----------------------------------------------------------------------------
//
// Description:
//
//    Operand extending object.
//    Keeps bit vector of reaching definitions for the operand
//    being extended.
//
//-----------------------------------------------------------------------------

public ref class OperandExtensionObject : public Phx::IR::OperandExtensionObject
{

public:

   static
   OperandExtensionObject ^
   New
   (
      Phx::Lifetime ^ lifetime
   );

   virtual void Delete() override;

   static OperandExtensionObject ^
   GetExtensionObject
   (
      Phx::IR::Operand ^ operand
   );

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    Bit vector of reaching definitions for the
   //    operand being extended by the object.
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   virtual property BitVector::Sparse ^ ReachingDefsBv;
};

//-----------------------------------------------------------------------------
//
// Description:
//
//    Reaching Definitons Table.
//    Enumerates all definitions for all Alias::Location.
//    Contains mapping from Alias::Tag to bit vectors of DefIds associated
//    with them
//    Contains mapping from DefId to the instruction which generates the
//    definition.
//    Extends instructions by bit vectors of definitions they generate.
//
//-----------------------------------------------------------------------------

public ref class DefsTable : public Phx::Object
{

public:

   static DefsTable ^
   New
   (
      Phx::FunctionUnit ^ theFuncUnit,
      Phx::Lifetime ^ lifetime
   );

   void Delete() new;

   void
   AddLocDef
   (
      Phx::Alias::Tag  locationTag,
      Phx::IR::Instruction ^ definitionInstruction
   );

   Phx::IR::Instruction ^
   GetDefInstr
   (
      DefId defId
   );

   BitVector::Sparse ^
   GetAliasTagDefs
   (
      Phx::Alias::Tag aliasTag
   );

private:

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    Mapping DefId->Instruction
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   property IdToInstructionMap ^ DefToInstrMap;

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    Mapping Alias::LocTag -> BitVector::Sparse of DefIds
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   property array<BitVector::Sparse ^> ^ LocTagToDefsArray;

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    Function being served by the table
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------


   property Phx::FunctionUnit ^ FunctionUnit;

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    Internal counter of definitions, used to build up a numeration
   //    of definitions.
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   property DefId CurrDefId;

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    Lifetime used for all allocations invoked by the table
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   property Phx::Lifetime ^ Lifetime;
};

//-----------------------------------------------------------------------------
//
// Description:
//
//    Customized extension of Dataflow::Data, implements block data
//    for dataflow framework.
//    Wraps "Generate", "Kill", "In" and "Out" sets for each block in flow graph.
//
//-----------------------------------------------------------------------------

public ref class Data : public Phx::Dataflow::Data
{

public:

   // New, Delete, Merge, SamePrecondition, SamePostCondition
   // and Update are mandatory part for any extension of Dataflow::Data.
   // The rest defines custom part of the class.

   static Data ^
   New
   (
      Phx::Lifetime ^ lifetime
   );

   virtual void Delete() override;

   virtual void
   Merge
   (
      Phx::Dataflow::Data ^     dependencyData,
      Phx::Dataflow::Data ^     blockData,
      Phx::Dataflow::MergeFlags flags
   ) override;

   virtual Phx::Boolean
   SamePrecondition
   (
      Phx::Dataflow::Data ^ blockData
   ) override;

   virtual Phx::Boolean
   SamePostCondition
   (
      Phx::Dataflow::Data ^ blockData
   ) override;

   virtual void
   Update
   (
      Phx::Dataflow::Data ^ temporaryData
   ) override;

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    "In" set of definitions
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   property BitVector::Sparse ^ InBitVector;

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    "Out" set of definitions
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   property BitVector::Sparse ^ OutBitVector;

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    "Generate" set of definitions
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   property BitVector::Sparse ^ GenerateBitVector;

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    "Kill" set of definitions
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   property BitVector::Sparse ^ KillBitVector;

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    "Out" set of definitions live out along exception edges
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   property BitVector::Sparse ^ ExnOutBV;

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    "Generate" set of definitions summarizing effects from the start of the
   //    block to an exception edge
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   property BitVector::Sparse ^ ExnGenBV;

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    "Kill" set of definitions summarizing effects from the start of the
   //    block to an exception edge
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   property BitVector::Sparse ^ ExnKillBV;

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    Boolean indicating whether there is an exception edge leaving this block
   //
   // Remarks:
   //
   //    Get only
   //
   //--------------------------------------------------------------------------

   property bool HasExnInfo {
      bool get();
   }

   void EnsureExnInfo();

private:

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    Lifetime this Data was allocated in
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   property Phx::Lifetime ^ Lifetime;
};

//-----------------------------------------------------------------------------
//
// Description:
//
//    Customized extension of Dataflow::Walker,
//    implements specific iterative walker for  dataflow framework.
//
//-----------------------------------------------------------------------------

public ref class Walker : public Phx::Dataflow::Walker
{

public:

   // New, Delete, AllocateData, EvaluateBlock are
   // mandatory part for any Dataflow::Walker
   // The rest defines custom part of the class.

   static Walker ^ New(Phx::FunctionUnit ^ functionUnit);

   virtual void Delete() override;

   virtual void
   AllocateData
   (
      Phx::UInt numberElements
   ) override;

   virtual void
   EvaluateBlock
   (
      Phx::Graphs::BasicBlock ^ block,
      Phx::Dataflow::Data ^     temporaryData
   ) override;

#if defined (PHX_DEBUG_SUPPORT)

   property Phx::Controls::ComponentControl ^ DebugControl
   {
      virtual Phx::Controls::ComponentControl ^ get() override { return Phase::DebugControl; }
   } 

#endif

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //    Temporary lifetime used for all allocations invoked by the Walker
   //    or its Table
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   property Phx::Lifetime ^ TemporaryLifetime;

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //     The Definition Table which  collects all definitions and supports
   //     necessary mappings between alias tags, definition ids and
   //     instructions.
   //
   // Remarks:
   //
   //    Get only
   //
   //--------------------------------------------------------------------------

   property DefsTable ^ DefTable {
      DefsTable ^ get();
   }

   //--------------------------------------------------------------------------
   //
   // Description:
   //
   //     FunctionUnit being analyzed
   //
   // Remarks:
   //
   //    Get/Set
   //
   //--------------------------------------------------------------------------

   property Phx::FunctionUnit ^ FunctionUnit;

   void Collect();

   void Compute();

   void CollectOperandInfo();

private:

   DefsTable ^      definitionTable;
};

} // namespace ReachingDefs
} // namespace Samples
} // namespace Phx

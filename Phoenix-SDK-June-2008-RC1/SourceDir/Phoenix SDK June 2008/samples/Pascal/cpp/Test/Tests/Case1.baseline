Compiling...
Case1.p

IR after Type Checker (control chktype)

Function Unit #1
$L1: (references=0)                                                          #0
                       START _main(T)                                        #0
_main: (references=1)                                                        #0
                       ENTERFUNCTION                                         #0
   input.HANDLE (up32->void).a32 = CALL &_file_get_std_input.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 30(0x0000001e).i32                       #0
   t143.HANDLE (up32->void) = CALL &_file_get_std_output.CDecl.Function(i32,i32)->(HANDLE (up32->void)), 0.i32, 30(0x0000001e).i32                           #0
   output.HANDLE (up32->void).a32 = ASSIGN t143.HANDLE (up32->void)          #0
   [&true.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 1.i32                                                                         #0
   [&false.up32->Boolean (Enum32)]"$$data"(Boolean (Enum32)+0).i32.a32 = ASSIGN 0.i32                                                                        #0
                       CALL &_runtime_init.CDecl.Function()->(void)          #0
                       CALL &Case1.CDecl.Function()->(void)                  #0
                       CALL &_runtime_exit.CDecl.Function()->(void)          #0
                       RETURN 0.i32, $L4(T)                                  #0
$L4: (references=1)                                                          #0
                       EXITFUNCTION                                          #0
$L2: (references=0)                                                          #0
                       END                                                   #0

IR after Type Checker (control chktype)

Function Unit #2
$L1: (references=0)                                                          #3
                       START Case1(T)                                        #3
Case1: (references=1)                                                        #3
                       ENTERFUNCTION                                         #3
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 2.i32, 4.i32, &s.up32->string10 (UnmgdArr[char (i8)]80), &d.up32->integer (i32), &a.up32->integer (i32), &x.up32->integer (i32)                                                               #29
   t145.up32->void   = CONVERT &s(string10 (UnmgdArr[char (i8)]80)+0).up32->char (i8)                                                                       #24
   t146.up32->void   = CONVERT &$SG106.up32->char (i8)                      #24
   tv147.i32         = CALL &_memcpy.CDecl.Function(up32->void,up32->void,u32)->(i32), t145.up32->void, t146.up32->void, 10(0x0000000a).u32                 #24
   d.integer (i32).a32 = ASSIGN 0.integer (i32)                             #25
   a.integer (i32).a32 = ASSIGN 0.integer (i32)                             #25
   x.integer (i32).a32 = ASSIGN 0.integer (i32)                             #25
                       CALL &CountChars.CDecl.Function(up32->string10 (UnmgdArr[char (i8)]80),up32->integer (i32),up32->integer (i32),up32->integer (i32))->(void), &s.up32->string10 (UnmgdArr[char (i8)]80), &d.up32->integer (i32), &a.up32->integer (i32), &x.up32->integer (i32)                                       #27
   t153.up32->void   = CONVERT &output($stdfile (Aggregate2080)+32).up32->char (i8)                                                                         #29
   t154.up32->void   = CONVERT &s(string10 (UnmgdArr[char (i8)]80)+0).up32->char (i8)                                                                       #29
   tv155.i32         = CALL &_memcpy.CDecl.Function(up32->void,up32->void,u32)->(i32), t153.up32->void, t154.up32->void, 10(0x0000000a).u32                 #29
                       CALL &_file_put_string.CDecl.Function(HANDLE (up32->void),up32->i8,i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, &output($stdfile (Aggregate2080)+32).up32->char (i8), 10(0x0000000a).i32, 0.i32, 29(0x0000001d).i32                            #29
   output($stdfile (Aggregate2080)+32).up32->char (i8).a32 = ASSIGN &$SG107.up32->char (i8)                                                                 #29
                       CALL &_file_put_string.CDecl.Function(HANDLE (up32->void),up32->i8,i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).up32->char (i8).a32, -1(0xffffffff).i32, 0.i32, 29(0x0000001d).i32                         #29
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = ASSIGN d.integer (i32).a32                                                                       #29
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).integer (i32).a32, 0.i32, 29(0x0000001d).i32                                                           #29
   output($stdfile (Aggregate2080)+32).up32->char (i8).a32 = ASSIGN &$SG108.up32->char (i8)                                                                 #29
                       CALL &_file_put_string.CDecl.Function(HANDLE (up32->void),up32->i8,i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).up32->char (i8).a32, -1(0xffffffff).i32, 0.i32, 29(0x0000001d).i32                         #29
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = ASSIGN a.integer (i32).a32                                                                       #29
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).integer (i32).a32, 0.i32, 29(0x0000001d).i32                                                           #29
   output($stdfile (Aggregate2080)+32).up32->char (i8).a32 = ASSIGN &$SG109.up32->char (i8)                                                                 #29
                       CALL &_file_put_string.CDecl.Function(HANDLE (up32->void),up32->i8,i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).up32->char (i8).a32, -1(0xffffffff).i32, 0.i32, 29(0x0000001d).i32                         #29
   output($stdfile (Aggregate2080)+32).integer (i32).a32 = ASSIGN x.integer (i32).a32                                                                       #29
                       CALL &_file_put_int.CDecl.Function(HANDLE (up32->void),i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).integer (i32).a32, 0.i32, 29(0x0000001d).i32                                                           #29
   output($stdfile (Aggregate2080)+32).up32->char (i8).a32 = ASSIGN &$SG110.up32->char (i8)                                                                 #29
                       CALL &_file_put_string.CDecl.Function(HANDLE (up32->void),up32->i8,i32,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).up32->char (i8).a32, -1(0xffffffff).i32, 0.i32, 29(0x0000001d).i32                         #29
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 13(0x0d).i8    #29
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 29(0x0000001d).i32                                                                #29
   output($stdfile (Aggregate2080)+32).char (i8).a8 = ASSIGN 10(0x0a).i8    #29
                       CALL &_file_put_char.CDecl.Function(HANDLE (up32->void),i8,i32,i32)->(void), output"$runtime_handle"($stdfile (Aggregate2080)+0).HANDLE (up32->void).a32, output($stdfile (Aggregate2080)+32).char (i8).a8, 0.i32, 29(0x0000001d).i32                                                                #29
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 2.i32                                                                   #29
                       RETURN $L4(T)                                        #30
$L4: (references=1)                                                         #30
                       EXITFUNCTION                                         #30
$L2: (references=0)                                                         #30
                       END                                                  #30

IR after Type Checker (control chktype)

Function Unit #3
$L1: (references=0)                                                          #9
                       START CountChars(T)                                   #9
CountChars: (references=1)                                                   #9
   s.up32->string10 (UnmgdArr[char (i8)]80).a32, d.up32->integer (i32).a32, a.up32->integer (i32).a32, x.up32->integer (i32).a32 = ENTERFUNCTION             #9
                       CALL &_display_enter.CDecl.Function(up32->i8,i32,i32,i32,...)->(void), &$SG105.up32->char (i8), 0.i32, 3.i32, 5.i32, &s.up32->up32->string10 (UnmgdArr[char (i8)]80), &d.up32->up32->integer (i32), &a.up32->up32->integer (i32), &x.up32->up32->integer (i32), &i.up32->integer (i32)               #18
   i.integer (i32).a32 = ASSIGN 1.integer (i32)                             #12
   tv142-.integer (i32) = ASSIGN i.integer (i32).a32                        #12
                       GOTO $L4                                             #12
$L4: (references=2)                                                         #12
   t143.i32          = COMPARE(LT) 10(0x0000000a).integer (i32), tv142-.integer (i32)                                                                       #12
                       CONDITIONALBRANCH(True) t143.i32, $L5, $L6           #12
$L5: (references=1)                                                         #12
   tv146-.Boolean (Enum32) = ASSIGN true.Boolean (Enum32).a32               #12
                       GOTO $L7                                             #12
$L6: (references=1)                                                         #12
   tv146-.Boolean (Enum32) = ASSIGN false.Boolean (Enum32).a32              #12
                       GOTO $L7                                             #12
$L7: (references=2)                                                         #12
                       CONDITIONALBRANCH(True) tv146"$$data"(Boolean (Enum32)+0).i32, $L8, $L9                                                              #12
$L9: (references=1)                                                         #12
   i.integer (i32).a32 = ASSIGN tv142-.integer (i32)                        #12
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 1.i32, 10(0x0000000a).i32, i.integer (i32).a32, 0.i32, 14(0x0000000e).i32                                                                #14
   t148.i32          = SUBTRACT i.integer (i32).a32, 1.i32                  #14
   t149.i32          = ADD t148.i32, 0.i32                                  #14
   tv150-.i32        = MULTIPLY 1.i32, t149.i32                             #14
                       CALL &_runtime_check_int_range.CDecl.Function(i32,i32,i32,i32,i32)->(void), 0.i32, 9.i32, tv150-.i32, 0.i32, 14(0x0000000e).i32      #14
                       SWITCH [s.up32->string10 (UnmgdArr[char (i8)]80).a32+tv150-.i32](string10 (UnmgdArr[char (i8)]80)+0).char (i8).a128                  #14
                 Default $L10
                 Case 48..57, $L12
                 Case 65..90, $L13
                 Case 97..122, $L14
                 End
$L12: (references=1)                                                        #14
   t151.integer (i32) = ADD [d.up32->integer (i32).a32].integer (i32).a32, 1.integer (i32)                                                                  #15
   [d.up32->integer (i32).a32].integer (i32).a32 = ASSIGN t151.integer (i32) #15
                       GOTO $L11                                            #15
$L13: (references=1)                                                        #14
   t152.integer (i32) = ADD [a.up32->integer (i32).a32].integer (i32).a32, 1.integer (i32)                                                                  #16
   [a.up32->integer (i32).a32].integer (i32).a32 = ASSIGN t152.integer (i32) #16
                       GOTO $L11                                            #16
$L14: (references=1)                                                        #14
   t153.integer (i32) = ADD [a.up32->integer (i32).a32].integer (i32).a32, 1.integer (i32)                                                                  #17
   [a.up32->integer (i32).a32].integer (i32).a32 = ASSIGN t153.integer (i32) #17
                       GOTO $L11                                            #17
$L10: (references=1)                                                        #19
   t154.integer (i32) = ADD [x.up32->integer (i32).a32].integer (i32).a32, 1.integer (i32)                                                                  #18
   [x.up32->integer (i32).a32].integer (i32).a32 = ASSIGN t154.integer (i32) #18
                       GOTO $L11                                            #18
$L11: (references=4)                                                        #19
   t155.integer (i32) = ADD i.integer (i32).a32, 1.integer (i32)            #18
   tv142-.integer (i32) = ASSIGN t155.integer (i32)                         #18
                       GOTO $L4                                             #18
$L8: (references=1)                                                         #12
                       CALL &_display_leave.CDecl.Function(i32,i32)->(void), 0.i32, 3.i32                                                                   #18
                       RETURN $L15(T)                                       #21
$L15: (references=1)                                                        #21
                       EXITFUNCTION                                         #21
$L2: (references=0)                                                         #21
                       END                                                  #21
Writing Case1.obj...

Case1.p - 0 error(s), 0 warning(s).

Linking...

Case1.exe - 0 error(s), 0 warning(s).

cAiy:2lSi5 contains 2 digit, 7 alpha, and 1 other characters.
